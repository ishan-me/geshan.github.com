<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Geshan&#39;s Blog</title>
	<subtitle>A blog about software engineering, devops and web development</subtitle>
	
	<link href="https://geshan.com.np/atom.xml" rel="self"/>
	<link href="https://geshan.com.np/"/>
	<updated>2021-10-29T10:50:35Z</updated>
	<id>https://geshan.com.np/</id>
	<author>
		<name>Geshan Manandhar</name>
		<email>geshan@gmail.com</email>
	</author>
	
	<entry>
		<title>Node.js SQLite: Build a simple REST API with Express step-by-step</title>
		<link href="https://geshan.com.np/blog/2021/10/nodejs-sqlite/"/>
		<updated>2021-10-29T10:50:35Z</updated>
		<id>https://geshan.com.np/blog/2021/10/nodejs-sqlite/</id>
		<content type="html">&lt;p&gt;Node.js can be used very well with relational databases and SQLite is no exception. In this post, we will build a simple REST API for Quotes step-by-step with SQLite and Node.js using the Express Js framework step-by-step.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/01nodejs-sqlite.jpg&quot; title=&quot;Build Node.js SQLite REST API with Express js&quot; alt=&quot;Build Node.js SQLite REST API with Express js&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#sqlite-and-node.js&quot;&gt;SQLite and Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-sqlite-database-with-quote-table&quot;&gt;Setup SQLite database with Quote table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-express-with-better-sqlite-3&quot;&gt;Setup Express with Better SQLite 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#get-quotes-api-with-pagination&quot;&gt;Get Quotes API with pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#post-api-to-save-a-new-quote-with-node.js-sqlite&quot;&gt;Post API to save a new quote with Node.js SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#tldr-quick-start&quot;&gt;TLDR quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the code, below are some good to have prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have a general working knowledge of Node.js and Express Js.&lt;/li&gt;
&lt;li&gt;You have Node.js (preferably latest LTS) running on your machine or on have &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Docker with Node.js&lt;/a&gt; running&lt;/li&gt;
&lt;li&gt;SQLite is installed and running on your system, you can get it from &lt;a href=&quot;https://www.sqlite.org/download.html&quot;&gt;here&lt;/a&gt; and try &lt;code&gt;sqlite3 --version&lt;/code&gt; after it is installed.&lt;/li&gt;
&lt;li&gt;Any prior experience with the SQLite database would be helpful but not essential.&lt;/li&gt;
&lt;li&gt;Some git experience will be good to have.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the next stop of this Node.js SQLite tutorial, we will set up the database.&lt;/p&gt;
&lt;h2 id=&quot;sqlite-and-node.js&quot;&gt;SQLite and Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#sqlite-and-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no doubt that SQLite is the &lt;a href=&quot;https://www.sqlite.org/mostdeployed.html&quot;&gt;most deployed and used database&lt;/a&gt;, every mobile phone has it, every Mac and windows 10 machine has in addition to countless millions of other applications. Unlike other relational databases that have a server where clients connect to like MySQL or PostgreSQL, SQLite is a &lt;a href=&quot;https://www.sqlite.org/selfcontained.html&quot;&gt;self-contained&lt;/a&gt; database. It works as a stand-alone file but still packs the punch with a long list of &lt;a href=&quot;https://www.sqlite.org/fullsql.html&quot;&gt;features&lt;/a&gt;. SQLite is &lt;a href=&quot;https://www.sqlite.org/hirely.html&quot;&gt;ultra-reliable&lt;/a&gt; and &lt;a href=&quot;https://www.sqlite.org/fasterthanfs.html&quot;&gt;fast&lt;/a&gt;. It was developed to &lt;a href=&quot;https://corecursive.com/066-sqlite-with-richard-hipp/&quot;&gt;work offline in a battleship&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If SQLite is not really a client-server architecture relational database would there be any use-case for using Node.js with it? Yes, there are many, for instance, if we create an offline-first application that needs a relational database the only choice would be SQLite. Some people even run integration or end-to-end &lt;a href=&quot;https://medium.com/swlh/laravel-5-8-testing-with-sqlite-899d0fdd3494&quot;&gt;tests&lt;/a&gt; on SQLite where the main database of the application is a client server-based database. Usually, an object-relational mapper (ORM) is utilized to do this kind of seamless database swap. Another use-case can be if we are building an Electron app and need a database to support any actions offline. SQLite can even be leveraged as temporary storage to unblock the user to perform an action offline which can later be synced with another API/database when the device is back online. There can be many other usages for this demo we will build a simple Quotes API.&lt;/p&gt;
&lt;h2 id=&quot;setup-sqlite-database-with-quote-table&quot;&gt;Setup SQLite database with Quote table &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-sqlite-database-with-quote-table&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will build a Quotes API with SQLite as our database of choice. For this, we will first create a SQLite database with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; nodejs-sqlite&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; nodjs-sqlite&lt;br /&gt;sqlite3 quotes.db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we create a folder called &lt;code&gt;nodejs-sqlite&lt;/code&gt; then went into it. After that, we created the database with the &lt;code&gt;sqlite3&lt;/code&gt; command. It will give us a SQLite prompt like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/02sqlite-cli.jpg&quot; title=&quot;SQLite CLI to run SQL commands&quot; alt=&quot;SQLite CLI to run SQL commands&quot; /&gt;
&lt;p&gt;We can create the “quotes” table with the following SQL:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; AUTOINCREMENT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  quote &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  author &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  created_at &lt;span class=&quot;token keyword&quot;&gt;DATETIME&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the &lt;code&gt;quote&lt;/code&gt; table is created, we will insert some quotes for later testing by executing the SQL query as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;I&#39;&#39;m not a great programmer; I&#39;&#39;m just a good programmer with great habits.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Kent Beck&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Truth can only be found in one place: the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Robert C. Martin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;If you have to spend effort looking at a fragment of code and figuring out what it&#39;&#39;s doing, then you should extract it into a function and name the function after the &quot;what&quot;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Donald Knuth&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SQL, Lisp, and Haskell are the only programming languages that I’ve seen where one spends more time thinking than typing.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Philip Greenspun&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Deleted code is debugged code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jeff Sickel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;C.A.R. Hoare&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Simplicity is prerequisite for reliability.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Edsger W. Dijkstra&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two hard things in Computer Science: cache invalidation and naming things.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Phil Karlton&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Measuring programming progress by lines of code is like measuring aircraft building progress by weight.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bill Gates&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Controlling complexity is the essence of computer programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Brian Kernighan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The only way to learn a new programming language is by writing programs in it.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dennis Ritchie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After inserting the 17 rows, if we run `SELECT * FROM quote” we will see an output as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/03quotes-on-sqlite.jpg&quot; title=&quot;Quotes on SQLite database table with SQL select&quot; alt=&quot;Quotes on SQLite database table with SQL select&quot; /&gt;
&lt;p&gt;Next up, we will set up Express.js to show the quotes pulled in from the database we just created.&lt;/p&gt;
&lt;h2 id=&quot;setup-express-with-better-sqlite-3&quot;&gt;Setup Express with Better SQLite 3 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-express-with-better-sqlite-3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple ways to set up Express js, we will use NPM to set up express. To setup express, we will run the following commands in the same directory that has the &lt;code&gt;quotes.db&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init -y&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; express better-sqlite3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first command will set up the npm project with the default setting. It will also create the package.json file. The second command will install “express” and “better-sqlite3” NPM packages that we need to create our Quotes API.&lt;/p&gt;
&lt;h2 id=&quot;get-quotes-api-with-pagination&quot;&gt;Get Quotes API with pagination &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#get-quotes-api-with-pagination&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add the GET Quotes API, we will add an &lt;code&gt;index.js&lt;/code&gt; file on the root of the project besides &lt;code&gt;package.json&lt;/code&gt; that will have the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotesRouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./routes/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;alive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quotesRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above &lt;code&gt;index.js&lt;/code&gt; will be our server with Express for this Node.js SQLite demo tutorial. In this file we require express and set it up with 2 routes, the root &lt;code&gt;/&lt;/code&gt; just sends back an alive message. It acts more like a health check/ping to the application.&lt;/p&gt;
&lt;p&gt;Consequently, we set up the &lt;code&gt;/quotes&lt;/code&gt; route which is handled by the quotes router file defined in &lt;code&gt;/routes/quotes&lt;/code&gt; explained next. After then we listen to the port and start the server.&lt;/p&gt;
&lt;p&gt;Next, we will add a file &lt;code&gt;routes/quotes.js&lt;/code&gt; as referenced on &lt;code&gt;/index.js&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this &lt;code&gt;/routes/quotes.js&lt;/code&gt; file we create a new express router and add a get &lt;code&gt;/&lt;/code&gt; route which will listen to &lt;code&gt;/quotes&lt;/code&gt; route. We do a try-catch and call the next middleware if there is an error.&lt;/p&gt;
&lt;p&gt;It also requires the &lt;code&gt;/services/quotes.js&lt;/code&gt; file from this file we call the &lt;code&gt;getMultiple&lt;/code&gt; function to get multiple quotes passing the page from the query parameter which will be parsed as &lt;code&gt;/quotes?page=1&lt;/code&gt; from the query string.&lt;/p&gt;
&lt;p&gt;Next up, we will create the quotes service at &lt;code&gt;/services/quotes.js&lt;/code&gt; which will contain the following things:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT * FROM quote LIMIT ?,?&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this file we require two other files, first one is &lt;code&gt;/services/db.js&lt;/code&gt; which will be the entry point to the database that will run queries on the database. The next one is the &lt;code&gt;/config.js&lt;/code&gt; that has configuration options like the number of rows we want to show per page put in as &lt;code&gt;listPerPage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This file has a &lt;code&gt;getMultiple&lt;/code&gt; method that is used to query multiple quotes from the database. It uses an easy offset calculator based on the page number and list per page config. The offset is passed in the query to get multiple quotes. Limit and offset are used to enable easy pagination in the above code.&lt;/p&gt;
&lt;p&gt;After that we will create the referenced &lt;code&gt;/services/db.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sqlite &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;better-sqlite3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;quotes.db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;fileMustExist&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  query&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;/services.db.js&lt;/code&gt; file is the only file that communicates with the SQLite database. It has the full path of the database file &lt;code&gt;quotes.db&lt;/code&gt; and we also require and use the &lt;code&gt;better-sqlite3&lt;/code&gt; NPM package to run our SQL queries.&lt;/p&gt;
&lt;p&gt;This file has only one function &lt;code&gt;query&lt;/code&gt; that uses the &lt;a href=&quot;https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#preparestring---statement&quot;&gt;prepare&lt;/a&gt; function from our library of choice. The prepare function creates a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;prepared statement&lt;/a&gt;. By using &lt;a href=&quot;https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#allbindparameters---array-of-rows&quot;&gt;all&lt;/a&gt; method with the prepared statement it returns all the rows that are retrured after running the query. In our case with the offset and limit, it will return 10 rows maximum.&lt;/p&gt;
&lt;p&gt;The quotes service also required the config.js file at the root of the project and it will have the following code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; env &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  listPerPage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LIST_PER_PAGE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;/config.js&lt;/code&gt; is like a helper file used to store any configuration or credentials. For this Node.js SQLite example, we only store the list per page config which is either taken from the environment variable or if that is not available it falls back to the value 10.&lt;/p&gt;
&lt;p&gt;After adding all these files, if we run the server with node or &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; command like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the following output on the browser when we hit &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/04nodejs-sqlite-get-quotes.jpg&quot; title=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; alt=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; /&gt;
&lt;p&gt;So, what happened here is the GET request to get multiple quotes traveled in the following way:&lt;/p&gt;
&lt;p&gt;And it fetched the data from the &lt;code&gt;quotes.db&lt;/code&gt; SQLite database and rendered it back to the browser. As the pagination is also set up we can try &lt;code&gt;https://localhost:3000/quotes?page=2&lt;/code&gt; which will give us 7 quotes from id 11 to 17, if we try page 3 it will return an empty data array as there are only 17 quotes in the SQLite database. All the code added for this step can be viewed as a &lt;a href=&quot;https://github.com/geshan/nodejs-sqlite/pull/2&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;In the following section, we will add the POST Quote API which will enable us to create a new quote.&lt;/p&gt;
&lt;h2 id=&quot;post-api-to-save-a-new-quote-with-node.js-sqlite&quot;&gt;Post API to save a new quote with Node.js SQLite &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#post-api-to-save-a-new-quote-with-node.js-sqlite&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add a new Quote we will crate a POST quote API for this Node.js SQLite tutorial. Before that, we need to make sure that Express can accept JSON in the body. To enable Express js accepting JSON in the request body we will need to add the following line after the Express app has been initialized in the &lt;code&gt;/index.js&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below this line our routes will be placed. Consequently we will add the POST quote route in the &lt;code&gt;/routes/quotes.js&lt;/code&gt; file as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* POST quote */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while adding quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we added a new route to POST quotes. It calls the create method in the quotes service and sends the response back as JSON. If there is any error while creating the new quote on SQLite with Nodejs it will log the error and call the &lt;code&gt;next&lt;/code&gt; middleware.&lt;/p&gt;
&lt;p&gt;Subsequently, we will add the create function in the &lt;code&gt;/services/quotes.js&lt;/code&gt; as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; messages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;No object is provided&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Author is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quoteObj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quoteObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; quoteObj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;INSERT INTO quote (quote, author) VALUES (@quote, @author)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Error in creating quote&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Quote created successfully&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code snippet, we have added the 2 methods &lt;code&gt;validateCreate&lt;/code&gt; and  &lt;code&gt;create&lt;/code&gt; in the quotes service. This create method runs the insert query to add a new quote to the database after the validation has passed. In the validating method, we check if the quote and author exist, if any of the two is missing an error with HTTP status code 400 is sent back. In a more real-world application, the &lt;a href=&quot;https://github.com/sideway/joi&quot;&gt;Joi&lt;/a&gt; NPM package can be used for better validation.&lt;/p&gt;
&lt;p&gt;Notice, what we have called the &lt;code&gt;db.run&lt;/code&gt; function not &lt;code&gt;db.query&lt;/code&gt; as in the get quotes call. We will add this &lt;code&gt;run&lt;/code&gt; function in the &lt;code&gt;/services/db.js&lt;/code&gt; file as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both the &lt;code&gt;run&lt;/code&gt; function in &lt;code&gt;/sevices/db.js&lt;/code&gt; and the &lt;code&gt;create&lt;/code&gt; function in &lt;code&gt;/services/quotes.js&lt;/code&gt; will need to be exposed out being included in the &lt;code&gt;module.exports&lt;/code&gt; definition.&lt;/p&gt;
&lt;p&gt;After that given our server is running, we can run the following cURL command to insert a new code:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i -X POST -H &lt;span class=&quot;token string&quot;&gt;&#39;Accept: application/json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    -H &lt;span class=&quot;token string&quot;&gt;&#39;Content-type: application/json&#39;&lt;/span&gt; http://localhost:3000/quotes &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    --data &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;quote&quot;:&quot;Before software can be reusable it first has to be usable.&quot;,&quot;author&quot;:&quot;Ralph Johnson&quot;}&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will result in the following output:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;HTTP/1.1 &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; OK&lt;br /&gt;X-Powered-By: Express&lt;br /&gt;Content-Type: application/json&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf-8&lt;br /&gt;Content-Length: &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;br /&gt;ETag: W/&lt;span class=&quot;token string&quot;&gt;&quot;28-Gw37o554emBLJSQVDFBkjoN6exA&quot;&lt;/span&gt;&lt;br /&gt;Date: Wed, &lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt; Oct &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:17:29 GMT&lt;br /&gt;Connection: keep-alive&lt;br /&gt;Keep-Alive: &lt;span class=&quot;token assign-left variable&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Quote created successfully&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hurray! Our add quotes API is also working too. All the code to introduce the POST API to add a new quote can be seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-sqlite/pull/3&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For your own practice, you can add the update (PUT) and delete endpoints to get a better hold of how to do a full-on CRUD API.&lt;/p&gt;
&lt;h2 id=&quot;tldr-quick-start&quot;&gt;TLDR quick start &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#tldr-quick-start&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the code for this tutorial is available in a public GitHub repository for your reference. To get started quickly for the thing that has been built please follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository with &lt;code&gt;git clone git@github.com:geshan/nodejs-sqlite.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then execute &lt;code&gt;cd nodejs-sqlite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that, run: &lt;code&gt;npm install &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Subsequently, hit &lt;code&gt;http://loalhost:3000/quote&lt;/code&gt; on your favorite browser&lt;/li&gt;
&lt;li&gt;You should see the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/04nodejs-sqlite-get-quotes.jpg&quot; title=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; alt=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; /&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this tutorial about Node.js and SQLite, we have learned how to create a minimal REST API for Quotes. This is more like a starting point to build bigger things.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can use the open-source &lt;a href=&quot;https://github.com/geshan/nodejs-sqlite&quot;&gt;Github repository&lt;/a&gt; to use this example as a base to build your own API with Node.js and SQLite using the Express.js framework. Best of luck!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>4 ways to read file line by line in Node.js</title>
		<link href="https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/"/>
		<updated>2021-10-08T10:30:35Z</updated>
		<id>https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/</id>
		<content type="html">&lt;p&gt;There are multiple ways to read a file line by line with Node.js. In Node.js files can be read in sync way or in an async way. With the async path, it is possible to read large files without loading all the content of the file into memory.&lt;/p&gt;
&lt;p&gt;Reading the whole file at once will make the process memory intensive. With the ability to load and read a file line by line it enables us to stop the process at any step as per need. In this post, we will look into 3 ways to read a file line by line using Node.js with memory usage comparison.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/01nodejs-read-file-line-by-line.jpg&quot; title=&quot;4 ways to read file line by line with Node.js&quot; alt=&quot;4 ways to read file line by line with Node.js&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#the-test-file&quot;&gt;The test file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#read-file-sync&quot;&gt;Read file sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#readline&quot;&gt;Readline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#n-readlines&quot;&gt;N-readlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#line-reader&quot;&gt;Line reader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#other-options&quot;&gt;Other options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#quick-comparison&quot;&gt;Quick comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before jumping to the code, below are some of the prerequisites to follow along with the provided code examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Having Node.js 10+ (preferably the latest LTS Node 16) running on your machine/test environment is required. You can even use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js on docker&lt;/a&gt; for it.&lt;/li&gt;
&lt;li&gt;Knowledge of how to install NPM modules would be necessary.&lt;/li&gt;
&lt;li&gt;Any prior understanding of streams and how they work would be helpful.&lt;/li&gt;
&lt;li&gt;Any knowledge of &lt;a href=&quot;https://www.freecodecamp.org/news/understanding-node-js-event-driven-architecture-223292fcbc2d/&quot;&gt;Node’s event-based architecture&lt;/a&gt; will be good to have.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am running the code on a Mac with Node.js 14. In the following section we will look into the file we are going to use to read line by line with Node.js. The code examples are available in a public &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line&quot;&gt;GitHub repository&lt;/a&gt; for your convenience.&lt;/p&gt;
&lt;h2 id=&quot;the-test-file&quot;&gt;The test file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#the-test-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For all of the trail runs below we will use a 90 MB &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/blob/master/broadband.sql&quot;&gt;SQL dump file&lt;/a&gt; which I have taken from this &lt;a href=&quot;https://github.com/mazzyy/BroadbandNow&quot;&gt;BroadBandNow clone&lt;/a&gt; repository. The same file is used for each method of reading file line by line in Node.js to keep the test consistent across methods. We will also look at the memory consumption and the time it took to read the 90 MB file that has 798148 lines of text. This should be a good test to look at how these ways perform for a relatively large file.&lt;/p&gt;
&lt;h2 id=&quot;read-file-sync&quot;&gt;Read file sync &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#read-file-sync&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can possibly read the file in a synchronous way, meaning loading the whole 90 MB file in memory and loop through it. But, as we will load the whole file first before reading any lines from it the memory consumption will surely be more than 90 MB. Here is a quick example for reading the file line by line but in a not very performant sync way:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allFileContents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;allFileContents&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\r?\n&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line from file: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we are using the &lt;code&gt;fs&lt;/code&gt; module which is a native one, there is no need to install any new NPM module. In the above code, we are reading the while file synchronously then looping through each line one by one and printing it to the console with a &lt;code&gt;console.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the looping is done we print out the approximate memory usage. This code can be found in this &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/2&quot;&gt;pull request&lt;/a&gt; for your reference. If we run this script with a time prefix as below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node readfilesync.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will run and end with output as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/02readfilesync.jpg&quot; title=&quot;Read file line by line with Node.js using fs.readfilesync&quot; alt=&quot;Read file line by line with Node.js using fs.readfilesync&quot; /&gt;
&lt;p&gt;As expected for a 90 MB file it took ~225 MB of memory and took 7.85 seconds for it to loop through the 798K lines of text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is a 1 GB file it is not recommended to use this method as it will go out of memory trying to load the whole file into the memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we will look at a more performant async way of reading a file line by line with &lt;code&gt;readline&lt;/code&gt; and a stream which is another native Node.js module.&lt;/p&gt;
&lt;h2 id=&quot;readline&quot;&gt;Readline &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#readline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/readline.html&quot;&gt;Readline&lt;/a&gt; is a native Node.js module so there is no need to install a new NPM module to use it. It can be used to read files line by line by reading one line at a time from any readable stream. We will be using the on method with the &lt;code&gt;line&lt;/code&gt; &lt;a href=&quot;https://nodejs.org/api/readline.html#readline_event_line&quot;&gt;event&lt;/a&gt; which is emitted when the input stream receives an end-of-line input &lt;code&gt;\n, \r,&lt;/code&gt; or &lt;code&gt;\r\n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is the code example of readline with a readable stream:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; events &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;events&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; readline &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;readline&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processLineByLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      input&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      crlfDelay&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    rl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;line&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line from file: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;close&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Reading file line by line with readline done.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s understand what is going on in the above script. First we require 3 native node.js modules events, fs, and readline. After that, we define async function called &lt;code&gt;processLineByLine&lt;/code&gt; which creates an interface for readline where the input is a readstram where we pass our 90 MB test file. As per the &lt;a href=&quot;https://nodejs.org/api/readline.html#readline_readline_createinterface_options&quot;&gt;create Interface options&lt;/a&gt; the crlfDelay set to infinity will consider &lt;code&gt;\r&lt;/code&gt; followed by &lt;code&gt;\n&lt;/code&gt; as a single newline.&lt;/p&gt;
&lt;p&gt;As we are interacting with a readable stream, on each line read event it will call the &lt;code&gt;ri.on&lt;/code&gt; function with the &lt;code&gt;line&lt;/code&gt; event. At that point, we log the contents of the line read from the stream. Then we listen to the readline close event with &lt;code&gt;events.once&lt;/code&gt; that &lt;a href=&quot;https://nodejs.org/api/events.html#events_events_once_emitter_name_options&quot;&gt;creates a promise&lt;/a&gt; that will resolve with an array of all the arguments emitted to the given event. It will be an empty array in this case.&lt;/p&gt;
&lt;p&gt;Finally, we read the memory usage and log it. You can reference the above code in this &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/3&quot;&gt;pull request&lt;/a&gt;. When we run this script with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node readline.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It yields the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/03readline.jpg&quot; title=&quot;Read file line by line with Node.js using readline native module&quot; alt=&quot;Read file line by line with Node.js using readline native module&quot; /&gt;
&lt;p&gt;As seen above, the readline module with a readable stream took only 6.33 MB of memory to read a 90 MB file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As it was streamed which is a lot lesser than 225 MB in the previous sync example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It completed the process in 7.365 seconds. Next up we will look at the N-readlines NPM module to read a file line by line.&lt;/p&gt;
&lt;h2 id=&quot;n-readlines&quot;&gt;N-readlines &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#n-readlines&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;N-readline is a &lt;a href=&quot;https://www.npmjs.com/package/n-readlines&quot;&gt;NPM module&lt;/a&gt; that will read file line by line without buffering the whole file in memory. It does this without using streams by reading the file’s content in &lt;a href=&quot;https://github.com/nacholibre/node-readlines/blob/master/readlines.js#L84&quot;&gt;chunks&lt;/a&gt; using &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_new_buffer_array&quot;&gt;Buffer&lt;/a&gt; and the native file system module. Even though it works in a synchronous way it does not load the whole file in memory.&lt;/p&gt;
&lt;p&gt;Below is an example of how to use N-readline to read a file line by line after installing it with &lt;code&gt;npm i --save n-readlines&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nReadlines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;n-readlines&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; broadbandLines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;nReadlines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lineNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; broadbandLines&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lineNumber&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; has: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ascii&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    lineNumber&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end of file.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code, first, we require the &lt;code&gt;n-readlines&lt;/code&gt; module and we instantiate it with our &lt;code&gt;broadband.sql&lt;/code&gt; file which is 90 MBs. Other &lt;a href=&quot;https://github.com/nacholibre/node-readlines#new-readlinesfd-options&quot;&gt;options&lt;/a&gt; like &lt;code&gt;readChunk&lt;/code&gt;  and &lt;code&gt;newLineCharacter&lt;/code&gt; can be passed in as the second parameter in &lt;code&gt;new nReadlines&lt;/code&gt; but we go with the default.&lt;/p&gt;
&lt;p&gt;Consequently, we define two variables &lt;code&gt;line&lt;/code&gt; and &lt;code&gt;lineNumber&lt;/code&gt;. Line variable will hold the string for each line of the file and the &lt;code&gt;lineNumber&lt;/code&gt; will hold the line number from 1 to the number of lines the file has.&lt;/p&gt;
&lt;p&gt;Subsequently, we loop through the lines while there are lines in the file with &lt;code&gt;broadbankLines.next()&lt;/code&gt; call. As it returns a buffer if a line exists we console log it on the CLI after converting it to an ASCII string. Next, we increment the Line number inside the loop.&lt;/p&gt;
&lt;p&gt;Finally, we print &lt;code&gt;end of file&lt;/code&gt; and like the above examples also print out the approximate memory usage. This code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/5/files&quot;&gt;pull request&lt;/a&gt; for your reference. We can execute the above script with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node n-readlines.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will render the following output towards the end of the script execution:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/04n-readlines.jpg&quot; title=&quot;Read file line by line with Node.js using n-readlines npm module&quot; alt=&quot;Read file line by line with Node.js using n-readlines npm module&quot; /&gt;
&lt;p&gt;As seen above it got the task done in 8.9 seconds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To print all the 798K lines of the 90 MB SQL file, n-readlines consumed only 4.11 MB memory which is amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the following section, we will see how the line reader NPM module can be used to read files line by line with Node.js.&lt;/p&gt;
&lt;h2 id=&quot;line-reader&quot;&gt;Line reader &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#line-reader&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Line reader &lt;a href=&quot;https://www.npmjs.com/package/line-reader&quot;&gt;NPM module&lt;/a&gt; defines itself as “Asynchronous, buffered, line-by-line file/stream reader with support for user-defined line separators.” on its &lt;a href=&quot;https://github.com/nickewing/line-reader&quot;&gt;GitHub&lt;/a&gt; page. In the &lt;a href=&quot;https://github.com/nickewing/line-reader#usage&quot;&gt;usage&lt;/a&gt; section of the page, it also mentions that &lt;code&gt;eachLine&lt;/code&gt; function reads each line of the given file. The &lt;code&gt;last&lt;/code&gt; variable in the callback can be used to determine if the last line of the file has been reached.&lt;/p&gt;
&lt;p&gt;Below is the working example of reading our relatively big 90 MB SQL file with line reader, we installed it with &lt;code&gt;npm i --save line-reader&lt;/code&gt; and then created the following file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lineReader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;line-reader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;lineReader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eachLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;line&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line from file: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Last line printed.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we require the line reader module then call the &lt;code&gt;eachLine&lt;/code&gt; function passing the filename (or file path) as the first parameter. The second parameter is a callback function that has the line and the last variables. Subsequently, we log the line from the file available in the line variable.&lt;/p&gt;
&lt;p&gt;Next up, if we find the last variable to be true which indicates we have reached the end of the file we log the &lt;code&gt;Last line printed&lt;/code&gt; message and also print out the approximate memory used to read the file line by line. This code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/6/files&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;We can run this code by executing:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;node line-reader.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will end with an output that looks like the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/05line-reader.jpg&quot; title=&quot;Read file line by line with Node.js using line-reader npm module&quot; alt=&quot;Read file line by line with Node.js using line-reader npm module&quot; /&gt;
&lt;p&gt;As seen above the script finished in 10.66 seconds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compared to 225 MB memory used in &lt;code&gt;fs.readFileSync&lt;/code&gt;, reading a 90 MB file with line reader took only 5.18 MB of memory which is 45 times lesser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to restart your Node.js script on each change try out &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;Nodemon&lt;/a&gt;. Next up, we will see if there are other options but we surely have covered the top 3 most popular ones.&lt;/p&gt;
&lt;h2 id=&quot;other-options&quot;&gt;Other options &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#other-options&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are other options to read file line by line with Node.js. There is a very popular NPM module called &lt;a href=&quot;https://www.npmjs.com/package/readline&quot;&gt;readline&lt;/a&gt; but due to the name collision with the native Node.js module, it has been renamed to &lt;a href=&quot;https://www.npmjs.com/package/linebyline&quot;&gt;Line By LIne&lt;/a&gt; now. It works very similarly to the native readline module.&lt;/p&gt;
&lt;p&gt;Other less popular but available options are, &lt;a href=&quot;https://www.npmjs.com/package/file-readline&quot;&gt;file readline&lt;/a&gt; and &lt;a href=&quot;https://npmjs.com/package/readlines-ng&quot;&gt;readlines-ng&lt;/a&gt;. Both of them are NPM modules but they were downloaded around 3 times each last week.&lt;/p&gt;
&lt;p&gt;For further processing of file contents, using these &lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/&quot;&gt;JavaScript array functions&lt;/a&gt; would be very helpful. This takes us to a quick comparison of these available options.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison&quot;&gt;Quick comparison &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#quick-comparison&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A quick comparison of these four NPM modules on &lt;a href=&quot;https://www.npmtrends.com/file-readline-vs-line-reader-vs-n-readlines-vs-readlines-ng&quot;&gt;NPM Trends&lt;/a&gt; revealed that N-readlines is the most download one with 56K downloads in the last week. The second one is line-reader with 46K downloads last week but keep in mind that line-reader was last updated 6 years ago. Below is a snapshot of downloads for the past 1 year:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/06npm-trends-compare.jpg&quot; title=&quot;Comparing downloads and other aspects of 4 read file line by line NPM modules on NPM Trends&quot; alt=&quot;Comparing downloads and other aspects of 4 read file line by line NPM modules on NPM Trends&quot; /&gt;
&lt;p&gt;It will be better to choose the popular ones and the one most recently updated is n-readlines which was a year ago.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The downloads for both file readline and readlines ng are around 3 per week compared to 46K and 56K for line reader and n-readlines respectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Make an informed choice for better support if you need it.&lt;/p&gt;
&lt;p&gt;In terms of memory and CPU usage all methods except of the first &lt;code&gt;fs.readfilesync&lt;/code&gt;, all other stream or callback based options consumed under 10 MB or memoery and finished before 10 seconds with 70-94% CPU usage. Read file sync consumed 225 MB of memory for a 90 MB file.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We looked at how to read a file line by line in Node.js. Even though it seems like a trivial problem there are multiple ways to do it in Node.js like most things in JavaScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We also analyzed the memory usage and time it took for each of the 3 methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, we looked at a quick comparison of these and other options available in terms of popularity. I hope it helps you make an informed decision to read a file line by line with Node.js.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The final guide to web scraping with Node.js</title>
		<link href="https://geshan.com.np/blog/2021/09/web-scraping-nodejs/"/>
		<updated>2021-09-18T10:30:35Z</updated>
		<id>https://geshan.com.np/blog/2021/09/web-scraping-nodejs/</id>
		<content type="html">&lt;p&gt;Web scraping is the process of extracting data from a website in an automated way and Node.js can be used for web scraping. Even though other languages and frameworks are more popular for web scraping, Node.js can be utilized well to do the job too. In this post, we will learn how to do web scraping with Node.js for websites that don’t need and need Javascript to load. Let’s get started!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/01nodejs-web-scraping.jpg&quot; title=&quot;Web scraping with Nodejs for webpages that need or do not need JavaScript to render&quot; alt=&quot;Web scraping with Nodejs for webpages that need or do not need JavaScript to render&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-the-dos-and-don&#39;ts&quot;&gt;Web scraping the dos and don’ts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-with-node.js-the-simple-example&quot;&gt;Web scraping with Node.js the simple example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#axios-and-cheerio-for-node.js-web-scraping&quot;&gt;Axios and Cheerio for Node.js web scraping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#node.js-web-scraping-rendering-javascript&quot;&gt;Node.js web scraping rendering JavaScript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#puppeteer-for-web-scraping&quot;&gt;Puppeteer for web scraping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;web-scraping-the-dos-and-don%E2%80%99ts&quot;&gt;Web scraping the dos and don’ts &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-the-dos-and-don%E2%80%99ts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web scraping can be very advantageous to aggregate data from multiple sources or even track what one’s competitor is doing. But, it can have its own &lt;a href=&quot;https://techcrunch.com/2021/06/14/supreme-court-revives-linkedin-bid-to-protect-user-data-from-web-scrapers/&quot;&gt;legal&lt;/a&gt; and technical issues too. A general technical problem being too many requests coming from the same IP in a very short amount of time as the traffic is coming from a machine than a browser or a human.&lt;/p&gt;
&lt;p&gt;Even when scraping a website it is best to &lt;a href=&quot;https://www.promptcloud.com/blog/how-to-read-and-respect-robots-file/&quot;&gt;respect the robots.txt file&lt;/a&gt; and be nice to the maintainers of the website. Don’t be that person who would send 50 requests per second to a website from the same IP address adding unnecessary load to the servers and making the website slow for other users. Next up, we will look at an example of a simple web scraper with Node.js.&lt;/p&gt;
&lt;p&gt;Python’s &lt;a href=&quot;https://scrapy.org/&quot;&gt;Scrapy&lt;/a&gt; framework might be one of the best tools to do web scraping but if you just know Javascript you can build a pretty decent web scraper with Node.js too.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the code, below are some prerequisites&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have Node.js (preferably the latest LTS version) and NPM node running on your machine&lt;/li&gt;
&lt;li&gt;Instaling NPM modules is known to you&lt;/li&gt;
&lt;li&gt;Any prior knowledge or experience of web scraping, CSS selectors, or Xpath will be helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s get started with some code now.&lt;/p&gt;
&lt;h2 id=&quot;web-scraping-with-node.js-the-simple-example&quot;&gt;Web scraping with Node.js the simple example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-with-node.js-the-simple-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Websites and webpages can basically be divided into two broad categories. The first segment doesn’t need JavaScript rendering to show most of the content of the webpage, and the second needs Javascript execution to render any of its content. The first group of websites is much easier to scrape because the HTML rendered is almost the same for a browser that can execute Javascript compared to a bot that cannot execute JavaScript.&lt;/p&gt;
&lt;p&gt;The second set of websites are mainly the Single Page Applications (SPA) that are built with JavaScript framework/libraries like React which need JavaScript execution to show any relevant content. We will see an example later for this class of websites. For now, we will dive into an example that doesn’t need any Javascript execution to get the meaningful contents of the website. For this simple example, we will use Axios and Cheerio to scrape a property listing website called &lt;a href=&quot;http://domain.com/&quot;&gt;Domain.com&lt;/a&gt;,au to check how many rental properties are listed for a given postal code.&lt;/p&gt;
&lt;h3 id=&quot;axios-and-cheerio-for-node.js-web-scraping&quot;&gt;Axios and Cheerio for Node.js web scraping &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#axios-and-cheerio-for-node.js-web-scraping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Prior to writing some code to scrape out information. It is best we analyze some patterns that will make our work easier. There are two main things to consider while scraping content, they are the URL and the structure of the page(s) you want to scrape the information out of. URLs have patten, in our example, if you search for rental properties on Domain the URL with postcode looks like: &lt;code&gt;https://www.domain.com.au/rent/?postcode=2000&amp;amp;excludedeposittaken=1&lt;/code&gt; so 2000 is the postcode part that can be changed to any valid postal code in Australia and it will work.&lt;/p&gt;
&lt;p&gt;Similarly, when we inspect the page and look for the part we need that is the no. of properties in that postcode. It is available in a “strong” tag inside the “h1” tag. It is easy to see in the inspector of your browser of choice, I am using chrome below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/02nodejs-web-scraping-browser.jpg&quot; title=&quot;Using chrome inspect for Node.js web scraping&quot; alt=&quot;Using chrome inspect for Node.js web scraping&quot; /&gt;
&lt;p&gt;Here &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selectors&lt;/a&gt; are your best friend, &lt;a href=&quot;https://devhints.io/xpath&quot;&gt;XPATH&lt;/a&gt; is another powerful option but generally, I prefer CSS selectors. Below is a quick look at the innerText property of ‘h1&amp;gt;strong’ which gives out the text we are after:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/03nodejs-web-scraping-dollor.jpg&quot; title=&quot;CSS selector and inner text for Node.js web scraping&quot; alt=&quot;CSS selector and inner text for Node.js web scraping&quot; /&gt;
&lt;p&gt;Now as we know what to target for in the webpage, below is a quick example of getting the number of properties open for rent in a given postcode of Australia pulled in from &lt;a href=&quot;http://domain.com.au/&quot;&gt;Domain.com.au&lt;/a&gt; rental listing page using Axios and Cheerio:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cheerio &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cheerio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; postCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://www.domain.com.au/rent/?postcode=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;postCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;excludedeposittaken=1&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cheerio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; noOfProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;h1&gt;strong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;noOfProperties&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; are open for rent in &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;postCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; postcode of Australia on Domain&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while fetching rental properties for &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;postCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can install axios and cheerio with &lt;code&gt;npm i --save axios cheerio&lt;/code&gt; to any Node.js project initiated with an &lt;code&gt;npm install -y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the above code, first, we require both &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios&lt;/a&gt; and &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio&lt;/a&gt; and then we create an async &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; (Immediately Invoked Function Expression) as we would like to use await inside it. Given it is immediately invoked we don’t need to explicitly call the function.&lt;/p&gt;
&lt;p&gt;Inside the function, we get the arguments from the command line if any. Then we set the &lt;code&gt;postCode&lt;/code&gt; as the third argument from the command like &lt;code&gt;node axios-cheerio.js 2100&lt;/code&gt;, in the above code, the &lt;code&gt;postCode&lt;/code&gt; will be set to 2100.&lt;/p&gt;
&lt;p&gt;Subsequently, we set the URL to be the domain’s URL for finding rental properties in a given postcode. After that we call the URL to get its HTML using Axios, we do an await to unwrap the promise. Once we have the response, we pass it to cheerio with cheerio load to parse the response body. Consequently, as we have the full HTML we use Cheerio’s easy Jquery like API to parse out the text for the strong HTML tag inside the H1 tag which has a value like &lt;code&gt;217 properties&lt;/code&gt;. Then finally we print the message and add more strings to show output on the console.&lt;/p&gt;
&lt;p&gt;In case of any error, we just log the error message. The script when run with &lt;code&gt;node axios-cheerio.js 2100&lt;/code&gt; gives the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/04axios-cheerio-domain.jpg&quot; title=&quot;Node.js web scraping with Axios and Cheerio for Domain&quot; alt=&quot;Node.js web scraping with Axios and Cheerio for Domain&quot; /&gt;
&lt;p&gt;Great our basic scraper with Axios and Cheerio is working. The above code is available in the &lt;a href=&quot;https://github.com/geshan/nodejs-web-scraping/pull/2&quot;&gt;pull request&lt;/a&gt;. If you want a shortcut method I have created &lt;a href=&quot;https://www.npmjs.com/package/@geshan/axrio&quot;&gt;Axrio&lt;/a&gt; too which is used in the &lt;a href=&quot;https://github.com/geshan/domain-scraper&quot;&gt;Domain scraper&lt;/a&gt; project I wrote up in 2018.&lt;/p&gt;
&lt;p&gt;Axios and Cheerio are just one of the combinations you can use. In place of Axios, you can use other libraries like Got, Superagent, and &lt;a href=&quot;https://blog.logrocket.com/5-ways-to-make-http-requests-in-node-js/&quot;&gt;the likes&lt;/a&gt;. In place of Cheerio, you can also try out &lt;a href=&quot;https://www.npmjs.com/package/jsdom&quot;&gt;JsDOM&lt;/a&gt;. The main point is to get the HTML and parse it to extract out the information we need from the HTML.&lt;/p&gt;
&lt;p&gt;Next up, we will look at how to scrape web pages that require JavaScript to render any meaningful content for our Node.js web scraping tutorial.&lt;/p&gt;
&lt;h2 id=&quot;node.js-web-scraping-rendering-javascript&quot;&gt;Node.js web scraping rendering JavaScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#node.js-web-scraping-rendering-javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Domain was a relatively easy website as it renders the full HTML with server-side rendering. Now if we use Axios and Cheerio to scrape the job titles from Workable’s &lt;a href=&quot;https://jobs.workable.com/&quot;&gt;job listing&lt;/a&gt; page it will find nothing. Because the page renders no jobs until the JavaScript on the page fires up calls the respective API and paints the response from the API.&lt;/p&gt;
&lt;p&gt;These types of Single Page Applications (SPA) will need a real or &lt;a href=&quot;https://en.wikipedia.org/wiki/Headless_browser&quot;&gt;headless browser&lt;/a&gt; to execute the JavaScript on the page and get the HTML to the scraper as if it would work for a browser. Let’s use Puppeteer to scrape the job titles from Workable’s jobs page.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer&lt;/a&gt; is a Node library that provides a high-level API to control Chrome or Chromium. It runs headless (no GUI) by default but can run on full GUI mode too. It can be used for a lot of other things than just rendering JavaScript to assist in scraping. It can be used to generate screenshots or PDFs, fill up forms, use for automated testing, etc. Speaking of testing, there are only two &lt;a href=&quot;https://blog/2016/03/there-are-only-two-types-of-automated-software-tests/&quot;&gt;types of automated tests&lt;/a&gt; fast ones and not fast ones.&lt;/p&gt;
&lt;h3 id=&quot;puppeteer-for-web-scraping&quot;&gt;Puppeteer for web scraping &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#puppeteer-for-web-scraping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To use Puppeteer, we can install it with &lt;code&gt;npm i --save puppeteer&lt;/code&gt;, it will download the recent version of chromium too. If you want to use your own browser you can try &lt;code&gt;puppeteer-core&lt;/code&gt;. For this guide, we will use puppeteer to keep things simple.&lt;/p&gt;
&lt;p&gt;To scrape the job titles on the first page of Workable we will use the following code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; puppeteer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;puppeteer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; puppeteer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; browser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; navigationPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitForNavigation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jobs.workable.com/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setViewport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; width&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1440&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;744&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigationPromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitForSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ul li h3 a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; jobTitles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$$eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ul li h3 a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; titles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Job Titles on first page of Workable are: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;jobTitles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; browser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while fetching workable job titles &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code has been partially generated with the &lt;a href=&quot;https://chrome.google.com/webstore/detail/headless-recorder/djeegiggegleadkkbgopoonhjimgehda?hl=en&quot;&gt;Headless Recorder&lt;/a&gt; Google Chrome Plugin, you can view its code on &lt;a href=&quot;https://github.com/checkly/headless-recorder&quot;&gt;GitHub&lt;/a&gt; too if you are interested.&lt;/p&gt;
&lt;p&gt;The code at first includes puppeteer. Then in the IIFE async function similar to the above example, starts the browser and open a new tab. After that, it goes to &lt;code&gt;https://jobs.workable.com&lt;/code&gt; and sets the viewport. Consequently, it waits for the navigation to and waits for the selector &lt;code&gt;ul li h3 a&lt;/code&gt;. Then it gets all the &lt;code&gt;a&lt;/code&gt; tags in &lt;code&gt;ul li h3&lt;/code&gt;, all 10 of them, and loops through them to get the inner text that holds the job titles. Which is set in the &lt;code&gt;jobTitles&lt;/code&gt; array. After that, it logs all the scraped job titles and then closes the browser. We can also use other &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/&quot;&gt;Node.js logging libraries&lt;/a&gt; in place of console.log.&lt;/p&gt;
&lt;p&gt;This is how it looks when you run it:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/05puppeteer-workable.jpg&quot; title=&quot;Node.js web scraping with Puppeteer on Workable&quot; alt=&quot;Node.js web scraping with Puppeteer on Workable&quot; /&gt;
&lt;p&gt;If the code is run with docker it will need a &lt;a href=&quot;https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#tips&quot;&gt;different way&lt;/a&gt; to start the browser. For the above example, I am running it on a Mac. The above code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-web-scraping/pull/4&quot;&gt;pull request&lt;/a&gt; for your reference. We could have possibly taken the whole HTML rendered after executing the JavaScript and put it into Cheerio to parse it but the above method works too.&lt;/p&gt;
&lt;p&gt;All the working code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-web-scraping&quot;&gt;Github repository&lt;/a&gt; for your reference. We can also use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js with Docker&lt;/a&gt; to make the code run seamlessly in multiple operating systems and environments.&lt;/p&gt;
&lt;p&gt;In addition to scraping just one page, we could get all the links and loop through (or even better promise.all) the pages but at that point, it would be a full-on spider than just web page scraping.&lt;/p&gt;
&lt;p&gt;Another alternative to Puppeteer is &lt;a href=&quot;https://playwright.dev/&quot;&gt;Playwright&lt;/a&gt;. It is similar to puppeteer and has a similar API, the advantage is it supports multiple &lt;a href=&quot;https://playwright.dev/docs/why-playwright#support-for-all-browsers&quot;&gt;browsers&lt;/a&gt; like Firefox and Safari. On top of it, you can also use other languages like &lt;a href=&quot;https://playwright.dev/python/docs/intro/&quot;&gt;Python&lt;/a&gt;, &lt;a href=&quot;https://playwright.dev/java/docs/intro/&quot;&gt;Java&lt;/a&gt; and &lt;a href=&quot;https://playwright.dev/dotnet/docs/intro/&quot;&gt;.Net&lt;/a&gt; not just javascript. The headless recorder plugin can generate a good starting script for both Puppeteer and Playwright so you can get a very good starting point if you are not well versed in writing such automation scripts.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw how to scrape web pages with Node.js for both types of web pages that don’t require JavaScipt to render meaningful HTML and that requires JavaScript. Using your browser’s inspect tool and some URL pattern matching will surely help you scraper web pages much better.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use RabbitMQ and Node.js with Docker and Docker-compose</title>
		<link href="https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/"/>
		<updated>2021-07-29T11:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/</id>
		<content type="html">&lt;p&gt;Using RabbitMQ with Node.js to offload the things to process in the background is very useful. Adding Docker and docker-compose in that mix for local development makes setting up RabbitMQ and node.js a breeze. In this post, we will explore how to set up RabbitMQ and Node.js with docker and docker-compose using a dummy send email example, let&#39;s get rolling!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/01rabbitmq-docker-nodejs.jpg&quot; title=&quot;Step by step tutorial on RabbitMQ with Node.js using Docker and Docker compose&quot; alt=&quot;Step by step tutorial on RabbitMQ with Node.js using Docker and Docker compose&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#why-use-async-processing&quot;&gt;Why use async processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#rabbitmq-quick-introduction&quot;&gt;RabbitMQ quick introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#run-rabbitmq-with-docker-and-docker-compose&quot;&gt;Run RabbitMQ with docker and docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#send-email-example&quot;&gt;Send Email example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#publish-a-message-to-rabbitmq-using-node.js&quot;&gt;Publish a message to RabbitMQ using Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#consume-messages-with-node.js&quot;&gt;Consume messages with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#set-up-docker-and-docker-compose-for-node.js&quot;&gt;Set up Docker and Docker compose for Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#test-rabbitmq-with-nodejs-on-docker-and-docker-compose&quot;&gt;Test RabbitMQ with Node.js on Docker and docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-use-async-processing&quot;&gt;Why use async processing &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#why-use-async-processing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before going deeper into using RabbitQM with Node.js using Docker and Docker compose, let’s discuss why we need async processing first. Imagine this, you run an e-commerce store. As the customer has placed an order, there is a need to send an order confirmation email or SMS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s say if the email service provider has a downtime of 2 minutes should the checkout process be blocked? The answer is no.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, if there are 10 orders in the same second, should the customer wait longer to see the order confirmation screen because the email service provider’s APIs are responding slow? Again a No.&lt;/p&gt;
&lt;p&gt;These are typical examples where async processing or processing things in the background that don’t slow down and/or block the main operation is very useful. In the above example, the critical path is to be able to checkout, the e-commerce website can function without the email being sent but can’t earn if the order is not taken. All of these kinds of operations like sending an email, resizing a picture (which is resource-heavy too) can be set up as async tasks.&lt;/p&gt;
&lt;p&gt;Pushing secondary tasks in the background also provides us with better &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt; and &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/&quot;&gt;software resilience&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For async and/or later processing if tasks are pushed into a queue multiple workers can perform the task making it easy to scale horizontally. Along the same lines, if the task depends on a third party and if that service is down or slow it does not block the primary and critical operation. Which leads to more resilient software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also listen to a &lt;a href=&quot;https://geshan.com.np/blog/2014/08/basic-overview-of-message-queues-rabbit/&quot;&gt;talk&lt;/a&gt; I did in 2014 about RabbitMQ for more explanation on this topic. This takes us to use queues with message brokers for such tasks that can be done in the background.&lt;/p&gt;
&lt;h2 id=&quot;rabbitmq-quick-introduction&quot;&gt;RabbitMQ quick introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#rabbitmq-quick-introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; brands itself as the “most widely deployed and most popular open-source message broker”. It has other open-source and SAAS competitors like Amazon SQS and Google PubSub to name a couple.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In plain English, RabbitMQ is a software written in Erlang based on Advanced Message Queuing Protocol (AMQP), that provides a way to manage messages using exchanges and routing keys to put them in the right queues to be consumed by consumers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Currently, it is under &lt;a href=&quot;https://www.vmware.com/au/company/acquisitions/rabbitmq.html&quot;&gt;VMWare&lt;/a&gt;. To further understand how exchanges, routing keys, and queues work in RabbitMQ please watch the video below:&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/deG25y_r6OY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Next up, we will run RabbitMQ with Docker and docker-compose with its management console. It is good to know that on a production class system, it would be better to use a managed RabbitMQ like &lt;a href=&quot;https://www.cloudamqp.com/&quot;&gt;CloudAMQP&lt;/a&gt; or &lt;a href=&quot;https://aws.amazon.com/amazon-mq/&quot;&gt;Amazon MQ&lt;/a&gt;. For the purpose of this tutorial, we will set up RabbitMQ with docker and docker-compose.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some prerequisites before we delve deeper into commands and code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker and docker-compose should be installed and running on your machine. I am using Docker version 20.10.2 and Docker-compose version 1.27.4 on a Mac.&lt;/li&gt;
&lt;li&gt;Node.js should be installed and running locally or on a docker container. The latest LTS like Node.js 16 is preferred.&lt;/li&gt;
&lt;li&gt;A general understanding of how Node.js and Docker work is expected.&lt;/li&gt;
&lt;li&gt;Knowledge using npm commands is very helpful to follow this tutorial better.&lt;/li&gt;
&lt;li&gt;Some basic knowledge of how message queues work will be helpful but not required.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to jump into the commands and some Node.js code now.&lt;/p&gt;
&lt;h2 id=&quot;run-rabbitmq-with-docker-and-docker-compose&quot;&gt;Run RabbitMQ with docker and docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#run-rabbitmq-with-docker-and-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run RabbitMQ with docker and docker-compose we will first start by creating a folder with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; nodejs-rabbitmq-docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we will create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&quot;3.2&quot;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  rabbitmq:&lt;br /&gt;    image: rabbitmq:3.8-management-alpine&lt;br /&gt;    container_name: &lt;span class=&quot;token string&quot;&gt;&#39;rabbitmq&#39;&lt;/span&gt;&lt;br /&gt;    ports:&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;5673&lt;/span&gt;:5672&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;15673&lt;/span&gt;:15672&lt;br /&gt;    volumes:&lt;br /&gt;        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/&lt;br /&gt;        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq&lt;br /&gt;    networks:&lt;br /&gt;        - rabbitmq_nodejs&lt;br /&gt;networks:&lt;br /&gt;  rabbitmq_nodejs:&lt;br /&gt;    driver: bridge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s quickly see what the docker-compose file is doing. First, we specify a service called &lt;code&gt;rabbitmq&lt;/code&gt; that uses an image from Dockerhub. The image is RabbitMQ 3.8 with management plugin alpine edition. Next, we name the container &lt;code&gt;rabbitmq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, we expose local port 5673 to container port 5672 and local port 15673 to container port 15672 respectively. RabbitMQ runs on port 5672 and the management console web UI runs on port number 15672 of the container, we are mapping it to different local ports just to keep it different.&lt;/p&gt;
&lt;p&gt;Consequently, we map volumes so that our &lt;a href=&quot;https://www.rabbitmq.com/queues.html#durability&quot;&gt;durable queues&lt;/a&gt; and logs are not lost on container restart. Subsequently, we created a bridge network called &lt;code&gt;rabbitmq_nodejs&lt;/code&gt; that we are going to use later when we publish and consume the message with some Node.js code.&lt;/p&gt;
&lt;p&gt;To run the RabbitMQ instance locally with management console enabled, we will run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will give us output similar to the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/02rabbitmq-docker.jpg&quot; title=&quot;Run RabbitMQ with Docker and Docker compose&quot; alt=&quot;Run RabbitMQ with Docker and Docker compose&quot; /&gt;
&lt;p&gt;Please be aware that we are using the default configuration used by the official &lt;a href=&quot;https://hub.docker.com/_/rabbitmq&quot;&gt;RabbitMQ docker image&lt;/a&gt;. This means it will use &lt;code&gt;guest&lt;/code&gt;:&lt;code&gt;guest&lt;/code&gt; for username and password including other default settings. To check if our RabbitMQ is running fine, it is best to hit &lt;code&gt;http://localhost:156763&lt;/code&gt; on the browser of our choice. We should see a long screen like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/03rabbitmq-mgmt-login.jpg&quot; title=&quot;RabbitMQ managemment running locally - login with guest:guest&quot; alt=&quot;RabbitMQ managemment running locally - login with guest:guest&quot; /&gt;
&lt;p&gt;If we provide the username &lt;code&gt;guest&lt;/code&gt; with password &lt;code&gt;guest&lt;/code&gt; and hit login, we will get into a screen like below which is the RabbitMQ management interface.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/04rabbitmq-mgmt-overview.jpg&quot; title=&quot;RabbitMQ managemment overview running locally with docker and docker compose&quot; alt=&quot;RabbitMQ managemment overview running locally with docker and docker compose&quot; /&gt;
&lt;p&gt;As seen in the above video, this is the dashboard that gives us a way to configure RabbitMQ as well as see what&#39;s happening in the queues and the exchanges. We can click around and see there are some exchanges already set up out of the box but there are no queues.&lt;/p&gt;
&lt;p&gt;For your reference, the above docker-compose file can be viewed in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/1&quot;&gt;pull request&lt;/a&gt; too. Next up, we will write a simple publisher that publishes a message to a queue with a &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-direct&quot;&gt;direct exchange&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;send-email-example&quot;&gt;Send Email example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#send-email-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will be using a hypothetical example of sending emails and create a dummy &lt;a href=&quot;https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html&quot;&gt;Work queue&lt;/a&gt; scenario. A work queue is a simple queue where messages can be processed by multiple consumers and the consumers can be scaled up and down depending on the length of the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For instance, if the e-commerce website gets many orders between 7 PM and 9 PM then there may be 10 consumers to process the task to send emails. At wee hours of like 2 AM and 4 AM there might be just 1 consumer because the number of orders is very low at that time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next up, we will look at the Node.js code to publish the message to the RabbitMQ exchange with a routing key. Keep in mind, in a real-life scenario the publishing could be done by an application written in a different language.&lt;/p&gt;
&lt;h2 id=&quot;publish-a-message-to-rabbitmq-using-node.js&quot;&gt;Publish a message to RabbitMQ using Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#publish-a-message-to-rabbitmq-using-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To publish a message we will use the AMQP library from NPM. To set up a Node.js project and install the AMQP library we will run the following commands on the root of our folder which has the docker-compose file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init -y&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i --save amqplib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, there should be After that we will create a file called &lt;code&gt;publisher.js&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqplib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;amqplib&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqpUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AMQP_URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;amqp://localhost:5673&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; amqplib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amqpUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;heartbeat=60&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Publishing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; exchange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user.signed_up&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user.sign_up_email&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; routingKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sign_up_email&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exchange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;direct&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;durable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;durable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bindQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exchange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; routingKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; msg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;email&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user@domail.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;firstname lastname&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exchange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; routingKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Message published&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error in publishing message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Closing channel and connection if available&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Channel and connection closed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Time to recap what the above code is doing. First, we get the &lt;code&gt;amqplib&lt;/code&gt; library and define the &lt;code&gt;amqpUrl&lt;/code&gt; which first tries to get it from the environment variable &lt;code&gt;AMQP_URL&lt;/code&gt; if not found, it defaults to localhost port 5763. Next, we have an Immediately Invoked Function Expression (IIFE) which is async to support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&quot;&gt;await calls&lt;/a&gt;. In this function, we get a connection to the RabbitMQ server and then create a channel for our communication.&lt;/p&gt;
&lt;p&gt;After that, we make sure that the exchange exists and the queue exists too. We also specify that the queue is durable, which means the queue will remain intact if the RabbitMQ server restarts. If they don’t exist they will be created. Subsequently, we bind the exchange and the queue with the routing key. As our example is about emails, we are creating an exchange for user sign-up and a queue for user sign-up emails.&lt;/p&gt;
&lt;p&gt;Consequently, we construct a simple JSON message with id, email, and name and then publish it to the exchange with the routing key. The exchange as seen in the above video takes care of putting the message in the right queue. In case of an error, we print it on the console and we have the “finally” part that executes all the time. It will close the channel and connection and at the end we have the process exit call to kill the publisher process.&lt;/p&gt;
&lt;p&gt;The code for the publisher and related NPM files are available in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/2/files&quot;&gt;pull request&lt;/a&gt;. Next up, we will add the code for the consumer which will process the message.&lt;/p&gt;
&lt;h2 id=&quot;consume-messages-with-node.js&quot;&gt;Consume messages with Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#consume-messages-with-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To consume the published message there can be multiple consumers. If there are multiple consumers, messages will be distributed with a round-robin algorithm. Below is the Node.js code for consuming RabbitMQ messages as consumer.js file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqplib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;amqplib&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqpUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AMQP_URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;amqp://localhost:5673&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Call email API here&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;//call your email service here to send the email&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; amqplib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amqpUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;heartbeat=60&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user.sign_up_email&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SIGINT&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got sigint, closing connection&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;      process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;durable&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing messages&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      &lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      noAck&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      consumerTag&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;email_consumer&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; [*] Waiting for messages. To exit press CTRL+C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the code for this &lt;code&gt;consumer.js&lt;/code&gt; file is doing. First, we are requiring the &lt;code&gt;amqplib&lt;/code&gt; and defining the amqpUrl to connect to the RabbitMQ server. Then we have another IIFE that is async as well. Consequently, we set up a connection and a channel. This time we specify a &lt;a href=&quot;https://www.cloudamqp.com/blog/how-to-optimize-the-rabbitmq-prefetch-count.html&quot;&gt;prefetch&lt;/a&gt; count of 10, which tells how many messages are being pulled in by the consumer at the same time. Subsequently, we specify the queue to which the consumer will listen to which is &lt;code&gt;user.sign_up_email&lt;/code&gt; in this example.&lt;/p&gt;
&lt;p&gt;Next up, we have a listener that listens for any &lt;code&gt;SIGINT&lt;/code&gt;. It is usually the &lt;code&gt;CTRL+C&lt;/code&gt; behing hit on the keyboard or any other way the process is about to be killed. On &lt;code&gt;SIGINT&lt;/code&gt; we do the housekeeping of closing the channel and connection before exiting the process.&lt;/p&gt;
&lt;p&gt;After that, we make sure the queue exists and then start consuming the message when it arrives on the queue. Message processing is just a console.log for now. Reading the tutorial I wrote about &lt;a href=&quot;https://blog.logrocket.com/how-to-send-emails-with-node-js-using-sendgrid/&quot;&gt;sending emails with Node.js and Sendgrid&lt;/a&gt; would be helpful at this point. The other part we do is we &lt;code&gt;ack&lt;/code&gt; the message which tells RabbitMQ that the message was successfully processed.&lt;/p&gt;
&lt;p&gt;Another option is to &lt;a href=&quot;https://www.rabbitmq.com/nack.html&quot;&gt;nack&lt;/a&gt; the message which informs RabbitMQ that the message was not processed successfully and depending on the configuration it can be re-queued or sent to a &lt;a href=&quot;https://www.rabbitmq.com/dlx.html&quot;&gt;dead letter queue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other code is self-explanatory. You can even try our &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js with docker&lt;/a&gt; for an Express JS app. The consumer code is available in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/3/files&quot;&gt;pull request&lt;/a&gt;. Consequently, we will run the Node.js code in a docker container.&lt;/p&gt;
&lt;h2 id=&quot;set-up-docker-and-docker-compose-for-node.js&quot;&gt;Set up Docker and Docker compose for Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#set-up-docker-and-docker-compose-for-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To set up a well-formed docker file that uses &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multistage docker build&lt;/a&gt; utilizing the docker cache to make the &lt;a href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/&quot;&gt;docker build fast&lt;/a&gt;, we will use the following docker file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:16-alpine as base&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package*.json ./&lt;br /&gt;&lt;br /&gt;FROM base as production&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; ci&lt;br /&gt;COPY ./*.js ./&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;consumer.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as dev&lt;br /&gt;RUN apk &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --no-cache &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; -O /bin/wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x /bin/wait-for-it.sh&lt;br /&gt;&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;development&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;COPY ./*.js ./&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;consumer.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are using the latest Node.js LTS 16 with the alpine version as it is smaller than the options at around &lt;a href=&quot;https://hub.docker.com/layers/node/library/node/16-alpine/images/sha256-7f50c56fc6adbc28be74bc416dae55fdf0f835bba87fb7b1ad08c7db807f0cb7?context=explore&quot;&gt;38 MB&lt;/a&gt;. Next, we set the &lt;code&gt;WORKDIR&lt;/code&gt; to &lt;code&gt;/src&lt;/code&gt; and then copy the package.json and package-lock.json file to the “workdir” &lt;code&gt;/src&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consequently, we start defining the “production” stage where we set &lt;code&gt;NODE_ENV&lt;/code&gt; to production and run &lt;code&gt;npm ci&lt;/code&gt; to get all the npm dependencies as defined in the lock file. To make better use of the docker build-cache, only after running the npm ci we copy all the &lt;code&gt;.js&lt;/code&gt; files to the work dir. Then we put the &lt;code&gt;CMD&lt;/code&gt; as “node consumer.js” to run the consumer in production.&lt;/p&gt;
&lt;p&gt;After the production stage, we define the dev stage in the Dockerfile. Here it is different from the production one, we first install bash. After that, we pull in &lt;a href=&quot;https://github.com/vishnubob/wait-for-it&quot;&gt;wait-for-it&lt;/a&gt; bash script because we want to wait for the RabbitMQ server to be running before the consumer tries to connect to it. Subsequently, we make it executable with &lt;code&gt;chmod +x wait-for-it.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we set the &lt;code&gt;NODE_ENV&lt;/code&gt; to be “development” for this stage. Then we run &lt;code&gt;npm install&lt;/code&gt; to get all the npm dependencies, if there were any dev dependencies like jest for testing it would have been pulled in too. Towards the end, we copy all the &lt;code&gt;js&lt;/code&gt; files to &lt;code&gt;/src&lt;/code&gt; and run the consumer.&lt;/p&gt;
&lt;p&gt;After the docker file is put in place, we will make some changes to the docker-compose file to include this docker file. The new docker-compose.yml file should look like the below to incorporate the docker file that runs the consumer:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&quot;3.2&quot;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  rabbitmq:&lt;br /&gt;    image: rabbitmq:3.8-management-alpine&lt;br /&gt;    container_name: &lt;span class=&quot;token string&quot;&gt;&#39;rabbitmq&#39;&lt;/span&gt;&lt;br /&gt;    ports:&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;5673&lt;/span&gt;:5672&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;15673&lt;/span&gt;:15672&lt;br /&gt;    volumes:&lt;br /&gt;        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/&lt;br /&gt;        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq&lt;br /&gt;    networks:&lt;br /&gt;        - rabbitmq_nodejs&lt;br /&gt;  consumer:&lt;br /&gt;    build:&lt;br /&gt;      context: ./&lt;br /&gt;      target: dev&lt;br /&gt;    volumes:&lt;br /&gt;      - .:/src&lt;br /&gt;    depends_on:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&quot;rabbitmq&quot;&lt;/span&gt;&lt;br /&gt;    command: &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; -c &lt;span class=&quot;token string&quot;&gt;&#39;/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 -- node consumer.js&#39;&lt;/span&gt;&lt;br /&gt;    environment:&lt;br /&gt;      NODE_ENV: production&lt;br /&gt;      AMQP_URL: amqp://guest:guest@rabbitmq:5672&lt;br /&gt;    networks:&lt;br /&gt;      - rabbitmq_nodejs&lt;br /&gt;networks:&lt;br /&gt;  rabbitmq_nodejs:&lt;br /&gt;    driver: bridge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main change here is, we define a new service called &lt;code&gt;consumer&lt;/code&gt; which builds the Dockerfile we defined above with target &lt;code&gt;dev&lt;/code&gt;. To keep things simple, we copy all the files from the current folder to &lt;code&gt;/src&lt;/code&gt; which is the work dir on the container with volumes. Next, we define this node.js container &lt;code&gt;depends_on&lt;/code&gt; the &lt;code&gt;rabbitmq&lt;/code&gt; container. This will only define the &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;sequence of start up&lt;/a&gt; of the container but not wait for the dependent container to be running; that is where wait-for-it comes into play. We wait for a maximum of 30 seconds for the RabbitMQ server to be up before the consumer starts.&lt;/p&gt;
&lt;p&gt;Subsequently, we sent some environment variables. The most important being &lt;code&gt;AMQP_URL&lt;/code&gt; which tells the consumer which RabbitMQ server to connect to using the AMQP protocol. It maps to the right host and port as part of the &lt;a href=&quot;https://docs.docker.com/compose/networking/&quot;&gt;docker compose network&lt;/a&gt; with the correct credentials.&lt;/p&gt;
&lt;p&gt;The changes for the docker-compose file and Dockerfile are available in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/4/files&quot;&gt;pull request&lt;/a&gt;. In the following section, we will test that all this setup and code works as intended.&lt;/p&gt;
&lt;h2 id=&quot;test-rabbitmq-with-node.js-on-docker-and-docker-compose&quot;&gt;Test RabbitMQ with Node.js on Docker and docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#test-rabbitmq-with-node.js-on-docker-and-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now it is time to test that all the moving parts work as expected. To do this, we will first run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will build the container for Node.js if it is not there and pull the RabbitMQ container too. It will start both the RabbitMQ docker container with the management plugin and the Node.js container that will run the consumer giving an output that looks like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/05rabbitmq-nodejs-consumer-running.jpg&quot; title=&quot;Node.js consumer running with docker compose&quot; alt=&quot;Node.js consumer running with docker compose&quot; /&gt;
&lt;p&gt;A thing to notice here towards the end is that the consumer started after 23 seconds when the RabbitMQ server was ready:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/06rabbitmq-nodejs-consumer-waiting.jpg&quot; title=&quot;Node.js consumer waiting for RabbitMQ to start with Docker compose&quot; alt=&quot;Node.js consumer waiting for RabbitMQ to start with Docker compose&quot; /&gt;
&lt;p&gt;If we login on to the RabbitMQ management console and see the Queues, we will see the &lt;code&gt;user.sign_up_email&lt;/code&gt; queue and there will be a consumer waiting for messages as below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/07nodejs-consumer-on-rabbitmq-mgmt.jpg&quot; title=&quot;Node.js consumer visible on RabbitMQ mangaement UI&quot; alt=&quot;Node.js consumer visible on RabbitMQ mangaement UI&quot; /&gt;
&lt;p&gt;To test publishing some messages we will run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; consumer /bin/bash -c &lt;span class=&quot;token string&quot;&gt;&#39;for ((i=1;i&amp;lt;=15;i++)); do node publisher.js; done&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command will publish 15 messages to the queue with a bash loop. These messages will be processed by the consumer running in the same container. The consumer logs you can follow by running &lt;code&gt;docker-compose logs -f consumer&lt;/code&gt; will look something like below when the messages are publishing:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/08nodejs-consumer-processing-messages.jpg&quot; title=&quot;Node.js consumer processing messages published by the publisher&quot; alt=&quot;Node.js consumer processing messages published by the publisher&quot; /&gt;
&lt;p&gt;While the messages are procssed by the consumers, the RabbitMQ management console screen for that queue will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/09rabbitmq-messages-consumed.gif&quot; title=&quot;Node.js consumer processing messages visible in RabbitMQ management console&quot; alt=&quot;Node.js consumer processing messages visible in RabbitMQ management console&quot; /&gt;
&lt;p&gt;There was a spike of 15 incoming messages and the green line in the graph shows that all of them were processed and sucessfully acked. Another thing visible on that screen is, there is only 1 consumer on the queue with a prefetch count of 10 as we set in the config.&lt;/p&gt;
&lt;p&gt;We have successfully tested publishing and consuming messages on RabbitMQ with Node.js running on Docker and Docker Compose.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this step-by-step tutorial, we saw how to set up RabbitMQ with Docker and Docker Compose first. Then we added a publisher and consumer code with Node.js. After that, we put the Node.js code in a Docker container and plugged it into the existing docker-compose that already had the RabbitMQ container defined.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a more real-life application, the messages may be produced by a different service potentially written in a different language like PHP or Python. The message can be consumed by another service written in Node.js or GoLang.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As long as the messages are passed on using a standard notation like JSON, they should be easily produced and processed by the respective consumer. I hope this guide was useful to scratch the surface of RabbitMQ with Docker and publishing and consuming RabbitMQ messages with Node.js. Happy async processing!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Tech career advice: 7 resources you must exploit today</title>
		<link href="https://geshan.com.np/blog/2021/07/tech-career-advice/"/>
		<updated>2021-07-10T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/07/tech-career-advice/</id>
		<content type="html">&lt;p&gt;Finding and following great tech career advice can pave the way for your promotion to the next level. In this post, we will discuss 7 amazing pieces of content by equally amazing people that can act as a key to unlock the door to the next level of your career, let’s get started!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/01tech-career-advice.jpg&quot; title=&quot;Tech career advice you should follow now&quot; alt=&quot;Tech career advice you should follow now&quot; /&gt;
&lt;!-- more --&gt;
&lt;p&gt;More than once, I have found myself referring to similar content to people who come to me for tech career advice. The general questions are: I want to advance to the next level, my manager doesn’t push me enough, etc. My general response to these concerns are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No one is more concerned about your promotion than yourself and no one is going to serve a promotion on a plate for you. You will need to work and earn that promotion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So get ready to be directed towards great tech career advice by some awesome people who really know what they are talking about as most of it is coming out of their own experience.&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#must-consume-pieces-of-tech-career-advice&quot;&gt;Must consume pieces of tech career advice&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#staff-engineering-podcast---will-larson&quot;&gt;Staff Engineering podcast - Will Larson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#brag-doc-by-julia-evans&quot;&gt;Brag Doc by Julia Evans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#engineering-levels---charity-majors&quot;&gt;Engineering Levels - Charity Majors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#how-to-achieve-career-growth---damian-schenkelman&quot;&gt;How to achieve career growth - Damian Schenkelman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#being-glue---tanya-reilly&quot;&gt;Being Glue - Tanya Reilly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#manager-voltron---lara-hogan&quot;&gt;Manager Voltron - Lara Hogan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#talk-yourself-up---hbr-idea-cast&quot;&gt;Talk yourself up - HBR idea cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#bonus-resources-with-tech-career-advice&quot;&gt;Bonus resources with tech career advice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;must-consume-pieces-of-tech-career-advice&quot;&gt;Must consume pieces of tech career advice &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#must-consume-pieces-of-tech-career-advice&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some of the amazing content available online on how you can get that coveted promotion. It will be especially helpful if you are a woman in tech, for instance, the glue code post is oriented towards female software engineers.&lt;/p&gt;
&lt;h3 id=&quot;staff-engineering-podcast---will-larson&quot;&gt;Staff Engineering podcast - Will Larson &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#staff-engineering-podcast---will-larson&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In my opinion, Will Larson the current CTO of &lt;a href=&quot;https://www.calm.com/&quot;&gt;calm&lt;/a&gt; is the semi-god in the tech career advice arena. His &lt;a href=&quot;https://lethain.com/&quot;&gt;blog&lt;/a&gt; has lots of amazing pieces on &lt;a href=&quot;https://lethain.com/career-advice/&quot;&gt;career advice&lt;/a&gt;. He has worked at companies like Stripe, Uber, and Digg to name a few. He surely knows how to share his experience about the tech career and advice people of all levels, specifically Seniors and above to climb up to the next milestone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would recommend anything Will writes or says on any podcasts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of my favorite podcast episodes is, where Will was a guest on Career Chats titled &lt;a href=&quot;https://careerchats.transistor.fm/episodes/staff-engineering-ft-will-larson&quot;&gt;Staff Engineering&lt;/a&gt;. The main takeaway from that podcast for me was find a mentor”.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/02will-larson-podcast.jpg&quot; title=&quot;Staff Engineering Podcast featuring Will Larson&quot; alt=&quot;Staff Engineering Podcast featuring Will Larson&quot; /&gt;
&lt;p&gt;He has also written a book called &lt;a href=&quot;https://staffeng.com/book&quot;&gt;StaffEng&lt;/a&gt;, the StaffEng website also has amazing &lt;a href=&quot;https://staffeng.com/stories/&quot;&gt;stories&lt;/a&gt; and &lt;a href=&quot;https://podcast.staffeng.com/&quot;&gt;podcasts&lt;/a&gt; of other Staff plus engineers. The baseline here is, if Will Larson is featured on any &lt;a href=&quot;https://www.listennotes.com/top-episodes/will-larson/&quot;&gt;podcast&lt;/a&gt;,  make sure that you listen to it as it will surely have some great tech career advice you should not miss at any cost.&lt;/p&gt;
&lt;p&gt;Moving on to the next piece that has landed promotions to at least 2 people I shared the post with, it is none other than Brag doc.&lt;/p&gt;
&lt;h3 id=&quot;brag-doc-by-julia-evans&quot;&gt;Brag Doc by Julia Evans &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#brag-doc-by-julia-evans&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Julia Evans also has a great blog. Of course, her &lt;a href=&quot;https://wizardzines.com/&quot;&gt;zines&lt;/a&gt; are super amazing too. The one on the &lt;a href=&quot;https://wizardzines.com/zines/bite-size-command-line/&quot;&gt;command line&lt;/a&gt; is great. She identifies herself as a &lt;a href=&quot;https://jvns.ca/about/&quot;&gt;software developer&lt;/a&gt; whose earnings come from her business Wizard Zines.&lt;/p&gt;
&lt;p&gt;One of her blog posts that you must absolutely read word by word is &lt;a href=&quot;https://jvns.ca/blog/brag-documents/&quot;&gt;Brag Document&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The premise is simple, you don’t remember everything you did and your manager doesn’t know and/or remember all the things you did.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Document in a brag/achievements doc that will act as a strong case for your &lt;a href=&quot;https://staffeng.com/guides/promo-packets&quot;&gt;promotion packet&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/03julai-evans-brag-doc.jpg&quot; title=&quot;Brag Document by Julia Evans&quot; alt=&quot;Brag Document by Julia Evans&quot; /&gt;
&lt;p&gt;Include your goals, include other things like mentoring, docs, what you learned, and even things outside work. Accentuate your achievements and make it work as a bridge to that coveted promotion or leveling up in some way or form.&lt;/p&gt;
&lt;p&gt;Next up, we will discuss how there should be space where you can move up.&lt;/p&gt;
&lt;h3 id=&quot;engineering-levels---charity-majors&quot;&gt;Engineering Levels - Charity Majors &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#engineering-levels---charity-majors&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Charity Majors is the CEO and co-founder of HoneyComb. She has worked at Facebook and Parse. She is also the co-author of Database Reliability Engineering” by O’Reilly. One of the best posts on her blog about tech career advice is on &lt;a href=&quot;https://charity.wtf/2020/09/14/useful-things-to-know-about-engineering-levels/&quot;&gt;Engineering Levels&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/04charity-majors-engineering-levels.jpg&quot; title=&quot;Engineering Levels by Charity Majors&quot; alt=&quot;Engineering Levels by Charity Majors&quot; /&gt;
&lt;p&gt;The thing I remember most about this amazing post is, “is there oxygen?”, it mentions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, is there oxygen at the next level? Does the company need more of the type of engineer you want to be, vs more of the type of engineer you are now?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It adds even better advice like, “Your relationship with your manager matters. So does your ability to communicate about the work you are doing, its difficulty, its unexpected challenges, and triumphs, etc. This is called “managing up”, and it is an actual skill which I am &lt;em&gt;terrible&lt;/em&gt; at. So are most of you”. To sum up, don’t just scan through this gem of a post, read it line by line. This advice is coming from someone who has seen it all and is CEO of a pretty &lt;a href=&quot;https://www.honeycomb.io/blog/honeycombio-closes-series-b-funding-round/&quot;&gt;successful company&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consequently, we will dig into how to achieve career growth.&lt;/p&gt;
&lt;h3 id=&quot;how-to-achieve-career-growth---damian-schenkelman&quot;&gt;How to achieve career growth - Damian Schenkelman &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#how-to-achieve-career-growth---damian-schenkelman&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://yenkel.dev/pages/about&quot;&gt;Damian Schenkelman&lt;/a&gt; the author of this influential article is a principal engineer at Auth0, before working there he used to work at Microsoft. This particular post about &lt;a href=&quot;https://yenkel.dev/posts/how-to-achieve-career-growth-opportunities-skills-sponsors&quot;&gt;how to achieve career growth&lt;/a&gt; is detailed and very helpful.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/05damian-career-growth.jpg&quot; title=&quot;How to achieve career growth by Damain&quot; alt=&quot;How to achieve career growth by Damain&quot; /&gt;
&lt;p&gt;One thing I clearly remember from this great piece is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The biggest decisions about your career are often made when you’re not in the room&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The way he defines “sponsors”, finding the right ones, and making your skills visible to them is one of the best tech career advice I have read in the past couple of years. Like Charity’s post, he also mentioned available opportunities. He adds: “Available Opportunities are also contextual: they depend on your seniority, team, company’s financial situation, etc.” All in all, you should read this post as well to understand the dynamics between what you want, what your company needs, and how sponsors, including yourself, can bridge that gap to get you promoted.&lt;/p&gt;
&lt;p&gt;Subsequently, we will discuss one of my favorite tech career advice by Tanya - Being Glue.&lt;/p&gt;
&lt;h3 id=&quot;being-glue---tanya-reilly&quot;&gt;Being Glue - Tanya Reilly &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#being-glue---tanya-reilly&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://noidea.dog/about&quot;&gt;Tanya Rielly&lt;/a&gt; is a Principal software engineer at Squarespace working on infrastructure and site reliability. Before Squarespace, she has spent 12 years in Site Reliability Engineering at Google. If people like Tanya give a talk or have some tech career advice, I will be there all ears to soak up the advice. This particular blog post/talk &lt;a href=&quot;https://noidea.dog/glue&quot;&gt;Being Glue&lt;/a&gt; is not really direct tech career advice. It is more like how many companies tend to value “hard engineering skills” and undermine all the other technical and human skills involved in software engineering.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/06tanya-reilly-being-glue.jpg&quot; title=&quot;Being Glue by Tanya Reilly&quot; alt=&quot;Being Glue by Tanya Reilly&quot; /&gt;
&lt;p&gt;This scenario is very relatable to female software engineers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I shared it with one of the female software engineers I know and she said this is exactly what is happening to me right now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My advice as Tanya says in the talk was, to let things break and then people will value you. Glue work is like glue code in my view, looks like it is just adding that route in the controller but without it, all the amazing code you wrote has no interface to be accessed. Baseline, always value glue work!&lt;/p&gt;
&lt;p&gt;Next up we have a piece geared towards the people who think their manager is not doing enough. Let’s dig into that.&lt;/p&gt;
&lt;h3 id=&quot;manager-voltron---lara-hogan&quot;&gt;Manager Voltron - Lara Hogan &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#manager-voltron---lara-hogan&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://larahogan.me/&quot;&gt;Lara Hogan&lt;/a&gt; brands herself as a coach and trainer for the tech industry, she is also the author of the book &lt;a href=&quot;https://resilient-management.com/&quot;&gt;Resilient management&lt;/a&gt;. She has a blog full of great content, &lt;a href=&quot;https://larahogan.me/blog/manager-voltron/&quot;&gt;manager Voltron&lt;/a&gt; is the one that stands out for me as great tech career advice.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/07lara-hogan-manager-voltron.jpg&quot; title=&quot;Manager Voltron by Lara Hogan&quot; alt=&quot;Manager Voltron by Lara Hogan&quot; /&gt;
&lt;p&gt;In that post, she talks about how you should not rely solely on your manager but have other people who can help you with your career progression. She also mentions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No one person will ever be able to manage you the way you want or need.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And adds:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;there are a plethora of people out there whom you can lean on to find the variety of support you need.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;She also advocates the reader to find a coach and it really helps you. A quick rundown is available in the &lt;a href=&quot;https://larahogan.me/resources/Manager-Voltron-Bingo.pdf&quot;&gt;Manager Voltron worksheet&lt;/a&gt;. Another great general resource I picked up from her in a &lt;a href=&quot;https://www.range.co/blog/lara-hogan-leading-in-pandemic&quot;&gt;podcast&lt;/a&gt; she was a guest in is &lt;a href=&quot;https://docs.google.com/document/d/1qOXEOOYvxiA4LDgmEqK0hCYuJ44nf0Z8UM-j48kK4gw/edit&quot;&gt;Defrag you calendar worksheet&lt;/a&gt;. It is geared towards managers but surely doesn’t say others can’t use it :).&lt;/p&gt;
&lt;p&gt;Next up is a podcast, to talk yourself up from the HBR idea cast.&lt;/p&gt;
&lt;h3 id=&quot;talk-yourself-up---hbr-idea-cast&quot;&gt;Talk yourself up - HBR idea cast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#talk-yourself-up---hbr-idea-cast&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is very little chance that you have not heard of Harvard even though you may have missed Harvard Business Review. Lucky for us, they do a great podcast called the &lt;a href=&quot;https://hbr.org/2018/01/podcast-ideacast&quot;&gt;HBR ideacast&lt;/a&gt;. Amongst the many great episodes Ideacast has, there is surely one, in particular, I can tag as great tech career advice. It is about &lt;a href=&quot;https://hbr.org/podcast/2021/05/296801-2&quot;&gt;how to talk yourself up&lt;/a&gt;, without turning off people.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/08hbr-ideacast-talk-yourself-up.jpg&quot; title=&quot;Talk yourself up by HBR Ideacast&quot; alt=&quot;Talk yourself up by HBR Ideacast&quot; /&gt;
&lt;p&gt;Let’s admit this fact, you will need to self-promote yourself to make yourself visible and accentuate your hard work. This podcast episode gently stems out of the &lt;a href=&quot;https://hbr.org/2021/05/savvy-self-promotion&quot;&gt;Savvy self-promotion&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;In this particular episode, the host Alison Beard interviews Leslie John, an associate professor at Harvard Business School.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They discuss how people at times beat the self-promotion drum too much and go into the humble brags route too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They also discuss sharing when others are sharing. Another great takeaway from this almost 26-minute episode is to promote other people’s work which eventually helps you.&lt;/p&gt;
&lt;p&gt;Next up we have some more resources as a bonus for you.&lt;/p&gt;
&lt;h2 id=&quot;bonus-resources-with-tech-career-advice&quot;&gt;Bonus resources with tech career advice &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#bonus-resources-with-tech-career-advice&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to the above amazing podcasts and blog posts, Learn in Public will be a good thing for your tech career progression. The creator of &lt;a href=&quot;https://www.learninpublic.org/&quot;&gt;Learn In Public&lt;/a&gt; has a book called The Career Coding Handbook. It has &lt;a href=&quot;https://www.learninpublic.org/toc&quot;&gt;3 free chapters&lt;/a&gt; that have amazing tech career advice filled up in them. Of course, if you like what you read I would recommend buying that book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are a junior dev the &lt;a href=&quot;https://www.learninpublic.org/v1-careers-junior-to-senior.pdf&quot;&gt;From junior to senior&lt;/a&gt; free chapter is a gold mine of great information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a couple of amazing weeklies I am subscribed to that feeds into my hunger each week for top-class tech career advice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They are &lt;a href=&quot;https://softwareleadweekly.com/&quot;&gt;Software Lead Weekly&lt;/a&gt; and &lt;a href=&quot;https://levelup.patkua.com/&quot;&gt;Level Up&lt;/a&gt; by Patrick Kua are amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of these are more geared towards Senior level engineers and above. Again, Senior and above is more of a mindset and if you can develop them soon enough that is a good thing. &lt;a href=&quot;https://leaddev.com/&quot;&gt;Lead dev&lt;/a&gt; is also a great resource for stand-out tech career advice.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned above, you are the one in charge of your career progression.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don’t self-invest and stride towards that promotion, other people like your manager have very little skin in the game to be going deeper.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use the above resources to your advantage, soak up all the great tech career advice you can get, and try to level up to achieve your next career milestone.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A mini tech startup (side project) that earned in terms of life-changing first full-time tech jobs, not money</title>
		<link href="https://geshan.com.np/blog/2021/06/life-changing-side-project/"/>
		<updated>2021-06-27T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/06/life-changing-side-project/</id>
		<content type="html">&lt;p&gt;Most often than not, the success of any project (or start-up) is measured in terms of current and potential profits. We often overlook human growth which is even more fulfilling. In this post, I am going to discuss how a side project/mini startup -- &lt;a href=&quot;https://autechjobs.ml/&quot;&gt;AU Tech Jobs&lt;/a&gt; helped at least 6 people, all immigrants, land full-time tech jobs from casual non-tech roles and how it has changed their lives in more positive ways during this looming pandemic.&lt;/p&gt;
&lt;p&gt;&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/life-changing-startup/01autechjobs-app.jpg&quot; title=&quot;AU Tech Jobs - a life-changing startup&quot; alt=&quot;AU Tech Jobs - a life-changing startup&quot; /&gt; &lt;!-- more --&gt;&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#how-au-tech-jobs-started&quot;&gt;How AU Tech Jobs started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#getting-more-hands-in-the-game&quot;&gt;Getting more hands in the game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#that-soft-launch&quot;&gt;That soft launch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#joiners-and-leavers&quot;&gt;Joiners and leavers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#first-success-story&quot;&gt;First success story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#other-success-stories-followed&quot;&gt;Other success stories followed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#not-all-rosy-stories&quot;&gt;Not all rosy stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#timeline&quot;&gt;Timeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-au-tech-jobs-started&quot;&gt;How AU Tech Jobs started &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#how-au-tech-jobs-started&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Towards the end of &lt;a href=&quot;https://twitter.com/geshan/status/1209020866035638272?lang=en&quot;&gt;2019&lt;/a&gt;, I become a &lt;a href=&quot;https://developers.google.com/community/experts/directory/profile/profile-geshan-manandhar&quot;&gt;Google Developer Expert&lt;/a&gt; (GDE) for Google Cloud Platform (GCP) which landed me $500 credit for GCP. I had a &lt;a href=&quot;https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fgeshan.com.np%2F&amp;amp;ref_src=twsrc%5Etfw&amp;amp;region=follow_link&amp;amp;screen_name=nepal_news_en&amp;amp;tw_p=followbutton&quot;&gt;side project&lt;/a&gt; running since 2019 and a fraction of the credit was used for that side project. I had this idea to make a job aggregator, with a simple problem to solve.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The job searcher doesn’t need to go to 50+ websites to look for jobs of their interest, it is aggregated at one place.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The person looking for a job could follow companies, keep a track of jobs applied and do similar tasks. Along the same lines, I had also built a list of companies that provide &lt;a href=&quot;https://github.com/geshan/au-companies-providing-work-visa-sponsorship&quot;&gt;work visa sponsorship&lt;/a&gt; in Australia.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/life-changing-startup/02autechjobs-site.jpg&quot; title=&quot;AU Tech Jobs - a life changing startup&quot; alt=&quot;AU Tech Jobs - a life changing startup&quot; /&gt;
&lt;p&gt;I had jotted down a gist on 2-Jan-2020 with a basic outline of how I wanted to get this Job aggregator to life from an idea in my head. After a couple of months and after tackling some of my own issues, I came back to the project. By then it was the end of April 2020 and the COVID-19 pandemic situation had gradually begun to settle in Sydney.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wanted to do some microservices and I had a bunch of scrapers running in my head already.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I put a couple of them in code and the scraper microservice to pull the jobs from 5 companies. By the end of Apr, I had the scraper pull in jobs on a schedule from 5 companies using ScarpingHub (now &lt;a href=&quot;https://www.zyte.com/&quot;&gt;Zyte&lt;/a&gt;) for free.&lt;/p&gt;
&lt;h2 id=&quot;getting-more-hands-in-the-game&quot;&gt;Getting more hands in the game &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#getting-more-hands-in-the-game&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sooner than later, I realized that building this by myself wasn’t going to be enough. If I wanted to help job seekers, I would need more support. As a result, my search for contributors began. But I thought to myself, What was the point? Why would anyone contribute/write code for free to support an idea some random guy has? This helped me materialize the value this project would bring to the team that contributed to it. So I reached out to freelancers/ job seekers from my network.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The value proposition was an opportunity to be a part of a tech startup, learn from one another and pave their way to a more lucrative full-time tech job. Another advantage was the network of people working on AU Tech Jobs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a matter of months, I had gathered 8-10 amazing people (some I had known previously) who were pumping code to the idea. It had already taken some shape and at this point, there were already 2-3 &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/&quot; title=&quot;Node.js microservices&quot;&gt;Node.js microservices&lt;/a&gt; on &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot; title=&quot;Google Cloud Run&quot;&gt;Google Cloud Run&lt;/a&gt;. I was architecting the solution in the little time I could give to the project and this amazing bunch of people was moving the idea forward.&lt;/p&gt;
&lt;h2 id=&quot;that-soft-launch&quot;&gt;That soft launch &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#that-soft-launch&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On 3-Aug-2020 we did a soft launch and publicized AU Tech Jobs in some of the social media channels.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The response was lukewarm but we were not after the numbers, we were after up-skilling ourselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This project fulfilled many purposes at once. For job seekers, it acted as an opportunity to gain real-time work experience through a project. For others, this meant many things; a means to give back to the tech community, a means to build up new skills or a means to explore new tech opportunities. People who didn’t have full-time tech jobs were after that prized possession and those who had one (not me) were after the next better role they could get using AU Tech Jobs as a bridge.&lt;/p&gt;
&lt;h2 id=&quot;joiners-and-leavers&quot;&gt;Joiners and leavers &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#joiners-and-leavers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like any other idea, start-up, or side project, We also had some joiners and leavers. The leavers were the ones who would bag a full-time tech job during the pandemic. On top of it, they were already battling a visa situation, which made this success even more worthwhile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As it is pretty clear, here in Australia if you don’t have a permanent residency (PR) or Australian citizenship your chance of landing a job is automatically at least halved.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then without money to make ends meet, the motivation to contribute to a project could also dwindle with time.&lt;/p&gt;
&lt;p&gt;Getting a full-time job is an entirely different ball game when you are an immigrant. You land in a new country and city. The culture is very different than what you were used to most of your life. Even your mother tongue is not English. This is why 6+ people getting full-time jobs through AU Tech Jobs in itself is not a small thing.&lt;/p&gt;
&lt;h2 id=&quot;first-success-story&quot;&gt;First success story &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#first-success-story&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our beloved, SB, who had contributed really well to AU Tech Jobs, was the first person to join the team and was living here in Australia. At that time, he was employed with an Aged Care center. He was sharpening his programming and frontend software engineering skills with React like a lion devouring his kill.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Against all odds of visa, not having worked in tech before he bagged a full-time coding job in Brisbane.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In just 3-4 months he really stood out and gave his level best to not only get the tasks for AU Tech Jobs frontend done but also lead the team in his own right.&lt;/p&gt;
&lt;p&gt;It was a happy and sad moment for the team when he moved on. Happy because this was a life-changing moment for him where he said goodbye to odd hours at his old job, needing to be onsite during a pandemic.&lt;/p&gt;
&lt;p&gt;We were sad because his new full-time job meant that he would have to leave our project too. Plus, h and BA were the dynamic duos taking the front end of AU Tech Jobs forward. Looking back I think we were happier than sad :).&lt;/p&gt;
&lt;h2 id=&quot;other-success-stories-followed&quot;&gt;Other success stories followed &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#other-success-stories-followed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The goal for AU Tech Jobs was always clear, we were not sure if we could monetize it. However, we knew it was a valued learning opportunity. . One that the team members could use as a springboard to get that prized full-time tech job.&lt;/p&gt;
&lt;p&gt;That is what AK did and he did it pretty damn well. He had recently finished his bachelor’s here in Sydney and was working as casual staff at woolies. He is a full-stack workhorse, take my word for that. I see my younger self in him. He is skilled, talented, and driven.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Had AU Tech Jobs been well funded, he would be one of the first people we would hire full time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He sharpened up his CV and got an offer for a junior software engineer in December.e started working from mid-Jan this year.&lt;/p&gt;
&lt;p&gt;Another one is RG, he had been struggling to crack that coveted full-time tech job for a while. Working at a supermarket then and doing odd hours like 6 AM to 3 PM he really wanted to bring flexibility in his work hours.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With more than half a dozen job interviews under his belt and lots of meaningful contributions to AU Tech Job’s backend and frontend, I knew it was just a matter of time for him to break that glass ceiling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not to my surprise, he got an offer in Jan-2021 and started working as a Jr. Frontend Software Engineer from mid-Feb this year.&lt;/p&gt;
&lt;p&gt;Then we have AM, she re-found her love of writing with AU Tech Jobs in Sep-2020. Now she is freelancing as a writer and social media person.&lt;/p&gt;
&lt;p&gt;You can read some success stories on this &lt;a href=&quot;https://autechjobs.ml/blog/side-project-helps-to-land-tech-job-in-australia/&quot;&gt;blog post&lt;/a&gt; at AU Tech Jobs’ blog too. I can go on and on with the other 3-5 people who cracked the prized full-time tech job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not only did they increase their income by 1.5x to 2x but also earned the flexibility to work from home during such a harsh pandemic time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They also get to work in something they truly like, not something they do just to make ends meet. I am happy for all of them.&lt;/p&gt;
&lt;h2 id=&quot;not-all-rosy-stories&quot;&gt;Not all rosy stories &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#not-all-rosy-stories&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course, not all people who contribute to AU Tech Jobs landed better full-time tech jobs. A couple of them did land 3-4 interviews but it did not convert to a job offer. However, each journey is individual and depends on individual capacity to learn and grow. Some of them did not pay much heed to the suggestions provided :). Still, I wish success and good luck to all of them.&lt;/p&gt;
&lt;p&gt;The project has surely slowed down in the past months as most contributors have full-time tech jobs now. We have burnt some money at ~$1 a day, thanks to Google Cloud Platform&#39;s clear pricing and that money has also come from my Google Developer Expert credit. We have gained around a user a day for the past 340 ish days, not a great number but relatively good for the 0 marketing dollars spent.&lt;/p&gt;
&lt;h2 id=&quot;timeline&quot;&gt;Timeline &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#timeline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a quick timeline of the people I have mentored to land full-time tech jobs in the past 3 years. These are mostly Nepalese tech students who pursued their bachelor’s or master&#39;s degree here in Australia. So as an estimate, they have spent around25% (6 out of 24 years) of their life in computer-related studies. They have the skills to get lucrative tech jobs but just needed an extra push adjusting to a new tech community. Some of them also had some years of full-time work experience back in Nepal, which would make them an asset for any tech company.&lt;/p&gt;
&lt;p&gt;I am looking forward to contributing through mentorships or tech job searches to whoever may need it. You can get in touch with me via email, find it in this blog somewhere :).&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/life-changing-startup/03timeline.jpg&quot; title=&quot;Timeline of people I have helped land first or second full-time tech job in the past 3 years&quot; alt=&quot;Timeline of people I have helped land first or second full-time tech job in the past 3 years&quot; /&gt;
&lt;p&gt;You can view the interactive &lt;a href=&quot;https://time.graphics/line/480450&quot;&gt;timeline&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;When I am able to assist someone to land a full-time tech job, it gives me a greater sense of fulfillment than if I would have helped them with monetary resources. When I am able to assist someone to land a full-time tech job, it gives me a greater sense of fulfillment than if I would have helped them with monetary resources. I have referred them to lots of positions. I have filled out reference forms or taken calls for being a reference.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If software engineers like us do this small step of helping someone junior with CV help, referral, being a reference, or mentoring a person to find a job it translates to a life-changing experience for them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you can please do it.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have worked as a software engineer for the past 15 years in 4 countries across 3 continents. I think I know some things about how to architect and build scalable and &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/&quot;&gt;resilient software&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I can teach the software engineering best practices and trends to these young people and help them land a full-time tech job probably that is one of the best forms of giving back to the community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is surely life-changing for them and it could even possibly be better than contributing in other ways like code or content. Thanks for reading!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Node.js and Redis cache to speed up HTTP responses</title>
		<link href="https://geshan.com.np/blog/2021/05/nodejs-redis/"/>
		<updated>2021-05-31T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/05/nodejs-redis/</id>
		<content type="html">&lt;p&gt;HTTP responses can be sped up with Node.js and Redis caching. In this post, we will see how we can do this by adding a Redis cache to an existing Node.js API that uses the Postgres database. Lets get cracking!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/01nodejs-redis.jpg&quot; title=&quot;Redis settings on redis labs&quot; alt=&quot;Redis settings on redis labs&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-redis-to-the-node.js-express-quotes-api&quot;&gt;Add Redis to the Node.js Express Quotes API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#adding-the-redis-wrapper&quot;&gt;Adding the Redis wrapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-get-quotes-by-author-route&quot;&gt;Add get quotes by author route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-cache-to-get-quotes-by-author&quot;&gt;Add cache to get quotes by author&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#how-fast-is-the-node.js-redis-cache&quot;&gt;How fast is the Node.js Redis cache?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#some-other-things-to-consider&quot;&gt;Some other things to consider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the demo application and its code, below are some of the things better to know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are aware of how Node.js and Express js works&lt;/li&gt;
&lt;li&gt;You have an understanding of how HTTP generally functions&lt;/li&gt;
&lt;li&gt;A basic understanding of how Redis works and its general commands are expected.&lt;/li&gt;
&lt;li&gt;Having an understanding of Javascript callback, promise and Async await will be really helpful.&lt;/li&gt;
&lt;li&gt;An account on Redis Lab will be required, you can get your &lt;a href=&quot;https://redislabs.com/try-free/&quot;&gt;free account&lt;/a&gt; with a 30 MB Redis.&lt;/li&gt;
&lt;li&gt;You should read the &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js Postgres&lt;/a&gt; tutorial that explains how the quotes API is built&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given the prerequisites are done, let’s go to what we will be building.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will use an existing quotes API application built with &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js and Postgres&lt;/a&gt; database. It has a simple endpoint &lt;code&gt;/quotes&lt;/code&gt; that gets a list of quotes from the database and renders it as JSON. We will add a new endpoing and caching layer where we will cache the JSON on Redis hosted on Redis Labs. It is highly recommended you clone the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;Quotes API&lt;/a&gt; Github repository and start from the master branch to follow along.&lt;/p&gt;
&lt;p&gt;We will be using a free Redis database on &lt;a href=&quot;https://redislabs.com/&quot;&gt;RedisLabs&lt;/a&gt;, please get your $0 Redis up and running following this &lt;a href=&quot;https://docs.redislabs.com/latest/rc/rc-quickstart/&quot;&gt;guide&lt;/a&gt;. From there get the Redis host, port, and password you can use later in this tutorial. For reference, I created a database with the following configuration.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/02redis-lab-settings.jpg&quot; title=&quot;Redis settings on redis labs&quot; alt=&quot;Redis settings on redis labs&quot; /&gt;
&lt;h2 id=&quot;add-redis-to-the-node.js-express-quotes-api&quot;&gt;Add Redis to the Node.js Express Quotes API &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-redis-to-the-node.js-express-quotes-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add Redis to the Node.js Express Quotes API, we will first add the &lt;code&gt;redis&lt;/code&gt; npm library with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save redis&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case it installed the redis npm package version 3.1.2. Next up we will add a very slim Redis wrapper to talk to redis where the credentials will be placed in the &lt;code&gt;config.js&lt;/code&gt; file under the &lt;code&gt;redis&lt;/code&gt; attribute as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt; redis&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    host&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REDIS_HOST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;redis-12753.c253.us-central1-1.gce.cloud.redislabs.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REDIS_PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12753&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REDIS_PASSWORD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have put my credentials as an example, please replace it with your credentials you have got from the Redis Labs free account and database you set up in the previous step.&lt;/p&gt;
&lt;h3 id=&quot;adding-the-redis-wrapper&quot;&gt;Adding the Redis wrapper &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#adding-the-redis-wrapper&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We will add a new file called &lt;code&gt;cache.js&lt;/code&gt; in &lt;code&gt;/services&lt;/code&gt; folder that will fetch the saved data and save the JSON on redis with a Time To Live (TTL) of 60 seconds by default. It will have the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; redis &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;redis&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    host&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; promisify &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;util&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; setAsyncEx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promisify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getAsync &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promisify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveWithTtl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ttlSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setAsyncEx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ttlSeconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jsonString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  saveWithTtl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  get&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick rundown of what the above Redis wrapper is doing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We import the Redis NPM package and the configs&lt;/li&gt;
&lt;li&gt;Then we create a Redis client with the credentials of Redis on Redis Labs.&lt;/li&gt;
&lt;li&gt;As the Redis NPM package does not support promises out of the box we use Promisfy to wrap the promise layer on top of the callbacks.&lt;/li&gt;
&lt;li&gt;We have a saveWithTtl function that saves given data as JSON string to redis using the &lt;code&gt;setex&lt;/code&gt; Redis &lt;a href=&quot;https://redis.io/commands/setex&quot;&gt;command&lt;/a&gt; to save it for the given seconds.&lt;/li&gt;
&lt;li&gt;Similarly we define a get method that gets the value from Redis using the Get command and parses the string as JSON to be ready for the HTTP response.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next up, we will add the Get quotes by the author at  &lt;code&gt;/quotes/author&lt;/code&gt; route.&lt;/p&gt;
&lt;h2 id=&quot;add-get-quotes-by-author-route&quot;&gt;Add get quotes by author route &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-get-quotes-by-author-route&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will add the &lt;code&gt;getByAuthor&lt;/code&gt; method in the &lt;code&gt;/services/quotes.js&lt;/code&gt; file for the search quote by author feature to come to life like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getByAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;search-quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    text&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT id, quote, author FROM quote WHERE author ILIKE $1 OFFSET $2 LIMIT $3&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    values&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;author&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emptyOrRows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A couple of things we should take note of here are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are using a parameterized query with ILIKE for a case insensitive like which means searching for &lt;code&gt;Chris&lt;/code&gt; or &lt;code&gt;chris&lt;/code&gt; or &lt;code&gt;chRIS&lt;/code&gt; would get us the same result.&lt;/li&gt;
&lt;li&gt;We have kept the pagination intact if there are more than 10 quotes for the same author.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This data will be sent to the browser by the &lt;code&gt;/quotes/author/:author&lt;/code&gt; route that we will create next.&lt;/p&gt;
&lt;p&gt;To add the search quotes by author route to the Router we will change the &lt;code&gt;/routes/quotes.js&lt;/code&gt; file to look like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing search by author. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/author/:author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; author &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;please provide author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* POST quotes */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while posting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main change we made here is, we added the search quotes by author functionality. Let’s run a quick test with &lt;a href=&quot;https://geshan.com.np/blog/2020/09/vegeta-load-testing-primer-with-examples/&quot;&gt;vegeta load testing&lt;/a&gt; on the response times with the Postgres database and no-cache from our local environment:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/03nodejs-redis-before-cache.jpg&quot; title=&quot;Node.js API response times before Redis cache&quot; alt=&quot;Node.js API response times before Redis cache&quot; /&gt;
&lt;p&gt;As we can see, for a total of 450 requests at 15 requests per second for 30 seconds, 445 came back with 200 response code and 5 had a 500 error. The error could have been caused by a connection limit exceeded for the database. The minimum response time was 192.96 ms and the maximum was 798.452 ms. Next up we will add the Redis cache to this newly created search by author endpoint.&lt;/p&gt;
&lt;p&gt;The changes done till this point are visible in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/19/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;add-cache-to-get-quotes-by-author&quot;&gt;Add cache to get quotes by author &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-cache-to-get-quotes-by-author&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add a Redis cache for the response JSON, we will change the get &lt;code&gt;/quotes/author/:author&lt;/code&gt; in &lt;code&gt;src/routes/quotes.js&lt;/code&gt; to look like below after requiring the cache service we created in one of the previous steps:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;#on line &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing search. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/author/:author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; author &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;please provide author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cacheKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;quotes_author_&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;author&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;page&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cachedData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got cached data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;saveWithTtl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;We import the cache service we created in the previous step that communicates with the Redis database we have.&lt;/li&gt;
&lt;li&gt;In the get quotes by author method, we first check if the quotes with its author and page number key like &lt;code&gt;quotes_chris_1&lt;/code&gt; is in the cache, if it finds it in the cache it will respond with the cached response.&lt;/li&gt;
&lt;li&gt;If the key’s data is not in the cache it will get the quotes by an author from the quotes service which queries the database and then it will respond back after saving the response to the cache.&lt;/li&gt;
&lt;li&gt;On the consequent call it will find that data in the cache as the cache will be warm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first request will be a bit slow as it will have to fetch the quotes from the Postgres database. The second and subsequent requests will be faster as they will be served from the cache for the next 300 seconds. After the cache expires the first request to fill the cache will be slow but then it will be fast for the next 5 minutes. This cycle will continue.&lt;/p&gt;
&lt;p&gt;The changes for adding cache to the get quotes by author route is accessible in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/compare/search-with-cache?expand=1#diff-7f566e4529db12c9dd599189e409b786f5f5a356aaa73c5c8ade9071d7f9b601R30&quot;&gt;diff&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-fast-is-the-node.js-redis-cache%3F&quot;&gt;How fast is the Node.js Redis cache? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#how-fast-is-the-node.js-redis-cache%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After we add the cache if we hit the service locally again with 15 requests per second for 30 seconds it gave me the following result:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/04nodejs-redis-after-cache.jpg&quot; title=&quot;Node.js API response times consistent and faster Redis cache&quot; alt=&quot;Node.js API response times consistent and faster after Redis cache&quot; /&gt;
&lt;p&gt;This time the minimum time to respond was 192.445 ms and the maximum response time is 212.652 ms. There were no errors and all the requests came back with a 200.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The maximum response time for the API was almost 4 times faster with Reds cache at 212.652 ms compared to 798.452 ms using the Postgres database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;some-other-things-to-consider&quot;&gt;Some other things to consider &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#some-other-things-to-consider&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the cached version doesn’t look super fast there are some things we should take into account, those are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This is a very simple example with just one table, real-life search and get resources of a REST API are much more complex involving more than one table, joins, and complicated SQL queries. In this case, the cache will be significantly faster.&lt;/li&gt;
&lt;li&gt;Both Postgres and Redis are hosted remotely, not on the same machine as where the tests were run. Postgres is on ElephantSQL and Redis is on RedisLabs. This will add up the network latency to fetch data from both.&lt;/li&gt;
&lt;li&gt;Postgres and Redis both are on the free plan. The resources are limited and shared so this gives us a basic idea of how the cache will help in performance.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As mentioned previously in the &lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/&quot;&gt;Javascript memoization&lt;/a&gt; post, the &lt;code&gt;Cache-Control&lt;/code&gt; HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot;&gt;header&lt;/a&gt; would be one of the easiest and language/framework agnostic way to cache the response at the HTTP level. This example is used to show a practical way to use Redis with Node.js.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen that a Redis cache used on a Node.js application can make the HTTP responses much more consistent in terms of speed. Not only does it make the responses faster, but it also decreases the error rates. Similarly, it will also use lesser resources as the processing is done once, then the processed output is stored on Redis.&lt;/p&gt;
&lt;p&gt;I hope this acts as a good beginning resource for using Redis with Nodejs.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Node.js Express tutorial to build a 1 page website step-by-step</title>
		<link href="https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/"/>
		<updated>2021-05-19T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/</id>
		<content type="html">&lt;p&gt;Express Js is one of the most popular Node.js frameworks. In this Node.js Express tutorial, we will build a mock landing page that can collect the email addresses of people interested to be notified of the launch of our imaginary podcast about headphones. Let’s get started.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/01nodejs-express-tutorial.jpg&quot; title=&quot;Node.js express tutoral to build a simple 1 page website&quot; alt=&quot;Node.js express tutoral to build a simple 1 page website&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#what-we-are-building&quot;&gt;What we are building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#setup-project&quot;&gt;Setup project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#install-express-and-pug&quot;&gt;Install express and pug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-views&quot;&gt;Add the views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-server-and-routes&quot;&gt;Add the server and routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#tldr-need-a-quick-run&quot;&gt;TLDR; need a quick run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-we-are-building&quot;&gt;What we are building &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#what-we-are-building&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this guide, we are building a simple one-pager landing page for an imaginary podcast about headphones. The website is called “Eventually podcast”. It is going to look something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/02eventually-podcast.jpg&quot; title=&quot;We are building an imaginary podcast wait list with Node.js and Express&quot; alt=&quot;We are building an imaginary podcast wait list with Node.js and Express&quot; /&gt;
&lt;p&gt;We will be converting a very useful and popular responsive HTML template called &lt;a href=&quot;https://html5up.net/eventually&quot;&gt;Eventually&lt;/a&gt; by &lt;a href=&quot;https://html5up.net/&quot;&gt;HTML5UP&lt;/a&gt;. Thanks to the amazing creator &lt;a href=&quot;https://twitter.com/ajlkn&quot;&gt;AJ&lt;/a&gt; for providing such outstanding templates for free.&lt;/p&gt;
&lt;p&gt;We will download the responsive theme which will have HTML, JS, and CSS files and we will transform the HTML file into a rudimentary template for this Node.js Express tutorial using &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt; as the templating engine. To keep the scope of this step-by-step tutorial small, we will not deal with handling the form submission part.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we begin diving into the code, below are some nice to have prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are generally aware of how Node.js and JavaScript works.&lt;/li&gt;
&lt;li&gt;Familiarity with NPM and installing NPM modules, so having npm and Node.js running locally is expected.&lt;/li&gt;
&lt;li&gt;Working with Git is a known concept for you. It will be useful if you want to clone and test out the project.&lt;/li&gt;
&lt;li&gt;Knowledge of basic HTML will also be greatly helpful&lt;/li&gt;
&lt;li&gt;A general understanding of how Pug templating works will be necessary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to get our hands dirty with the code.&lt;/p&gt;
&lt;h2 id=&quot;setup-project&quot;&gt;Setup project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#setup-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To begin, we will create an empty directory named &lt;code&gt;eventually-podcast&lt;/code&gt; and setup NPM in it running the following commands:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; eventually-podcast&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; eventually-podcast&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running &lt;code&gt;npm init -y&lt;/code&gt; it should look like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/03npm-init-y.jpg&quot; title=&quot;Result of npm init -y for Node.js express tutorial&quot; alt=&quot;Result of npm init -y for Node.js express tutorial&quot; /&gt;
&lt;p&gt;Great! We have our package.json in the folder. Next up we will install express js and pug.&lt;/p&gt;
&lt;h2 id=&quot;install-express-and-pug&quot;&gt;Install express and pug &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#install-express-and-pug&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will need &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; as our web application framework on top of Node.js and we will use Pug. To install both Express and pug we will run the command as below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i --save express pug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will add express and pug as dependencies in our &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&quot;add-the-views&quot;&gt;Add the views &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-views&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, we will &lt;a href=&quot;https://html5up.net/eventually/download&quot;&gt;download&lt;/a&gt; the Eventually template from HTML5UP. Then we can extract the zip file. It will have a folder structure and files like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/04assets-structure.jpg&quot; title=&quot;Folder and file structure for the assets in the downloaded Eventually template&quot; alt=&quot;Folder and file structure for the assets in the downloaded Eventually template&quot; /&gt;
&lt;p&gt;We will add 2 folders on the root level of our Express js project &lt;code&gt;views&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt; with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; views&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; public&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will copy the &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt; folder from the &lt;code&gt;html5up-eventually&lt;/code&gt; folder we got after unzipping the theme zip file and copy it into &lt;code&gt;PROJECT_ROOT/public&lt;/code&gt; folder. For my example, I am using headphone images from Pixabay and Unsplash. You can either use what you like or just go with the default provided images.&lt;/p&gt;
&lt;p&gt;If you want you can also add a &lt;code&gt;favicon.ico&lt;/code&gt; file using a &lt;a href=&quot;https://realfavicongenerator.net/&quot;&gt;generator&lt;/a&gt;, I leave it up to you to add or not add a favicon.&lt;/p&gt;
&lt;p&gt;After that, you can delete the &lt;code&gt;saas&lt;/code&gt; folder inside the &lt;code&gt;assets&lt;/code&gt; folder with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf public/assets/sass&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will not be changing any of the CSS so we can safely delete the saas folder for the scope of this tutorial. Consequently, we will add 2 pug empty pug files in the &lt;code&gt;views&lt;/code&gt; folder executing the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; views/layout.pug&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; views/index.pug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this juncture your folder and file structure for the project will look similar to the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/05project-structure.jpg&quot; title=&quot;Folder and file structure of the project with public and views&quot; alt=&quot;Folder and file structure of the project with public and views&quot; /&gt;
&lt;p&gt;Of course, there will be &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; as we have already installed Express and Pug in an earlier step. Subsequently, we will fill up the two Pug view files. I used &lt;a href=&quot;https://html-to-pug.com/&quot;&gt;HTML to Pug&lt;/a&gt; online tool to convert the HTML from the template to be Pug. Our &lt;code&gt;layout.pug&lt;/code&gt; file should look like below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;doctype html
//
  Eventually by HTML5 UP
  html5up.net | @ajlkn
  Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
head
  title Eventually Podcast | #{title} 
  meta(charset=&#39;utf-8&#39;)
  meta(name=&#39;viewport&#39; content=&#39;width=device-width, initial-scale=1, user-scalable=no&#39;)
  link(rel=&#39;stylesheet&#39; href=&#39;/assets/css/main.css&#39;)
body.is-preload
  block body-content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two main things to notice here are, first,  the body is a block content that can be extended and changed as per need. And the second thing is on line 7, &lt;code&gt;#{title}&lt;/code&gt; will be filled up dynamically. Next up, our &lt;code&gt;index.pug&lt;/code&gt; file will have the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extends layout

block body-content
  // Header
  header#header
    h1 #{mainText} 
    p
      | !{subText}
  // Signup Form
  form#signup-form(method=&#39;post&#39; action=&#39;#&#39;)
    input#email(type=&#39;email&#39; name=&#39;email&#39; placeholder=&#39;Email Address&#39;)
    input(type=&#39;submit&#39; value=&#39;Sign Up&#39;)
  // Footer
  footer#footer
    ul.icons
      li
        a.icon.brands.fa-twitter(href=&#39;#&#39;)
          span.label Twitter
      li
        a.icon.brands.fa-instagram(href=&#39;#&#39;)
          span.label Instagram
      li
        a.icon.brands.fa-github(href=&#39;#&#39;)
          span.label GitHub
      li
        a.icon.fa-envelope(href=&#39;#&#39;)
          span.label Email
    ul.copyright
      li &amp;amp;copy; Untitled.
      li
        | Credits: 
        a(href=&#39;http://html5up.net&#39;) HTML5 UP
  // Scripts
  script(src=&#39;/assets/js/main.js&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As &lt;code&gt;index.pug&lt;/code&gt; extends the layout this template will only fill up the body part. Even here there are two variables used &lt;code&gt;#{mainText}&lt;/code&gt; and &lt;code&gt;!{subText}&lt;/code&gt;. The &lt;code&gt;!&lt;/code&gt; in subtext denotes that it is &lt;a href=&quot;https://pugjs.org/language/interpolation.html#string-interpolation-unescaped&quot;&gt;unescaped&lt;/a&gt; but we know this string can be trusted as we are passing it ourselves from the server as we will see it in the next part. Generally, it is not advisable to use this as it can lead to unwanted code injection. In the next section, we will set up the server and the root route to render our templates.&lt;/p&gt;
&lt;h2 id=&quot;add-the-server-and-routes&quot;&gt;Add the server and routes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-server-and-routes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, we have already put the Pug templates in place converting the HTML template into Pug syntax. Now, we will add the server and root route to glue it all together with our &lt;code&gt;index.js&lt;/code&gt; file. The content of our &lt;code&gt;/index.js&lt;/code&gt; file is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3000&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;views&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;views&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;      title&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Coming Soon!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;      mainText&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Eventually Podcast&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;      subText&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Drop your email address below and we will let you know when we launch the Eventually podcast. &lt;br /&gt;      &amp;lt;br&gt;Brought to you by amazing people&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening to requests on http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s evaluate what is happening in the above index.js file:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Till line 5 we are instantiating a new express application which is our web server as well as the web application framework.&lt;/li&gt;
&lt;li&gt;On lines 7-8 we are telling express that we will use &lt;code&gt;pug&lt;/code&gt; as our views engine and views will be available in the &lt;code&gt;views&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;On line 9 we are routing all the static files in the &lt;code&gt;public&lt;/code&gt; folder to be available from the webserver as static files, for instance &lt;code&gt;BASE_URL/assets/css/main.css&lt;/code&gt; will render our main CSS file.&lt;/li&gt;
&lt;li&gt;At lines 11-21, we define our &lt;code&gt;/&lt;/code&gt; route which is a GET route. It renders the &lt;code&gt;index&lt;/code&gt; view passing needed variables like title, mainText, and subText.&lt;/li&gt;
&lt;li&gt;Finally at line 23 we start the express server and it is listening to the port which will be 3000 if not passed as an environment variable called &lt;code&gt;PORT&lt;/code&gt;. If the environment variable is set that will take priority.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;testing&quot;&gt;Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To test the app, we can run &lt;code&gt;node index.js&lt;/code&gt;, to make things easier we can add a npm start script that looks like below in the scripts section of the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run the app with either &lt;code&gt;node index.js&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt;, which would yield and output as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/06npm-start.jpg&quot; loading=&quot;lazy&quot; title=&quot;Output of NPM start, express server listening at port 3000&quot; alt=&quot;Output of NPM start, express server listening at port 3000&quot; /&gt;
&lt;p&gt;After that, we can check how the app looks at &lt;code&gt;http://localhost:3000&lt;/code&gt; on the browser of your choice. It should look something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/07express-pug-running.jpg&quot; loading=&quot;lazy&quot; title=&quot;Output of the basic application running with Node.js Express and Pug&quot; alt=&quot;Output of the basic application running with Node.js Express and Pug&quot; /&gt;
&lt;p&gt;To make local testing easier we can surely add other helpful NPM packages like &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; and &lt;a href=&quot;https://browsersync.io/&quot;&gt;browser sync&lt;/a&gt;. Those are good to have enhancements.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is just scratching the surface. If you want to change how the form submission behavior works you can look into the &lt;a href=&quot;https://github.com/geshan/nodejs-express-tutorial/blob/master/public/assets/js/main.js#L141&quot;&gt;form submission&lt;/a&gt; part in the main.js file and change it to call an internal API or external route. All the code is available as an &lt;a href=&quot;https://github.com/geshan/nodejs-express-tutorial&quot;&gt;open source&lt;/a&gt; repository on Github for your convenience.&lt;/p&gt;
&lt;p&gt;The application has a &lt;a href=&quot;https://github.com/geshan/nodejs-express-tutorial/blob/master/Dockerfile&quot;&gt;docker file&lt;/a&gt; if you want to quickly run it locally or deploy it to something like &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot;&gt;Google Cloud Run&lt;/a&gt;. You can dig more about &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js and Docker&lt;/a&gt; if you want. I have also deployed the application on Qovery for quickly testing how it looks, if you want to deploy it yourself you can choose from any of the 3 &lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/&quot;&gt;free nodejs hosting&lt;/a&gt; services.&lt;/p&gt;
&lt;h2 id=&quot;tldr%3B-need-a-quick-run&quot;&gt;TLDR; need a quick run &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#tldr%3B-need-a-quick-run&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run this app quickly, you can follow these steps given you have Node.js running locally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git clone &lt;a href=&quot;mailto:git@github.com&quot;&gt;git@github.com&lt;/a&gt;:geshan/nodejs-express-tutorial.git&lt;/li&gt;
&lt;li&gt;cd &lt;code&gt;nodejs-express-tutorial&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;npm install&lt;/li&gt;
&lt;li&gt;npm start&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; on your browser to see the output as follows.&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/07express-pug-running.jpg&quot; loading=&quot;lazy&quot; title=&quot;Output of the basic application running with Node.js Express and Pug&quot; alt=&quot;Output of the basic application running with Node.js Express and Pug&quot; /&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We just had a look at a simple but useful single-page website using Node.js Express and Pug to create it. I hope this step-by-step tutorial acts as a good starting point for you to build something interesting using Node.js and Express. Keep building!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>3 Software Engineer podcasts you should not miss - Part 6</title>
		<link href="https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/"/>
		<updated>2021-04-14T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/</id>
		<content type="html">&lt;p&gt;If you are looking to level up without reading, software engineer podcasts can be an untapped avenue you should exploit now. I have been listening to podcasts geared towards software engineers for a long time now.&lt;/p&gt;
&lt;p&gt;Due to no commute in the past 12 months, I found new times and ways to listen to podcasts. Continuing the yearly posts about podcasts, in this post, I am going to recommend 3 software engineer podcasts you should subscribe to instantly.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/01software-engineer-podcasts.jpg&quot; title=&quot;Software Engineer podcasts you should not miss&quot; alt=&quot;Software Engineer podcasts you should not miss&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#staff-eng-podcast&quot;&gt;Staff Eng Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#devdiscuss&quot;&gt;DevDiscuss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#in-depth-podcast&quot;&gt;In Depth Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;staff-eng-podcast&quot;&gt;&lt;a href=&quot;https://podcast.staffeng.com/&quot;&gt;Staff Eng Podcast&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#staff-eng-podcast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Staff Eng has &lt;a href=&quot;https://staffeng.com/stories&quot;&gt;stories&lt;/a&gt; and guides for Staff plus engineers. The stories include engineers from companies like Dropbox, Stripe, Slack, and MailChimp to name a few. The &lt;a href=&quot;https://staffeng.com/book&quot;&gt;Staff Engineer book&lt;/a&gt; by &lt;a href=&quot;https://lethain.com/&quot;&gt;Will Larson&lt;/a&gt; is the main offering there but, recently they have started a podcast. Obviously, it is titled the &lt;a href=&quot;https://podcast.staffeng.com/&quot;&gt;StaffEng podcast&lt;/a&gt; hosted by David and Alex who are Staff plus engineers themselves.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/02staff-eng-podcast.jpg&quot; title=&quot;Staff Eng podcast features inteview with staff plus engineers&quot; alt=&quot;Staff Eng podcast features inteview with staff plus engineers&quot; /&gt;
&lt;p&gt;The podcast started at the end of Mar-2021 and currently has 2 episodes. I have listened to both of them and they are amazing. I really liked the Episode where &lt;a href=&quot;https://podcast.staffeng.com/1687069/8172674-sarah-dayan-algolia&quot;&gt;Sarah Dylan from Algolia&lt;/a&gt; is interviewed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The balance of things and how Staff engineers impact the whole organization is very well explained. She also talks about her career ladder and how leveling up was not easy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The relationship between a staff-level engineer and an engineering manager is explained in a great way. You should listen to both episodes, I am waiting for the next episode to be released.&lt;/p&gt;
&lt;h2 id=&quot;devdiscuss&quot;&gt;&lt;a href=&quot;https://dev.to/devdiscuss&quot;&gt;DevDiscuss&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#devdiscuss&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.to/&quot;&gt;Dev.to&lt;/a&gt; is a very popular developer resource. As a company, it has products like &lt;a href=&quot;https://www.forem.com/&quot;&gt;Forem&lt;/a&gt; and recently acquired &lt;a href=&quot;https://dev.to/devteam/special-announcement-from-dev-4oi&quot;&gt;CodeNewBie&lt;/a&gt;. They also have a podcast named &lt;a href=&quot;https://dev.to/devdiscuss&quot;&gt;DevDiscuss&lt;/a&gt;. From the archive, it looks like the podcast started in early July 2020, but they already have 4 seasons and 30+ episodes. They cover technical topics like &lt;a href=&quot;https://dev.to/devdiscuss/s4-e3-code-splitting-and-the-long-list-of-things-you-need-to-know-about-writing-javascript&quot;&gt;things to know about JavaScript&lt;/a&gt; to non-technical stuff like &lt;a href=&quot;https://dev.to/devdiscuss/s3-e5-improving-your-onboarding-for-early-career-devs&quot;&gt;improving onboarding for early-career devs&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/03dev-discuss-podcast.jpg&quot; title=&quot;Dev Discuss podcasts includes both technical and non-technical content&quot; alt=&quot;Dev Discuss podcasts includes both technical and non-technical content&quot; /&gt;
&lt;p&gt;One episode that stands out for me is the &lt;a href=&quot;https://dev.to/devdiscuss/s4-e1-this-is-how-you-have-effective-meetings&quot;&gt;how to have effective meetings&lt;/a&gt; one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this awesome episode Andy talks about his elaborate experience of meeting and how we can make meetings effective. The meeting agenda template including “WW, DW, BW” - Who will do what by when is simply superb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The agreement tips provided by him are also amazing. Here is a written &lt;a href=&quot;https://dev.to/mauro_codes/5-tips-for-effective-meetings-40dd&quot;&gt;summary&lt;/a&gt; of that podcast if you would like to read it.&lt;/p&gt;
&lt;h2 id=&quot;in-depth-podcast&quot;&gt;&lt;a href=&quot;https://review.firstround.com/podcast&quot;&gt;In Depth Podcast&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#in-depth-podcast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First Round is a seed-stage venture firm focused on building a vibrant community of technology entrepreneurs and companies. They have a blog called &lt;a href=&quot;https://review.firstround.com/&quot;&gt;First Round Review&lt;/a&gt; with surely above-average content. For instance, the post about &lt;a href=&quot;https://review.firstround.com/how-to-spot-and-magnify-the-powers-of-your-engineering-superheroes&quot;&gt;how to spot and magnify powers of engineering superheroes&lt;/a&gt; is extraordinary. The way the blog post goes into the types of software engineers like Aquaman, Spielberg, etc is really commendable.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/04in-depth-podcast.jpg&quot; title=&quot;In Depth Podcast by First Round has stellar team building suggestions very useful for software engineers&quot; alt=&quot;In Depth Podcast by First Round has stellar team building suggestions very useful for software engineers&quot; /&gt;
&lt;p&gt;First Round also has a podcast called &lt;a href=&quot;https://review.firstround.com/podcast&quot;&gt;In Depth&lt;/a&gt;. Its tagline is: “Going deeper on the advice startup leaders need to grow their teams, their companies and themselves.”, they surely live up to the expectations. An episode that stands out for me is the one on &lt;a href=&quot;https://open.spotify.com/episode/2gyQoS33TuRDAQL3PziNK8&quot;&gt;employee engagement&lt;/a&gt; with Russ Laraway. The advice he gives about how to keep employees engaged is incredible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way he emphasizes the skills of the manager and how to measure it is great. The stress he puts on clarity, career, direction, and coaching is praiseworthy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are surely other exceptional episodes in the In Depth podcast.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As usual, I have listed 3 high-quality podcasts in terms of content, production, and the way guests are interviewed by the hosts. Similar to the previous blog posts about software engineer podcasts I have selected two technical podcasts and one non-technical but very useful podcast. I hope you liked it.&lt;/p&gt;
&lt;p&gt;You can go through previous &lt;a href=&quot;https://geshan.com.np/blog/2020/09/software-engineering-podcasts-you-must-subscribe-to/&quot;&gt;software engineering podcast&lt;/a&gt; recommendations &lt;a href=&quot;https://geshan.com.np/blog/2019/07/podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-4/&quot;&gt;too&lt;/a&gt;. Enjoy listening to these amazing podcasts!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How Software Deployment tools have changed in the past 20 years</title>
		<link href="https://geshan.com.np/blog/2021/04/sofware-deployment-tools/"/>
		<updated>2021-04-01T10:45:37Z</updated>
		<id>https://geshan.com.np/blog/2021/04/sofware-deployment-tools/</id>
		<content type="html">&lt;p&gt;I have used a variety of software deployment tools in the last 20 years. From FTP to deploying Docker containers on Kubernetes using a chatbot, I think I have seen the most of it. In this post, I will take you on a journey of web software deployment tools from 2001 to 2021, let’s get started!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/01software-deployment-tools.jpg&quot; title=&quot;Software deployment can sometimes be similar to deploying the army&quot; alt=&quot;Software deployment can sometimes be similar to deploying the army&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#what-are-software-deployment-tools&quot;&gt;What are software deployment tools?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#when-did-my-web-journey-start&quot;&gt;When did my web journey start?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#first-software-deployment-tools---web-interface-and-ftp-in-2000---2008&quot;&gt;First software deployment tools - web interface and FTP in 2000 - 2008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#ssh-git-pull-as-software-deployment-tools-2008-2011&quot;&gt;SSH, Git pull as software deployment tools 2008-2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#hello-capistrano-circa-2012-2015&quot;&gt;Hello Capistrano circa 2012-2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#docker-is-the-way-to-go---2016&quot;&gt;Docker is the way to go - 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#kubernetes-it-is-2016-2021&quot;&gt;Kubernetes it is 2016-2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#quick-recap&quot;&gt;Quick recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#how-to-choose-your-software-deployment-tool&quot;&gt;How to choose your software deployment tool?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-are-software-deployment-tools%3F&quot;&gt;What are software deployment tools? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#what-are-software-deployment-tools%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software deployment tools have also been popularized as deployment automation tools in the last 8-10 years.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Basically, any software that helps you get the first version of your software or the subsequent changes available to the software’s users is a software deployment tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this piece, I will be focused on deployment software that can deploy any form of web software be it website and/or web apps. I will not discuss how desktop software or an operating system like &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_98&quot;&gt;Windows 98&lt;/a&gt; used to be available on a CD.&lt;/p&gt;
&lt;p&gt;Let me try to explain what software deployment tools and what the triggering layers can be. Software deployment tools are the tools that are used to deploy a piece of software (mainly web software). For instance, Capistrano, Fabric, Docker run, Kubectl apply, and the likes. The triggering layers where these tools run are software like Jenkins, Bamboo, Github actions. Let’s get that thing straight. I would like to make the distinction clear visually below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/02software-deployment-tools.jpg&quot; title=&quot;Software deployment tools and triggering tools are different&quot; alt=&quot;Software deployment tools and triggering tools are different&quot; /&gt;
&lt;p&gt;As you can see, we will be discussing the yellow part not the green part of the above diagram. So how did it all begin for me to deploy a website to a free web host, it was not “the cloud” in the early 2000s. I consider &lt;a href=&quot;https://geshan.com.np/blog/2015/10/4-pillars-of-a-solid-software-application-and-tools-to-support-it/#automated-deployment&quot;&gt;automated deployment&lt;/a&gt; a pillar of solid software development.&lt;/p&gt;
&lt;p&gt;Also, I will not be mentioning infrastructure provisioning and infrastructure as code tools like Ansible, Puppet, Salt and Terraform. They belong to another class of tools that are not used for web software deployment automation.&lt;/p&gt;
&lt;h2 id=&quot;when-did-my-web-journey-start%3F&quot;&gt;When did my web journey start? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#when-did-my-web-journey-start%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back in 1999-2000 when people didn’t have an email address, I had websites running on free website hosts. It was the era of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dial-up_Internet_access&quot;&gt;dial up internet&lt;/a&gt; back then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It was the time of the 33.6k and 56k &lt;a href=&quot;https://en.wikipedia.org/wiki/Modem&quot;&gt;modems&lt;/a&gt; that made &lt;a href=&quot;https://www.youtube.com/watch?v=gsNaR6FRuO0&quot;&gt;this&lt;/a&gt; sound to connect to the internet using the phone line. Young people with 5G on mobile these days will never know the value of the internet we had then.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I looked into &lt;a href=&quot;http://archive.org/&quot;&gt;Archive.org&lt;/a&gt; and found a website I had deployed circa 2000. Of course, I am not going to embarrass myself sharing the website but I can tell you it had &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee&quot;&gt;marquee tag&lt;/a&gt;, gifs, a couple of &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_applet&quot;&gt;Java Applets&lt;/a&gt;, and page counters. Below is a screenshot of &lt;a href=&quot;http://archive.org/&quot;&gt;archive.org&lt;/a&gt; for the above-mentioned anonymous website.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/03archive.jpg&quot; title=&quot;Old website deployed with FTP since 2001&quot; alt=&quot;Old website deployed with FTP since 2001&quot; /&gt;
&lt;p&gt;Of course it was a &lt;a href=&quot;https://geshan.com.np/blog/2020/04/static-vs-dynamic-websites-jam-stack/#static-website&quot;&gt;static site&lt;/a&gt; with some HTML, JavaScript and CSS. And it was deployed either from a web interface or the reliable File Transfer Protocol (FTP) client.&lt;/p&gt;
&lt;h2 id=&quot;first-software-deployment-tools---web-interface-and-ftp-in-2000---2008&quot;&gt;First software deployment tools - web interface and FTP in 2000 - 2008 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#first-software-deployment-tools---web-interface-and-ftp-in-2000---2008&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first encounter with a deployment tool was a web interface called file manager. I had a bunch of HTML files with not-so-good CSS and Javascript that worked on our &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentium#Pentium&quot;&gt;Pentium&lt;/a&gt; or II Desktop at that time. Our desktop because that machine was more like a family machine and I was one of its users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyway, like a script kiddie 21 years back I had built this amazing (back then) website and wanted to put it online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My best bet on a 33.6 kbps connection was to upload it with a web interface called &lt;code&gt;File Manager&lt;/code&gt;.  The file manager in those days looked like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/04file-manager.jpg&quot; title=&quot;File manager to upload files from early 2000s&quot; alt=&quot;File manager to upload files from early 2000s&quot; /&gt;
&lt;p&gt;Notice “Internet Explorer” which was the only popular browser back then. After using the file manager for some months I stumbled upon File Transfer Protocol (FTP) software.&lt;/p&gt;
&lt;p&gt;FTP used to be an advanced thing back then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have used Core FTP, Cute FTP, and FileZilla FTP clients between 2000 and 2008. If you ask me if FTP is automated deployment, my answer would be a “No”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As usual, I would play safe and copy almost the whole website again when I had to deploy changes.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/05filezilla-ftp.jpg&quot; title=&quot;Filezilla FTP client was popular in mid 2000s&quot; alt=&quot;Filezilla FTP client was popular in mid 2000s&quot; /&gt;
&lt;p&gt;I clearly remember in my first job as an Intern in 2007 I used fireFTP and Filezilla to copy Drupal files to the server. Even in my second job in 2008, I used SVN and FileZilla to copy PHP files to the server for a web application I was developing then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Probably towards the end of 2008 when I/we had started using Git at &lt;a href=&quot;https://younginnovations.com.np/&quot;&gt;YIPL&lt;/a&gt;. It was a needed change from SVN and Git is still amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I should have Googled and found out something like &lt;a href=&quot;https://github.com/git-ftp/git-ftp&quot;&gt;Git FTP&lt;/a&gt; if it existed then. That takes us to our next phase of software deployment tools.&lt;/p&gt;
&lt;h2 id=&quot;ssh%2C-git-pull-as-software-deployment-tools-2008-2011&quot;&gt;SSH, Git pull as software deployment tools 2008-2011 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#ssh%2C-git-pull-as-software-deployment-tools-2008-2011&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So around Q4 of 2008, I joined the company we co-founded &lt;a href=&quot;https://younginnovations.com.np/&quot;&gt;Young Innovations&lt;/a&gt;. We were super early adopters of Git back then. Remember, Github started in 2008 and was not popular till 2010ish. In 2008-2010 we used &lt;a href=&quot;https://wiki.archlinux.org/index.php/gitosis&quot;&gt;Gitosis&lt;/a&gt; to configure Git access in our team with SSH public keys. So, I clearly know the difference between Git and Github.&lt;/p&gt;
&lt;p&gt;We used to SSH into our servers and our deployment process was more like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH into the production server without password using SSH keys&lt;/li&gt;
&lt;li&gt;Go to the right folder&lt;/li&gt;
&lt;li&gt;Make sure the latest changes are on master, then execute &lt;code&gt;git pull origin master&lt;/code&gt; on the website folder&lt;/li&gt;
&lt;li&gt;As per need restart the server (it used to be Apache as far as I remember, as we mostly did PHP development back then).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This worked pretty well, I would say it worked much better than using FTP as you don’t need to remember which files to copy and the process was mostly Ok unless you faced git conflicts and stuff like that. Looking back I would have written a &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt; script that did it as an atomic task, if anything failed it would stop the deployment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looks like a lot of other developers were doing this git pull thing even in 2018, opening up the .git &lt;a href=&quot;https://www.zdnet.com/article/almost-400k-websites-risk-hacking-data-theft-via-open-git-repos-researcher-warns/&quot;&gt;security hole&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyhow, this was a way we deployed till 2010 but I would not recommend anyone do it now in 2021.&lt;/p&gt;
&lt;h2 id=&quot;hello-capistrano-circa-2012-2015&quot;&gt;Hello Capistrano circa 2012-2015 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#hello-capistrano-circa-2012-2015&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In 2012, I moved to a new country and joined a fashion E-commerce startup in U.A.E -- &lt;a href=&quot;https://en-ae.namshi.com/&quot;&gt;Namshi&lt;/a&gt;. For the first time, I saw a proper automated deployment tool in action. It was not Capistrano, it was a custom-built CLI tool that had steps to select and the git branch or tag can be deployed live. Later we used &lt;a href=&quot;https://capistranorb.com/&quot;&gt;Capistrano&lt;/a&gt; in 2013 for one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot;&gt;Service Oriented Architecture&lt;/a&gt; “SOA” component we built in Symfony2. To be honest, I really liked how we deployed with Capistrano compared to FTP or login to server and run &lt;code&gt;git pull&lt;/code&gt; or even this custom tool. It was a one command deploy, no selections no interruptions, with atomic deployments to any environment staging or production.&lt;/p&gt;
&lt;p&gt;Capistrano is opinionated but it had the &lt;a href=&quot;https://github.com/capistrano/capistrano/blob/master/README.md#features&quot;&gt;features&lt;/a&gt; sorted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The new version was built in a new folder and when it was ready to get traffic the symlink would be pointed to the latest release. After that, the server would be reloaded/restarted. So simple yet so effective.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could deploy git branches or tag and to multiple stages; mainly staging and live. It was a single command on the root of the project, wait for a couple of minutes, and done. The rollbacks were fast, all ACL was managed by SSH Keys.&lt;/p&gt;
&lt;p&gt;Even now if you have 1 to under 10 VMs and want to deploy a web application I would say Capistrano is your best bet. There are other flavors in Ruby and PHP but the basic deployment idea introduced by Capistrano stays the same.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/06capistrano.jpg&quot; title=&quot;Capistrano is still one of the best automated deployment tools if you deploy your software in VMs&quot; alt=&quot;Capistrano is still one of the best automated deployment tools if you deploy your software in VMs&quot; /&gt;
&lt;p&gt;Capistrano is the pioneer in deploying web software safely with minimal or no downtime. Many other software deployment tools have followed Capistrano’ss pursuit like &lt;a href=&quot;https://github.com/mina-deploy/mina&quot;&gt;Mina&lt;/a&gt;, &lt;a href=&quot;https://deployer.org/&quot;&gt;deployer&lt;/a&gt;, etc. Another less opinionated deployment tool is &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt;. It is written in Python. By this time we had written tests for the apps we built, there was a good continuous integration (CI) process in place on Travis. The &lt;a href=&quot;https://geshan.com.np/blog/2017/08/adopt-a-painless-continuous-delivery-culture/&quot;&gt;Continuous Delivery&lt;/a&gt; (CD) part was mainly done with the cap deploy.&lt;/p&gt;
&lt;p&gt;We had happily used Capistrano for 3-4 years and then in 2015 came Docker. It disrupted how people thought about web software development and deployment. I will still say, the best software deployment tool is the one &lt;a href=&quot;https://geshan.com.np/blog/2015/08/the-best-automated-deployment-tool-the-one-that-fits-your-needs/&quot;&gt;that fits your needs&lt;/a&gt;. Around 2015 I wrote a couple of fabric scripts to automate the deployment of CMS like Drupal for YIPL. It was helpful for them too. Then we all stumbled upon &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;docker-is-the-way-to-go---2016&quot;&gt;Docker is the way to go - 2016 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#docker-is-the-way-to-go---2016&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker was a paradigm shift and we were possibly one of the first teams in the MENA region to get our hands dirty with it.&lt;/p&gt;
&lt;p&gt;To keep the concerns clear, Docker is not an automated deployment tool per se. It is a software packaging software that lets you run your software consistently in all environments from dev to production creating a “general” parity. In turn, it makes software deployment a lot easier also because the build and deploy/run process is separated. Learn more about why you should &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;use Docker in development&lt;/a&gt; and how it has &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;changed software engineering&lt;/a&gt; in the past years.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/07docker-kubernetes.jpg&quot; title=&quot;Docker and Kubernetes go hand in hand for a reliable software deployment experience&quot; alt=&quot;Docker and Kubernetes go hand in hand for a reliable software deployment experience&quot; /&gt;
&lt;p&gt;I remember we were running less than 5 apps on Docker in production. I am not aware of the specifics but I suppose we were doing Docker pull and docker run as it was less than 10 containers.&lt;/p&gt;
&lt;p&gt;Bear in mind, adding containers to your workflow does add more layers and complications in the CI/CD process. There will be a need to have a container registry like DockerHub, AWS ECR, or Google Container Registry. A builder will be needed to build images before they can be deployed and run. And after sometime when the number of running containers grow you will need a container orchestrator like Kubernetes.&lt;/p&gt;
&lt;p&gt;In terms of advancing deployment triggers, we had a chatbot on Hipchat/Slack written with Hubot that can run &lt;code&gt;cap deploy&lt;/code&gt; or &lt;code&gt;kubectl apply&lt;/code&gt; or &lt;code&gt;helm install&lt;/code&gt; on an AWS VM for us. This made deployment a much easier task.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/08chatops.jpg&quot; title=&quot;Chatops is a great way to democratize software deployment process&quot; alt=&quot;Chatops is a great way to democratize software deployment process&quot; /&gt;
&lt;p&gt;Later we started using Kubernetes in full swing.&lt;/p&gt;
&lt;h2 id=&quot;kubernetes-it-is-2016-2021&quot;&gt;Kubernetes it is 2016-2021 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#kubernetes-it-is-2016-2021&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As far as I remember 2016 was a turning point. Our senior DevOps engineer did an internal talk to introduce Kubernetes to the tech team. It made little sense than on what was the power of Kubernetes.&lt;/p&gt;
&lt;p&gt;We were on AWS and I believe Kubernetes was managed with &lt;a href=&quot;https://github.com/kubernetes/kops&quot;&gt;Kops&lt;/a&gt; back then, there was no &lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;AWS EKS&lt;/a&gt; and GKE had recently started I think. We were deploying apps with Kubernetes artifacts. Sooner than later we moved to Helm to deploy all our apps. Even the older apps deployed with Capistrano and other legacy tools had been dockerized and deployed with Kubernetes. We were using Minikube on our dev machines too.&lt;/p&gt;
&lt;p&gt;The deployment process was very smooth. Push changes to git, wait for the docker build to pass, and deploy with a chatbot. We had &lt;a href=&quot;https://github.com/namshi/roger&quot;&gt;Roger&lt;/a&gt; our own open-source docker builder and later we were building docker images on Google cloud build and deploying on self-managed Kubernetes with &lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt; and Helm charts using &lt;code&gt;helm install&lt;/code&gt;. Eventually, Namshi did move to &lt;a href=&quot;https://tech.namshi.io/blog/2019/01/15/from-cloud-to-cloud-how-namshi-migrated-a-6yo-aws-infrastructure-to-gcp/&quot;&gt;GCP&lt;/a&gt; in 2019.&lt;/p&gt;
&lt;p&gt;Later when I joined a new company in mid-2018, we were using Kubernetes and going back to &lt;code&gt;kubectl apply&lt;/code&gt; to deploy things. Containers running with Kubernetes and deployed with Kubectl have been what I am used to now since 2018.&lt;/p&gt;
&lt;h2 id=&quot;quick-recap&quot;&gt;Quick recap &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#quick-recap&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So to recap the software deployment tools I have used in the past 20 years are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2001 - 2008 - Web interface and File Transfer Protocol (FTP) clients&lt;/li&gt;
&lt;li&gt;2009 - 2011 - SSH and git pull :)&lt;/li&gt;
&lt;li&gt;2012 - 2015 - Capistrano and a few Fabric scripts&lt;/li&gt;
&lt;li&gt;2016 - 2021 - Kubectl apply with Docker and Kubernetes, some Helm between 2016-2018&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you see the trend, FTP was used for 7 years or more and Kubeclt is inching towards beating it. It is just a matter of time Kubectl will be used the longest as I don’t see it changing any time soon.&lt;/p&gt;
&lt;h2 id=&quot;how-to-choose-your-software-deployment-tool%3F&quot;&gt;How to choose your software deployment tool? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#how-to-choose-your-software-deployment-tool%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well by now I have written enough about how the software deployment tools and automated deployments tools have changed in the last 20 years. If you want to choose a software deployment tool for your team in 2021 below is an oversimplified flow chart that should help you:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/09choose-deployment-tool.jpg&quot; title=&quot;Choose a software deployment tool that fits your current need&quot; alt=&quot;Choose a software deployment tool that fits your current need&quot; /&gt;
&lt;p&gt;You can view a &lt;a href=&quot;https://geshan.com.np/images/software-deployment-tools/09choose-deployment-tool-full.jpg&quot;&gt;larger version&lt;/a&gt; too.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://geshan.com.np/blog/2018/10/deployment-is-not-release/&quot;&gt;Deployment is not a release&lt;/a&gt;, always separate your deployment which is a technical task from release which is a business operation. This is the main point, if you use a full-on feature flag SAAS or just an if-else in code to do this it is up to you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 2021, if your team uses FTP/Capistrano to deploy web software and the business makes thousands of dollars a month your team is a lot better than “modern” teams using Docker containers, Kubernetes, etc and burning thousands of dollars a month.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The goal is to make money and happy customers software and software deployment tools are just means to achieve that goal. Choose what helps you reach business goals, not the latest fad. Happy deploying!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>5 different ways to make HTTP requests with Node.js</title>
		<link href="https://geshan.com.np/blog/2021/03/nodejs-http-request/"/>
		<updated>2021-03-29T10:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/03/nodejs-http-request/</id>
		<content type="html">&lt;p&gt;There are multiple ways to make HTTP requests in Node.js. We can do so using the standard HTTP/HTTPS module, of course, or we could use one of a number of npm packages that make our lives much easier.&lt;/p&gt;
&lt;p&gt;In this post, we are going to see code examples of the native HTTPS module that comes built-in with your Node.js installation as well as npm packages like Axios, Got, SuperAgent, and node-fetch. Let’s get cracking!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-http-requests/01nodejs-http-requests.jpg&quot; title=&quot;5 different ways to make HTTP requests with Node.js&quot; alt=&quot;5 different ways to make HTTP requests with Node.js&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#the-example-we-will-use&quot;&gt;The example we will use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#client-options-for-http-requests-in-nodejs&quot;&gt;Client options for HTTP requests in Node.js&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#standard-nodejs-https-module&quot;&gt;Standard Node.js HTTP(S) module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#axios&quot;&gt;Axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#got&quot;&gt;Got&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#superagent&quot;&gt;SuperAgent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#node-fetch&quot;&gt;node-fetch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#a-quick-comparison-of-node-http-request-methods&quot;&gt;A quick comparison of Node HTTP request methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the description and code, below are some prerequisites you’ll need to get your hands dirty with some Node.js code, which involves calling a remote mock JSON API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should have Node.js running on your machine (&lt;a href=&quot;https://blog.logrocket.com/node-js-docker-improve-dx/&quot;&gt;maybe as a Docker container&lt;/a&gt;). All the examples will be run using Node.js 14.x, the active LTS&lt;/li&gt;
&lt;li&gt;You are familiar with npm commands like &lt;code&gt;npm init&lt;/code&gt;, and you are able to install npm packages with &lt;code&gt;npm install --save &amp;lt;module-name&amp;gt;&lt;/code&gt; to a project&lt;/li&gt;
&lt;li&gt;You can run the JavaScript files with &lt;code&gt;node &amp;lt;filename&amp;gt;&lt;/code&gt; on your command line to see example output&lt;/li&gt;
&lt;li&gt;You are familiar with &lt;a href=&quot;https://blog.logrocket.com/evolution-async-programming-javascript/&quot;&gt;callbacks, promises, and async/await&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basic things, but good to get them checked before proceeding any further :)&lt;/p&gt;
&lt;h2 id=&quot;the-example-we-will-use&quot;&gt;The example we will use &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#the-example-we-will-use&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will make an example GET request with all the HTTP client options by calling data from the &lt;a href=&quot;https://jsonplaceholder.typicode.com/users&quot;&gt;JSONPlaceholder&lt;/a&gt; mock API. It will send us back 10 users’ data. We will print out each user’s name and user ID.&lt;/p&gt;
&lt;p&gt;All the code will be laid out as a separate pull request. You can see all the code examples collected in this open-source repository on &lt;a href=&quot;https://github.com/geshan/nodejs-requests&quot;&gt;GitHub&lt;/a&gt;. The first example is callback-based, the next two are promise-based, and the last two use async/await.&lt;/p&gt;
&lt;h2 id=&quot;client-options-for-http-requests-in-node.js&quot;&gt;Client options for HTTP requests in Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#client-options-for-http-requests-in-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will walk through five options to make the GET HTTP call to the placeholder API. Node.js has built-in modules to perform many HTTP(S)-related actions, one of which is the ability to make HTTP calls. Let’s get started with the native HTTP(S) option that comes baked in with Node.js as our first example.&lt;/p&gt;
&lt;h3 id=&quot;standard-node.js-http(s)-module&quot;&gt;Standard Node.js HTTP(S) module &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#standard-node.js-http(s)-module&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node.js comes with both &lt;a href=&quot;https://nodejs.org/api/http.html&quot;&gt;HTTP&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPS&lt;/a&gt; modules in the standard library. For our example, as it is a HTTPS URL we will use the HTTPS module to perform the GET call. Below is the code example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; https &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;https&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Response ended: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s walk through the code. First, we require the &lt;code&gt;https&lt;/code&gt; standard Node module, which is available with Node.js installation. No need for a &lt;code&gt;package.json&lt;/code&gt; file or any &lt;code&gt;npm install --save&lt;/code&gt; to get this running.&lt;/p&gt;
&lt;p&gt;We then call our JSONPlaceholder URL with the &lt;code&gt;get&lt;/code&gt; method, which has a callback that provides the response we have put in the &lt;code&gt;res&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Next, we initialize &lt;code&gt;data&lt;/code&gt; as an empty array, and after that, we log the status code and date from the respone’s header. Subsequently, whenever we get data, we push the chunk to the data array.&lt;/p&gt;
&lt;p&gt;Then, on the response end, we concat the array data, change it into a string, and parse the JSON to get the list of 10 users as an array of objects. Consequently, we loop through the 10 users and log the ID and name of the user object one at a time.&lt;/p&gt;
&lt;p&gt;One thing to note here: if there is an error on the request, the error message is logged on the console. The above code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/1&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;As HTTPS is a standard Node.js module, there’s been no need for a &lt;code&gt;package.json&lt;/code&gt; — I wish I could say this for some of my Node.js projects.&lt;/p&gt;
&lt;p&gt;You can run the code simply with &lt;code&gt;node native-https.js&lt;/code&gt;, provided you named the file &lt;code&gt;native-https.js&lt;/code&gt;. It should show an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-http-requests/02nodejs-code-output.jpg&quot; title=&quot;Output of running Node.js native http module&quot; alt=&quot;Output of running Node.js native http module&quot; /&gt;
&lt;p&gt;You can use the same method to run all the other examples in this post; they will show a similar output as we print status code, date from response header, and the user ID and name from the response body.&lt;/p&gt;
&lt;p&gt;Next in line for exploration is the Axios npm package — for this, we will need a &lt;code&gt;package.json&lt;/code&gt; file. Time to see how.&lt;/p&gt;
&lt;h3 id=&quot;axios&quot;&gt;Axios &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#axios&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/&quot;&gt;Axios&lt;/a&gt; is a very popular promise-based request library. It is an HTTP client available for both browser and Node.js. It also includes handy features like intercepting request and response data, and the ability to automatically transform request and response data to JSON.&lt;/p&gt;
&lt;p&gt;We can install Axios with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save axios&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can start using it. Let’s look at the example of calling our mock users JSON API with Axios:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, there’s less code here than in the earlier example. It is promise-based as opposed to callback-oriented, so this code can be easily turned into async/await format if you wish.&lt;/p&gt;
&lt;p&gt;Let’s explain what the code example is doing. First, we require the &lt;code&gt;axios&lt;/code&gt; library, then we call the JSONPlaceholder users API with &lt;code&gt;axios.get&lt;/code&gt; (which is promise-based).&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;then&lt;/code&gt; method to get the result when the promise is resolved and get the response object as a &lt;code&gt;res&lt;/code&gt; variable. In the &lt;code&gt;then&lt;/code&gt; method, we log the status code and date from the response header.&lt;/p&gt;
&lt;p&gt;We get the JSON data as an array easily with &lt;code&gt;res.data&lt;/code&gt; thanks to Axios’ auto transformations. Consequently, we loop through the users, logging the ID and the name. In case of any error, we log the error message on the console. The code example is accessible as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/3/files&quot;&gt;pull request&lt;/a&gt;, too.&lt;/p&gt;
&lt;p&gt;Next, we will take a look at another popular and feature-rich library, Got.&lt;/p&gt;
&lt;h3 id=&quot;got&quot;&gt;Got &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#got&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/got&quot;&gt;Got&lt;/a&gt; is another popular HTTP request library for Node.js. It claims to be a “human-friendly and powerful HTTP request library for Node.js.” It also features a promise-based API, and HTTP/2 support and its pagination API are Got’s USPs. Currently, Got is the most popular HTTP client library for Node.js, with over 19 million downloads per week.&lt;/p&gt;
&lt;p&gt;We can install Got with the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save got&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is a quick example of using Got to fetch the users from our mock API:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; got &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;got&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;responseType&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code example is pretty similar to Axios, but with two main differences:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We needed to pass &lt;code&gt;{responseType: &#39;json&#39;}&lt;/code&gt; as the second parameter to indicate that the response was in JSON format.&lt;/li&gt;
&lt;li&gt;The status code header was called &lt;code&gt;statusCode&lt;/code&gt;, not &lt;code&gt;status&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other things remained basically the same as the previous request with Axios. The example can be seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/4/files&quot;&gt;pull request&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Next up, we will have a look at Superagent.&lt;/p&gt;
&lt;h3 id=&quot;superagent&quot;&gt;SuperAgent &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#superagent&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/superagent&quot;&gt;SuperAgent&lt;/a&gt; by VisionMedia is one of the oldest Node.js request packages, released in &lt;a href=&quot;https://github.com/visionmedia/superagent/tags?after=0.6.0&quot;&gt;April 2011&lt;/a&gt;. A robust HTTP library for Node.js, SuperAgent brands itself as a “small, progressive, client-side HTTP request library and Node.js module with the same API, supporting many high-level HTTP client features.” It offers both callback- and promise-based APIs. With a promise-based API, using async/await is just some syntactic sugar on top of it.&lt;/p&gt;
&lt;p&gt;SuperAgent also features an array of &lt;a href=&quot;https://github.com/visionmedia/superagent#plugins&quot;&gt;plugins&lt;/a&gt;, ranging from no-cache to measuring HTTP timings.&lt;/p&gt;
&lt;p&gt;We can install SuperAgent with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save superagent&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at how our example users API call looks with SuperAgent. To provide some variety, we will use async/await for this illustration with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;Immediately Invoked Function Expression (IIFE)&lt;/a&gt; compared to a promise-based example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; superagent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;superagent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; superagent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//can be console.error&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s further examine how we did the request with SuperAgent. We required the &lt;code&gt;superagent&lt;/code&gt; library to make our test HTTP GET call. We started the IIFE with &lt;code&gt;async&lt;/code&gt; because we want to use await, as mentioned in the next point.&lt;/p&gt;
&lt;p&gt;Next, in the &lt;code&gt;try&lt;/code&gt; block, we called &lt;code&gt;superagent.get&lt;/code&gt; with &lt;code&gt;await&lt;/code&gt;, which would resolve the promise and give us the result of the HTTP call to our mock users API. Then, from the &lt;code&gt;res&lt;/code&gt; variable, we picked out the date from &lt;code&gt;res.headers&lt;/code&gt; and logged status and date on the console.&lt;/p&gt;
&lt;p&gt;After that, we set the response’s body in the &lt;code&gt;users&lt;/code&gt; constant and looped through that array of 10 users to print out each user’s name and ID. Consequently, there is a &lt;code&gt;catch&lt;/code&gt; block; if any error occurs anywhere in the &lt;code&gt;try&lt;/code&gt; block, it will be caught, and the error message will be logged to the console.&lt;/p&gt;
&lt;p&gt;SuperAgent is mature and battle-tested, which makes it pretty reliable. We can also test SuperAgent calls with &lt;a href=&quot;https://github.com/visionmedia/supertest&quot;&gt;SuperTest&lt;/a&gt;, which is a very handy library in its own right. Like the examples above, the SuperAgent code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/5/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s look at node-fetch.&lt;/p&gt;
&lt;h3 id=&quot;node-fetch&quot;&gt;node-fetch &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#node-fetch&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/node-fetch&quot;&gt;node-fetch&lt;/a&gt; is another hugely popular HTTP request library for Node.js — in the first week of December 2020, it was downloaded more than 20 million times, as per &lt;a href=&quot;https://www.npmtrends.com/node-fetch&quot;&gt;npm trends&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In their own words, “node-fetch is a lightweight module that brings the Fetch API (&lt;code&gt;window.fetch&lt;/code&gt;) to Node.js.” Its features include consistency with the browser-based &lt;code&gt;window.fetch&lt;/code&gt; and native promise and async functions.&lt;/p&gt;
&lt;p&gt;We can install node-fetch with the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save node-fetch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s have a look at how node-fetch can be used to call our mock users API. This example will also use async/await to keep things simple:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;node-fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//can be console.error&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s review some of the differences here compared to our example of using SuperAgent with async/await:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; did not need an explicit GET method; the HTTP verb can be sent as a &lt;code&gt;method&lt;/code&gt; key in the second parameter, which is an object. For instance: &lt;code&gt;{method: &#39;GET&#39;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Another difference is that the header is an object with a &lt;code&gt;get&lt;/code&gt; method to get header values. We called &lt;code&gt;res.headers.get(&#39;date&#39;)&lt;/code&gt; to get the value of the date response header&lt;/li&gt;
&lt;li&gt;The final difference was the need to unwrap a promise to get the body as JSON with &lt;code&gt;await res.json()&lt;/code&gt;. It seemed like a bit of extra work, but that is how the browser Fetch API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Body/json&quot;&gt;response&lt;/a&gt; works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Same as all the above examples, this code is also accessible as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/6/files&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;Now it’s time to compare the four libraries that we just reviewed.&lt;/p&gt;
&lt;h2 id=&quot;a-quick-comparison-of-node-http-request-methods&quot;&gt;A quick comparison of Node HTTP request methods &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#a-quick-comparison-of-node-http-request-methods&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Except for the HTTP/HTTPS standard Node module, all four other HTTP client libraries for Node.js are available as npm packages. Below is a quick view of their download statistics by week for the past six months, via &lt;a href=&quot;https://www.npmtrends.com/axios-vs-got-vs-superagent-vs-node-fetch&quot;&gt;npm trends&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-http-requests/03npm-trends.jpg&quot; title=&quot;NPM trends of the 4 HTTP related NPM modules&quot; alt=&quot;NPM trends of the 4 HTTP related NPM modules&quot; /&gt;
&lt;p&gt;In terms of weekly downloads, got was the most popular, and SuperAgent was the least popular in the past six months. Let’s scrutinize some other metrics for a better picture of popularity among these contenders thanks to the &lt;a href=&quot;https://github.com/sindresorhus/got#comparison&quot;&gt;comparison table&lt;/a&gt; on the Got GitHub repo:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Axios&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Got&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Superagent&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;node-fetch&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;GitHub stars&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;80.55K
   &lt;/td&gt;
   &lt;td&gt;8.81K
   &lt;/td&gt;
   &lt;td&gt;15.49K
   &lt;/td&gt;
   &lt;td&gt;5.92K
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Install size&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;388kB
   &lt;/td&gt;
   &lt;td&gt;1.32MB
   &lt;/td&gt;
   &lt;td&gt;1.70MB
   &lt;/td&gt;
   &lt;td&gt;155kB
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;npm downloads (per week)&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;18.76M
   &lt;/td&gt;
   &lt;td&gt;22.96M
   &lt;/td&gt;
   &lt;td&gt;4.87M
   &lt;/td&gt;
   &lt;td&gt;20.74M
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;From the above table, node-fetch is the most downloaded package. SuperAgent has the largest install size at 1.70MB, and Axios has the most GitHub stars with 80.55K — more than all three other libraries combined.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used SuperAgent quite extensively some years back; after that, I moved to Axios. With its long feature list, I want to give Got a try in the near future. Even though node-fetch looks promising and has a small install size, I am not sure if the API is user-friendly enough — at least for me.&lt;/p&gt;
&lt;p&gt;You might notice I didn’t mention the &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;Request&lt;/a&gt; npm package. Even though Request is still ultra-popular (22.36 million downloads each week), as of 11 February 2020, it will have been &lt;a href=&quot;https://github.com/request/request#deprecated&quot;&gt;fully deprecated&lt;/a&gt;, so there’s no point in using a deprecated library.&lt;/p&gt;
&lt;p&gt;All these libraries mainly do the same thing — much like which brand of coffee you prefer, in the end, you are still drinking coffee. Choose wisely depending on your use case, and make the right tradeoffs for maximum benefit.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>10 JavaScript array functions you should start using today</title>
		<link href="https://geshan.com.np/blog/2021/03/javascript-array-functions/"/>
		<updated>2021-03-15T10:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/03/javascript-array-functions/</id>
		<content type="html">&lt;p&gt;In JavaScript, we generally use arrays to represent data or manipulate data, so using JavaScript array functions is very helpful. For instance, if we query a database we will most likely get the rows as an array of objects. Where each object represents a row in the database.&lt;/p&gt;
&lt;p&gt;In this post, we will learn about 10 JavaScript array functions that are going to help you easily work with data in the JavaScript arrays. Let’s get started!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-array-functions/01javascript-array-functions.jpg&quot; title=&quot;10 JavaScript array functions you should know about&quot; alt=&quot;10 JavaScript array functions you should start using today&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions&quot;&gt;Javascript array functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#map&quot;&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#filter&quot;&gt;Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#some&quot;&gt;Some&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#every&quot;&gt;Every&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#find&quot;&gt;Find&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#includes&quot;&gt;Includes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#slice&quot;&gt;Slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#join&quot;&gt;Join&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#fill&quot;&gt;FIll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#sort&quot;&gt;Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions-examples&quot;&gt;JavaScript array functions examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we jump into the code, below are some prerequisites to be mindful of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are familiar with the ES6 way of writing JavaScript with the shorthand &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow function&lt;/a&gt; syntax and one-liners.&lt;/li&gt;
&lt;li&gt;You are generally familiar with how JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;arrays&lt;/a&gt; work and how &lt;a href=&quot;https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/&quot;&gt;callbacks&lt;/a&gt; work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Time to get our hands dirty with some example code, scroll a bit more to begin.&lt;/p&gt;
&lt;h2 id=&quot;javascript-array-functions&quot;&gt;Javascript array functions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An array is a high-level, list-like object in JavaScript that can have a sequence of primitive data types like string, int, or even objects. The array functions that we are going to elaborate on later in this post are built-in functions.&lt;/p&gt;
&lt;p&gt;We will use a simple array of objects from the programming-languages API as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; programmingLanguages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Python&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Java&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;TypeScript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2012&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C#&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Time to learn about our first JavaScript array function, find out what Map does.&lt;/p&gt;
&lt;h3 id=&quot;map&quot;&gt;Map &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#map&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In JavaScript, the array map function creates a new array with the results of calling a given function for each element in the source array. Let’s have a look at a simple array with 5 integers, we will use Map to square each number, meaning multiply the number by itself.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; programmingLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;All programming language names pulled in with map function: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;programmingLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code will fill up the &lt;code&gt;programmingLanguageNames&lt;/code&gt; const array with 5 elements having values &lt;code&gt;[&amp;quot;JavaScript&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;TypeScript&amp;quot;, &amp;quot;C#&amp;quot;]&lt;/code&gt;. The JavaScript Map method can also be used to loop through each element of the array in a more functional way than using something like a &lt;code&gt;for&lt;/code&gt; construct.&lt;/p&gt;
&lt;p&gt;Reduce function is generally talked about with Map, I would curb the complexity of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;reduce function&lt;/a&gt; and let you explore it on your own. Step forward to sharpen your functional programming skills.&lt;/p&gt;
&lt;h3 id=&quot;filter&quot;&gt;Filter &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#filter&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The javascript filter function on arrays creates a new array filled up with the elements that pass the test in the provided function. From our example array, we will filter programming languages that release after 1999, we can do it in the following way:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; zenZProgrammingLanguages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;released_year &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Filter out the programming languages release on or after 2000: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; zenZProgrammingLanguages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The filter function in this case will filter out all programming languages released before 2000. This will result in an array that has 2 objects in the array for Typescript and C#. As the name suggests, the filter JavaScript array function can be used to filter any given array based on a condition.&lt;/p&gt;
&lt;h3 id=&quot;some&quot;&gt;Some &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#some&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Some JavaScript function executes the callback function once for each array element until it finds one element where the callback returns true. In our example of programming languages, let&#39;s try to find if there is any programming language that was released in the year 1995. To do this we will use the &lt;code&gt;some&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hasLanguageReleasedin1991 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;released_year &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Do we have any programming language in our list that was released in 1991? The answer is: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;hasLanguageReleasedin1991&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; using &quot;some&#39;&#39; function&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we execute the above code, the const &lt;code&gt;hasLanguageReleasedin1995&lt;/code&gt; will have a value of true. It will be true because in our list &lt;code&gt;Python&lt;/code&gt; was released in 1991 which will pass the released_year of 1995 test and set the variable to true. If we try the test with say release_year is 1997 the variable will be set to false as no programming language in our array of 5 was released in 1997.&lt;/p&gt;
&lt;h3 id=&quot;every&quot;&gt;Every &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#every&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JavaScript Every function checks if all the elements of the given array pass a test provided in the callback function. We will check if all the programming languages in our array are among the top 10 programming languages in &lt;a href=&quot;https://githut.info/&quot;&gt;GitHut&lt;/a&gt;. Let’s see how the code unfolds to test that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allAmongTop10InGitHut &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;githut_rank &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Are all programming languages in our list among top 10 on GitHut? The answer is: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;allAmongTop10InGitHut&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; using &quot;every&quot; function&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The const &lt;code&gt;allAmongTop10InGitHut&lt;/code&gt; will be true as all the programming languages are below rank 10 on Githut in our list of 5 programming languages.&lt;/p&gt;
&lt;h3 id=&quot;find&quot;&gt;Find &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#find&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The JavaScript array &lt;code&gt;find&lt;/code&gt; function returns the value of the first element in the given array which passes a given test in the provided callback function. To use this function, let&#39;s try to find the No.1 popular language in the &lt;a href=&quot;https://pypl.github.io/PYPL.html&quot;&gt;PYPL&lt;/a&gt; popularity of Programming languages index and print its name. I have a feeling it is Python, let&#39;s put that theory to test.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mostPopularLangaugeOnPypl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pypl_rank &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The most popular programming language as per PYPL index is: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;mostPopularLangaugeOnPypl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;For the next set of 5 Javascript array functions, we will use a simple array that has the names of the days in a week.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; days &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Monday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Thursday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Friday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;includes&quot;&gt;Includes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#includes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Javascript array includes function is a search to find if an array contains a given value among its entries. It returns true if the array includes the given value else it returns false. Let’s see if we have “Sunday” in the days of the weeks, expected answer is true:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isSundayADay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isFundayADay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Funday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Is Sunday a day? Answer: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;isSundayADay&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- Is Funday a day? Answer: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;isFundayADay&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like Sunday is a day but unfortunately &lt;code&gt;Funday&lt;/code&gt; is not a day :). On a different note, there can be an alias for &lt;code&gt;includes&lt;/code&gt; called &lt;code&gt;contains&lt;/code&gt; that does the same thing.&lt;/p&gt;
&lt;h3 id=&quot;slice&quot;&gt;Slice &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#slice&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the name says, the slice JavaScript function will cut the JavaScript array and give the slices. It returns a shallow copy of a portion of the array into a new array object selected from the given start to end. Let’s try to get only weekend days as an example below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; weekendDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Generally most countries in the world get a weekend on: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;weekendDays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As seen in the above example, the end is not taken in the slice and the original array (days in this case) is not modified.&lt;/p&gt;
&lt;h3 id=&quot;join&quot;&gt;Join &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#join&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The join function is a very useful array function in JavaScript. It concatenates all the elements in the array as a string separated by commas by default. We can specify a separator string too. In case the array has only one item, it will be returned without the separator. Time to look at how our &lt;code&gt;days&lt;/code&gt; array looks like as a string with a &lt;code&gt;~&lt;/code&gt; separator:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; funkyDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;~&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Days are flowing in: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;funkyDays&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have noticed we have used the &lt;code&gt;join&lt;/code&gt; function in the above examples as well. It is pretty similar to the &lt;a href=&quot;https://www.php.net/manual/en/function.implode.php&quot;&gt;implode&lt;/a&gt; function in PHP. Similar to join there is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&quot;&gt;split&lt;/a&gt; function that converts a string into an array.&lt;/p&gt;
&lt;h3 id=&quot;fill&quot;&gt;FIll &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#fill&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The fill function available on JavaScript arrays changes all the elements in an array to a static value in the given range. If no range is provided it fills up the whole array with the given value. Let&#39;s have a look at how it works:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allSaturdays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;“Saturday”&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It changes the main array as well, so after this operation, the &lt;code&gt;days&lt;/code&gt; array will have 7 elements and all of them will be “Saturday:”. A practical use-case of fill I have seen is in the &lt;a href=&quot;https://github.com/namshi/node-mysql/&quot;&gt;node-mysql wrapper&lt;/a&gt;, where it is used to &lt;a href=&quot;https://github.com/namshi/node-mysql/blob/master/index.js#L76&quot;&gt;fill up&lt;/a&gt; an array with &lt;code&gt;?&lt;/code&gt; for &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html&quot;&gt;parameterized SQL query&lt;/a&gt;. Another example can be if you need the same data to test performance with a big-sized array.&lt;/p&gt;
&lt;h3 id=&quot;sort&quot;&gt;Sort &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#sort&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The sort array function in JavaScript sorts the elements of an array in place and returns a sorted array. It converts the array elements into strings and sorts them in ascending order. Let’s see how the days will be sorted by sort in an ascending fashion:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sortedDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Monday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Thursday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Friday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;sortedDays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Days cannot be sorted but JavaScript sorts them as: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;sortedDays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope my days were so easily sorted, but they are not. Sort can also take a function to do the sorting. Here is a good &lt;a href=&quot;https://javascript.info/array-methods#sort-fn&quot;&gt;example&lt;/a&gt;. The sort function can be nifty for quickly sorting elements in an array using the default function or by providing your own function to do the sorting logic.&lt;/p&gt;
&lt;h2 id=&quot;javascript-array-functions-examples&quot;&gt;JavaScript array functions examples &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions-examples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the above code examples can be found in this neat &lt;a href=&quot;https://gist.github.com/geshan/ecac791ab5ee78e7e680613dd915e520#file-10-js-array-methods-js&quot;&gt;gist&lt;/a&gt; for your reference. If you have node installed locally you can quickly run the code without downloading the file in your machine with the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; https://gist.githubusercontent.com/geshan/ecac791ab5ee78e7e680613dd915e520/raw/9f5628539d6e41c6adb225478fc81e4e49dc7026/10-js-array-methods.js &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; node&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other very useful JavaScript array functions like splice, shift, concat, values, etc. I would really recommend checking &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; before using these functions on the browser. In the case of Node.js, you can check the compatibility on &lt;a href=&quot;https://node.green/#ES2015-built-ins-typed-arrays&quot;&gt;Node.green&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can try the above examples on &lt;a href=&quot;https://jsfiddle.net/geshan/6cx8em0a/&quot;&gt;JsFiddle&lt;/a&gt;, or do a quick check below (their console is in beta right now):&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/geshan/6cx8em0a/1/embed/js,result/dark/&quot;&gt;&lt;/script&gt;
&lt;p&gt;In addition to making your JavaScript code efficient, if you want to make it fast try &lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/&quot;&gt;JavaScript Memoization&lt;/a&gt;. Using &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;Nodemon&lt;/a&gt; for local Node.js development is also highly advisable.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen 10 very useful JavaScript array functions that you can use to filter, check if an array contains an element, sort, and do other handy stuff.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t underestimate the power of arrays, exploit it to make your code simpler to read and maintain with these nifty functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Kubernetes cron jobs: a hands-on guide to optimally configured crons</title>
		<link href="https://geshan.com.np/blog/2021/02/kubernetes-cron-job/"/>
		<updated>2021-02-20T11:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/02/kubernetes-cron-job/</id>
		<content type="html">&lt;p&gt;Kubernetes is super effective on running cron jobs as well as other web application workloads. Kubernetes cron job is a special kind of Kubernetes job that runs on a time-based schedule. In this post, we will focus on how to run optimally configured cron jobs on Kubernetes.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/01kubernetes-cron-job.jpg&quot; title=&quot;Kubernetes cron jobs, lets configure them optimally&quot; alt=&quot;Kubernetes cron jobs, lets configure them optimally&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-is-kubernetes%3F&quot;&gt;What is Kubernetes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-does-kubernetes-do%3F&quot;&gt;What does Kubernetes do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job&quot;&gt;Kubernetes Cron Job&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-a-simple-example&quot;&gt;Kubernetes cron job a simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-an-optimal-example&quot;&gt;Kubernetes cron job an optimal example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#run-kubernetes-cron-jobs-on-the-fly&quot;&gt;Run Kubernetes cron jobs on the fly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-kubernetes%3F&quot;&gt;What is Kubernetes? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-is-kubernetes%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes has multiple definitions, we will first look at a couple of them and then try to simplify them. To start with, the official “what is Kubernetes” page on &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes.io&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It further adds: “The name Kubernetes originates from Greek, meaning helmsman or pilot. Google open-sourced the Kubernetes project in 2014.” There is also a mention of the over 15 years of Google’s experience running production workload at scale.&lt;/p&gt;
&lt;p&gt;Wikipedia page on Kubernetes voices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes (commonly stylized as K8s) is an open-source container orchestration system for automating computer application deployment, scaling, and management.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It adds: It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation. It aims to provide a &amp;quot;platform for automating deployment, scaling, and operations of application containers across clusters of hosts&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;what-does-kubernetes-do%3F&quot;&gt;What does Kubernetes do? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-does-kubernetes-do%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, now let&#39;s simplify stuff. If I say this is the container era for deploying workloads like web applications, cron jobs, and anything in between I won’t be wrong. In container land, Docker has won the race and it is the defacto container tool.&lt;/p&gt;
&lt;p&gt;Now, with that in mind. we might start small with containers and run one or two apps in containers. This means at any given time we would be running 1-10 containers. Some time passes, we like the idea and other advantages containers provide. We want to run a couple of more workloads/apps in containers. This equates to having 10s of containers running and maybe in production.&lt;/p&gt;
&lt;p&gt;More time passes by and more apps are containerized, at this point we have 100s of containers running. Then how do we scale these containers? How do we make service A talk to service B? How do we handle deployments and rollbacks of 10s of applications that have 100s of containers underlined? How do we effectively manage resources (CPU/RAM) and secrets consistently for these 100s of containers?&lt;/p&gt;
&lt;p&gt;The answer to all of the above Hows is a “container orchestrator”. Around 2015 there was a slight competition between Kubernetes, Docker Swarm, and Apache Mesos. By mid-2017, Kubernetes comfortably won the race to become the wildly popular de facto container orchestrator as per &lt;a href=&quot;https://trends.google.com/trends/explore?date=2015-01-01%202021-01-31&amp;amp;q=kubernetes,docker%20swarm,apache%20mesos&quot;&gt;Google Trends&lt;/a&gt; that we can see below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/02kubernetes-cron-job-popularity.jpg&quot; title=&quot;Kubernetes won the container orchestrator race in mid 2017&quot; alt=&quot;Kubernetes won the container orchestrator race in mid 2017&quot; /&gt;
&lt;p&gt;Even though Kubernetes is flexible, powerful, and ultra-popular. There are some things &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/#what-kubernetes-is-not&quot;&gt;Kubernetes is not&lt;/a&gt;, it is better to know about them too. In today’s time, Kubernetes has become a well-established platform with a thriving ecosystem around it.&lt;/p&gt;
&lt;h2 id=&quot;kubernetes-cron-job&quot;&gt;Kubernetes Cron Job &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been part of a team that used Kubernetes in Production in &lt;a href=&quot;https://www.slideshare.net/geshan/embrace-chatops-stop-installing-deployment-software-larcon-eu-2016/54&quot;&gt;2016&lt;/a&gt;. Kubernetes is great at managing long-running workloads like web servers or queue consumers. They roughly translate to &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;Service&lt;/a&gt;, and &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot;&gt;Deployment&lt;/a&gt; artifact in Kubernetes lingo. In addition to being great for long-running workloads, Kubernetes does an amazing job in managing Cron Jobs too.&lt;/p&gt;
&lt;p&gt;If we look at a bit of Kubernetes history, Kubernetes Cron Job was called &lt;code&gt;ScheduledJob&lt;/code&gt;. In &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.5.md#action-required-before-upgrading&quot;&gt;version 1.5&lt;/a&gt; it was renamed to be called Cron Job. In Kubernetes, &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&quot;&gt;Cron Job&lt;/a&gt; is a special kind of a &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/&quot;&gt;Job&lt;/a&gt; that runs on a repeating schedule. The frequency of the Kubernetes Cron Job is written in the familiar &lt;a href=&quot;https://crontab.guru/&quot;&gt;Cron&lt;/a&gt; format. For example &lt;code&gt;0 4 * * *&lt;/code&gt; in the cron format means at 4:00 AM every morning. You can read more about the &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax&quot;&gt;cron schedule syntax&lt;/a&gt; if you want.&lt;/p&gt;
&lt;p&gt;How would you know if a cron job missed one or more of its schedule? It is better to know more about effective &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-efficiently-monitor-crons-with-a-simple-bash-trick/&quot;&gt;cron job monitoring&lt;/a&gt; before it slips unnoticed.&lt;/p&gt;
&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You are generally aware of how Kubernetes works and schedules containers as &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/&quot;&gt;pods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You know that Kubernetes manages objects and config in a &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/object-management/#declarative-object-configuration&quot;&gt;declarative way&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The differences between a service, deployment, and &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;Horizontal Pod Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You generally know what &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress&lt;/a&gt; is used for in Kubernetes.&lt;/li&gt;
&lt;li&gt;You are aware of usual Kubernetes terms like Node, Kubelet, and the likes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, we will look into a simple Kubernetes cron job example.&lt;/p&gt;
&lt;h3 id=&quot;kubernetes-cron-job-a-simple-example&quot;&gt;Kubernetes cron job a simple example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-a-simple-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We will try a simple Kubernetes cron job example on &lt;a href=&quot;https://kind.sigs.k8s.io/docs/user/quick-start/&quot;&gt;Kind&lt;/a&gt;. At the time of writing Kind version 0.9.0 starts a Kubernetes cluster of version 1.19.1. Below is our simple Kubernetes cron file that uses node:14-alipine image to print the current date.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; batch/v1beta1&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CronJob&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*/5 * * * *&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;jobTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IfNotPresent&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;e&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;console.log(new Date().toString());&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; OnFailure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze this simple, not so well configure Cronjob.yaml file in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are using the &lt;code&gt;batch/v1beta1&lt;/code&gt; API version of Kubernetes  API&lt;/li&gt;
&lt;li&gt;This is a type of &lt;code&gt;CronJob&lt;/code&gt; Kubernetes resource/workload&lt;/li&gt;
&lt;li&gt;We have named the cron job &lt;code&gt;print-date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Kubernetes cron job is scheduled to execute every 5 minutes -- &lt;code&gt;*/5 * * * *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We are using the &lt;code&gt;node:14-alpine&lt;/code&gt; image which will be taken from docker hub by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IfNotPresent&lt;/code&gt; image pull policy is the default one. It causes the &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/&quot;&gt;kubelet&lt;/a&gt; to pull an image if it does not already exist.&lt;/li&gt;
&lt;li&gt;Then we pass in &lt;code&gt;-e&lt;/code&gt; for eval&lt;code&gt;and&lt;/code&gt;console.log&lt;code&gt;to print the current date as string. As the command for the node container is&lt;/code&gt;node` this will print the current date and time.&lt;/li&gt;
&lt;li&gt;The container will be restarted on failure as per the above-defined &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy&quot;&gt;restart policy&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we will schedule this cron job on a local &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;kind&lt;/a&gt; Kubernetes cluster to try it out. The kind version I am using at the time of writing this blog post is 0.9.0 which has installed Kubernetes version 1.19.1.&lt;/p&gt;
&lt;p&gt;If we save the above file as &lt;code&gt;cronjob.yaml&lt;/code&gt; we can add it to Kubernetes with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl apply -f cronjob.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the command runs successfully we will see something like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cronjob.batch/print-date created&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check if the cron job is created successfully we can execute the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl get cronjob&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all is good, it will print out something as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;NAME         SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE&lt;br /&gt;print-date   */5 * * * *                    False          &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;none&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;          17s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After around 5 minutes if we try &lt;code&gt;kubectl get po | grep print-date&lt;/code&gt; we should see that the cron has run once, like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;print-date-1613818500-88ln6   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;/1     Completed   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          97s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the logs of the cron job that has run we should execute &lt;code&gt;kubectl logs print-date-1613818500-88ln6&lt;/code&gt; where &lt;code&gt;print-date-1613818500-88ln6&lt;/code&gt; is the pod name will be different in your case. It will show us something as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Sat Feb &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:55:03 GMT+0000 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Coordinated Universal Time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s recap the commands below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/03kubernetes-cron-job-simple.jpg&quot; title=&quot;Kubernetes cron job a simple example - not optimally configured&quot; alt=&quot;Kubernetes cron job a simple example - not optimally configured&quot; /&gt;
&lt;p&gt;In the next part, we will look at configuring the Kubernetes Cron Job optimally.&lt;/p&gt;
&lt;h3 id=&quot;kubernetes-cron-job-an-optimal-example&quot;&gt;Kubernetes cron job an optimal example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-an-optimal-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the above simple example, let’s scrutinize some things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What if there is an error in the command, will Kubernetes try to schedule the cron job pod many times?&lt;/li&gt;
&lt;li&gt;How can we clean up the pods that have completed the job?&lt;/li&gt;
&lt;li&gt;What if our cron job has not finished and it is time to run the next one. We just want to skip the next run as the current job is not finished.&lt;/li&gt;
&lt;li&gt;We want to temporarily stop the cron job for the time being.&lt;/li&gt;
&lt;li&gt;We want to see logs of some older cron job runs even if they have failed or succeeded.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The answers to above questions and more lies in the cron job configuration below:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; batch/v1beta1&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CronJob&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*/5 * * * *&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;jobTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;backoffLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;ttlSecondsAfterFinished&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IfNotPresent&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;e&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;console.log(new Date().toString());&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; OnFailure&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;parallelism&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;completions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;concurrencyPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Forbid&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;successfulJobsHistoryLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;failedJobsHistoryLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze some of the new configurations we have added and what do they do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In this definition &lt;code&gt;backoffLimit&lt;/code&gt; is used to specify the number of retries before marking the job as &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy&quot;&gt;failed&lt;/a&gt;. For example, if the container doesn’t start or the command has an error, we are specifying it should retry 5 times before backing off (marking the job as a failed one).&lt;/li&gt;
&lt;li&gt;To lessen the pressure on Kubernetes, we can specify TTL seconds after finished. Where the TTL controller cleans up the job and deletes the job in a &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/#ttl-mechanism-for-finished-jobs&quot;&gt;cascading manner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;parallelism&lt;/code&gt; and &lt;code&gt;completions&lt;/code&gt; are by default 1, It can be used to have only 1 pod running in &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/#controlling-parallelism&quot;&gt;parallel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;concurrencyPolicy&lt;/code&gt; is very handy if you want to skip the next run if the current cron job pod is still active. Setting it to &lt;code&gt;Forbid&lt;/code&gt; can enable this. If your job demands that on the next run the current run should be canceled, it can be set to replace &lt;a href=&quot;https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#concurrency-policy&quot;&gt;Concurrency Policy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we set job history for both success and failure. We do this so that those pods are not cleaned up for a certain limit and we can check the logs if we need to.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is a screenshot of reapplying the new definition and checking logs from a run from the new configs we added:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/04kubernetes-cron-job-better.jpg&quot; title=&quot;Kubernetes cron job a better example - optimally configured&quot; alt=&quot;Kubernetes cron job a better example - optimally configured&quot; /&gt;
&lt;p&gt;A new command in the above image is:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl get &lt;span class=&quot;token function&quot;&gt;jobs&lt;/span&gt; --watch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It gets jobs and watches it for any changes. As you can see in the screenshot it detected the change when running job &lt;code&gt;print-date-1613820600&lt;/code&gt; every second for 2-3 seconds.&lt;/p&gt;
&lt;h3 id=&quot;run-kubernetes-cron-jobs-on-the-fly&quot;&gt;Run Kubernetes cron jobs on the fly &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#run-kubernetes-cron-jobs-on-the-fly&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Protip: You can force run a Kubernetes Cron Job (outside of the schedule) with a command like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl create job print-date-try01 --from&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cronjob/print-date&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is ultra convinient for testing cron jobs as we don&#39;t need to wait for the scheduled run.&lt;/p&gt;
&lt;p&gt;We are asking Kubernetes to create a job with the name &lt;code&gt;print-date-try01. The name has to be unique. If you run it the second time use &lt;/code&gt;try02&lt;code&gt;. We are telling Kubernetes to create the job from our cron job which is &lt;/code&gt;cronjob/print-date`.&lt;/p&gt;
&lt;p&gt;We can see an example of the above command as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/05kubernetes-cron-job-create-job.jpg&quot; title=&quot;Kubernetes cron job a demo for create job which is very useful for testing cron jobs&quot; alt=&quot;Kubernetes cron job a demo for create job which is very useful for testing cron jobs&quot; /&gt;
&lt;p&gt;As seen above the cron job even though scheduled for every 5th minute ran at &lt;code&gt;11:35:54&lt;/code&gt; and &lt;code&gt;11:36:35&lt;/code&gt; which is outside of its regular schedule. It was possible because we force ran the cron job on a need basis than waiting for the schedule. This command is very handy when testing Kubernetes cron jobs that are scheduled to run say every hour or every day.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes cron jobs are very useful as we have seen. In addition to being great at handling long-running workloads, Kubernetes also does an amazing job of executing jobs and cron jobs alike.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configure your Kubernetes cron jobs optimally to run the cron jobs as you expect on a Kubernetes cluster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even modern applications have tasks that need to be done with Cron jobs and Kubernetes cron jobs can be exploited for such tasks.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use nodemon to restart your Node.js applications automatically and efficiently</title>
		<link href="https://geshan.com.np/blog/2021/02/nodemon/"/>
		<updated>2021-02-15T10:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/02/nodemon/</id>
		<content type="html">&lt;p&gt;If you are developing any Node.js application, nodemon is one of the necessary weapons in your arsenal. Learn how to install and effectively use nodemon to automatically restart your Node.js application on every relevant file change. Do you want to restart your Node.js web server and save loads of development time? In this post, we are going to see how you can utilize Nodemon with any Node.js application easily.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodemon/01nodemon.jpg&quot; title=&quot;How to use nodemon to reload applicaitons automatically&quot; alt=&quot;How to use nodemon to reload applicaitons automatically&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#nodemon-a-quick-intro&quot;&gt;Nodemon a quick intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-install-nodemon%3F&quot;&gt;How to install nodemon?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-global-dependency&quot;&gt;Install nodemon as a global dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-local-project-dependency&quot;&gt;Install nodemon as a local project dependency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-use-nodemon%3F&quot;&gt;How to use nodemon?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#more-nodemon-configs&quot;&gt;More Nodemon configs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nodemon-a-quick-intro&quot;&gt;Nodemon a quick intro &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#nodemon-a-quick-intro&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having Nodemon to watch your file changes is like having an eagle watching over its prey.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On every file save and your Node.js server is automatically restarted for you as easy as that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even Nodemon’s slogan says “reload, automatically”. It might come to you as a surprise that Nodemon can be used with other languages like Python, Ruby, or even make as well. &lt;a href=&quot;https://nodemon.io/&quot;&gt;Nodemon&lt;/a&gt; is used as a dependency by more than 1.5 million projects, so it is surely battle-tested. If you are not using Nodemon for development, you are suffering.&lt;/p&gt;
&lt;p&gt;Let’s go ahead and install nodemon.&lt;/p&gt;
&lt;h2 id=&quot;how-to-install-nodemon%3F&quot;&gt;How to install nodemon? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-install-nodemon%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we install nodemon, we will use a sample app to see &lt;code&gt;nodemon&lt;/code&gt; in action. We will use &lt;a href=&quot;https://github.com/geshan/nodejs-mysql&quot;&gt;Node.js MySQL open-source application&lt;/a&gt; that I have used for the &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;Node.js MySQL&lt;/a&gt; tutorial post. This is a simple quotes REST API built with Node.js, Express.js communication with a MySQL database. Next, we will install nodemon in this sample application.&lt;/p&gt;
&lt;p&gt;Like most npm modules, Nodemon can be installed in two ways as follows:&lt;/p&gt;
&lt;h3 id=&quot;install-nodemon-as-a-global-dependency&quot;&gt;Install nodemon as a global dependency &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-global-dependency&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To install nodemon as a global NPM dependency we can run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g nodemon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install nodemon as a global dependency. It will also make the &lt;code&gt;nodemon&lt;/code&gt; command available on any path you run it on. The advantage is that you don’t need to install nodemon on each of your Node.js projects.&lt;/p&gt;
&lt;h3 id=&quot;install-nodemon-as-a-local-project-dependency&quot;&gt;Install nodemon as a local project dependency &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-local-project-dependency&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For installing nodemon as a local project NPM dependency,  we can execute the following on the project we want:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev nodemon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For our sample project, we are going to run the above command. Running it should show us something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodemon/02nodemon-install-local.jpg&quot; title=&quot;How to install nodemon as a local dev dependency&quot; alt=&quot;How to install nodemon as a local dev dependency&quot; /&gt;
&lt;p&gt;As we used &lt;code&gt;--save-dev&lt;/code&gt;, nodemon has been added to the &lt;code&gt;devDependencies&lt;/code&gt; section of the &lt;code&gt;package.json&lt;/code&gt; file. Similarly, relevant changes have been added to the &lt;code&gt;package-lock.json&lt;/code&gt; file too. If you use yarn you can run &lt;code&gt;yarn add nodemon --dev&lt;/code&gt; to add nodemon to your devDependencies.&lt;/p&gt;
&lt;p&gt;When we install nodemon locally, you will not have access to the nodemon command everywhere. If you run nodemon outside of the package.json context you will get the &lt;code&gt;nodemon command not found&lt;/code&gt; problem. To tackle this you can install nodemon globally.&lt;/p&gt;
&lt;p&gt;You can view the changes of adding &lt;code&gt;nodemon&lt;/code&gt; as a dev dependency using NPM in &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/8/files&quot;&gt;this&lt;/a&gt; pull request.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-nodemon%3F&quot;&gt;How to use nodemon? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-use-nodemon%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To use nodemon we will replace the node command with nodemon command when we run our app. Now as we have nodemon installed as a local dependency, to make things easier we will add a new script in package.json to run the application with nodemon. We can add the new script in the package.json file as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node ./bin/www&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;start:dev&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;DEBUG=nodejs-mysql:* nodemon ./bin/www&quot;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, we can run the app with the command &lt;code&gt;npm run start:dev&lt;/code&gt; and hit &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; to see the output on the browsers. As we have the app running with nodemon, if we change any file and save it it will rerun the command after nodemon again. For example, I added a &lt;code&gt;,&lt;/code&gt; in a line in &lt;code&gt;src/services/quotes.js&lt;/code&gt; and saved the file which resulted in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodemon/03nodemon-run.jpg&quot; title=&quot;How to use nodemon as a package.json script&quot; alt=&quot;How to use nodemon as a package.json script&quot; /&gt;
&lt;p&gt;As seen above, the Express.js server restated on each file change as expected.&lt;/p&gt;
&lt;h2 id=&quot;more-nodemon-configs&quot;&gt;More Nodemon configs &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#more-nodemon-configs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can add more configs by passing more parameters to the nodemon command or adding a &lt;code&gt;nodemon.json&lt;/code&gt; file. For example, if you want to make nodemon work well with docker you will need to add &lt;code&gt;--legacy-watch&lt;/code&gt; or &lt;code&gt;-L&lt;/code&gt; so that it enables Chokidar polling and nodemon will work with docker. You can have a look at &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.3-add-nodemon-to-monitor-changes-and-reload&quot;&gt;Node.js with Docker&lt;/a&gt; example too.&lt;/p&gt;
&lt;p&gt;You can even delay restarts for nodemon using the &lt;code&gt;--delay&lt;/code&gt; parameter like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nodemon delay &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will wait for 2 seconds before restarting the server on file changes. If you want to watch say .js and .sql files you can do it with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nodemon -e js,sql index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on what we want to do, we can add more configs on a &lt;code&gt;nodemon.json&lt;/code&gt; file. Below is an example of a &lt;code&gt;nodemon.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;events&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;delay&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2500&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above nodemon.json will make sure that on each restart the &lt;code&gt;clear&lt;/code&gt; command is run which will clear any old console output. Similarly, it will also restart the server after 2.5 seconds of a file change. We can add other configs too like file extensions, files to ignore. These configs can be put into the &lt;code&gt;package.json&lt;/code&gt; file too under the &lt;code&gt;nodemonConfig&lt;/code&gt; index in that file. &lt;a href=&quot;https://github.com/remy/nodemon/wiki/Sample-nodemon.json&quot;&gt;Here&lt;/a&gt; is another sample Nodemon.json file from the nodemon repo.&lt;/p&gt;
&lt;p&gt;I would highly recommend you to read the nodemon &lt;a href=&quot;https://github.com/remy/nodemon#nodemon&quot;&gt;docs&lt;/a&gt;. The &lt;a href=&quot;https://github.com/remy/nodemon/blob/master/faq.md&quot;&gt;FAQ&lt;/a&gt; of nodemon is a great place to find answers to any issues you are facing with nodemon. There are answers to issues relating to Docker, windows, and permission to name some of them.&lt;/p&gt;
&lt;p&gt;You can find the nodemon command the sample config file in &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/9/files&quot;&gt;this&lt;/a&gt; pull request.&lt;/p&gt;
&lt;p&gt;If you need more docs or help for nodemon usage, you can run &lt;code&gt;./node_modules/nodemon/bin/nodemon.js -h&lt;/code&gt; if nodemoe is installed locally. If nodemon is installed globally you can simply execute &lt;code&gt;nodemon -h&lt;/code&gt; and see the help.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen that nodemon is a very useful tool for Node.js development. Be it a web server, a command line interface (CLI) command or any other workload nodemon will make your life a lot easier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nodemon is like having someone restart your servers for you on every file change. It is very handy when writing web applications because it makes testing a lot more frictionless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you have learned how to use Nodemon to automatically restart your Node.js application with this quick tutorial.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Javascript memoization: a practical example for better HTTP performance</title>
		<link href="https://geshan.com.np/blog/2021/02/javascript-memoization/"/>
		<updated>2021-02-12T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/02/javascript-memoization/</id>
		<content type="html">&lt;p&gt;Memoization is simply caching the output of a function so that the consequent calls just use the cached result eliminating any heavy computation. Memoization in Javascript can also yield amazing performance benefits, given it is implemented properly. Do you want to make your javascript code run much faster? In this post, we will have a look at a practical example of javascript memoization. Spoiler alert: you will not see a Fibonacci or factorial mentioned below.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/01javascript-memoization.jpg&quot; title=&quot;Javascript memoization for speed, performance and profit&quot; alt=&quot;Javascript memoization for speed, performance and profit&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#what-is-memoization&quot;&gt;What is memoization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#not-another-factorial-or-fibonacci-example&quot;&gt;Not another factorial or Fibonacci example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#assumptions&quot;&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#practical-example%3A-javascript-memoization-for-a-web-response&quot;&gt;Practical example: Javascript memoization for a web response&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-before-javascript-memoization&quot;&gt;Response times before javascript memoization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-after-javascript-memoization&quot;&gt;Response times after javascript memoization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#other-considerations&quot;&gt;Other considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-memoization&quot;&gt;What is memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#what-is-memoization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An oversimplified definition of memoization is when you run an expensive function with parameters a and b, you will cache the result of that function. When the same expensive function is called with the same parameters a and b as the output is known and in the cache, the cached result is sent back.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;Wikipedia&lt;/a&gt; defines memoization as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It further adds: A memoized function &amp;quot;remembers&amp;quot; the results corresponding to some set of specific inputs. Subsequent calls with remembered inputs return the remembered result rather than recalculating it, thus eliminating the primary cost of a call with given parameters from all but the first call made to the function with those parameters.&lt;/p&gt;
&lt;p&gt;Memoization is also useful for &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;not-another-factorial-or-fibonacci-example&quot;&gt;Not another factorial or Fibonacci example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#not-another-factorial-or-fibonacci-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, I am bored with the same Fibonacci and factorial examples to explain memoization. From Wikipedia to 8 out of the 10 results for a google search for “javascript memoization” will use either factorial or Fibonacci as the example. Yes, we used to do it in university to understand recursion may be. But day-to-day real-life coding I have not used something like a factorial or Fibonacci in the past 14 years.&lt;/p&gt;
&lt;p&gt;If you still want to read some of those examples please read &lt;a href=&quot;https://flaviocopes.com/javascript-memoization/&quot;&gt;these&lt;/a&gt; posts. One on &lt;a href=&quot;https://www.freecodecamp.org/news/understanding-memoize-in-javascript-51d07d19430e/&quot;&gt;FreeCodeCamp&lt;/a&gt; even shows how to build your own memoize function. But we are not here to build one, we are here to use one in a more practical sense. We will see how in the next part.&lt;/p&gt;
&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#assumptions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we jump into the code, below are some assumption we are making:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are generally aware of how promises and async code work in Javascript&lt;/li&gt;
&lt;li&gt;You have an understanding of how REST APIs work&lt;/li&gt;
&lt;li&gt;You know who to write up a basic API with a programming language and a Relational DBMS  as a data store.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s get cracking!&lt;/p&gt;
&lt;h2 id=&quot;practical-example%3A-javascript-memoization-for-a-web-response&quot;&gt;Practical example: Javascript memoization for a web response &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#practical-example%3A-javascript-memoization-for-a-web-response&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will take an example Quotes API and memoize the response which is a promise using the &lt;a href=&quot;https://github.com/sindresorhus/p-memoize&quot;&gt;p-memoize&lt;/a&gt; library. Of course, there are other options, for instance, lodash.memoize, mem, and fast-memoize are some ultra &lt;a href=&quot;https://www.npmtrends.com/p-memoize-vs-memoizee-vs-memoizejs-vs-fast-memoize-vs-memoize-one-vs-mem-vs-lodash.memoize&quot;&gt;popular&lt;/a&gt; ones.&lt;/p&gt;
&lt;p&gt;On a similar note, the most popular one is mem (at least in my comparison), and P-memoize is the promise/asysc version of &lt;code&gt;mem&lt;/code&gt;. Both mem and p-memoize are developed by the same developer.&lt;/p&gt;
&lt;p&gt;As I have used p-memoize in the past I will stick with that one for this example. Our example currency converter API is &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;open source&lt;/a&gt; and deployed on Heroku. Please read more on &lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/&quot;&gt;free Node.js hosting&lt;/a&gt; if you are interested to host your Node.js app for $0 a month.&lt;/p&gt;
&lt;p&gt;I have chosen Heroku because it is free and not serverless, so we will see a clear decrease in the response times after implementing memoization. Next, we will see how javascript memoization speeds up the response times.&lt;/p&gt;
&lt;h3 id=&quot;response-times-before-javascript-memoization&quot;&gt;Response times before javascript memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-before-javascript-memoization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before we memorize the function let’s have a look at the code in &lt;code&gt;/routes/quotes.js&lt;/code&gt; &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/routes/quotes.js&quot;&gt;file&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a simple Express.js route where we get the rows from &lt;code&gt;quotes.getMultiple&lt;/code&gt;. In this case, it will run a &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/d51ef7298cba039130fe8bf98486ba32bf19ad7d/services/quotes.js#L7&quot;&gt;database query&lt;/a&gt; on each call. Let’s have a quick look at the response times with this approach. We will run a simple load test with 2 requests per second for 30 seconds using &lt;a href=&quot;https://geshan.com.np/blog/2020/09/vegeta-load-testing-primer-with-examples/&quot;&gt;Vegeta load testing&lt;/a&gt; tool. We can run a command as follow:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET https://nodejs-postgresql-try.herokuapp.com/quotes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta attack -duration&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;30s -rate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; -output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;results-veg-no-mem.bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; results-veg-no-mem.bin &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta plot --title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Quotes API before memozie&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; quotes-api-before-memoize.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above Vegeta load test runs for 30 seconds, it will show us an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/02before-javascript-memoization.jpg&quot; title=&quot;50 RPS for 30 seconds before javascript memoization&quot; alt=&quot;50 RPS for 30 seconds before javascript memoization&quot; /&gt;
&lt;p&gt;As we can see, the fastest response we got was ~205 ms and the slowest one was 1.5 s. I deliberately did 50 requests per second. Those red dots are the 500 errors caused by the database connection issue.&lt;/p&gt;
&lt;p&gt;The response times are pretty good after the first few requests as we use a &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/services/db.js#L13&quot;&gt;pool&lt;/a&gt; of database connections.&lt;/p&gt;
&lt;h3 id=&quot;response-times-after-javascript-memoization&quot;&gt;Response times after javascript memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-after-javascript-memoization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next we will use javascript memoization with p-memozie library to memorize the &lt;code&gt;getMultiple&lt;/code&gt; function on the quotes service. The changes in the &lt;code&gt;routes/quotes.js&lt;/code&gt; file after doing &lt;code&gt;npm i p-memoize&lt;/code&gt; are as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pMemoize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p-memoize&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ONE_MINUTE_IN_MS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; memGetMultiple &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pMemoize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getMultiple&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;maxAge&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ONE_MINUTE_IN_MS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;memGetMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze the things we changed here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have added the p-memoize library in line 4.&lt;/li&gt;
&lt;li&gt;Next, we set a constant to be 60000 milliseconds equivalent to 1 minute, the cache lifetime of our javascript memoization cache done on the memory.&lt;/li&gt;
&lt;li&gt;Consequently, we are memorizing the &lt;code&gt;quotes.getMultiple&lt;/code&gt; function on line 6 using p-memoize&lt;/li&gt;
&lt;li&gt;Later inside the get route we are using the memoized function not the original one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can refer to the change in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/17&quot;&gt;pull request&lt;/a&gt; too.&lt;br /&gt;
When we run the same load test with 50 requests per second for 30 seconds with this change, it yields the following results:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET https://nodejs-postgresql-try.herokuapp.com/quotes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta attack -duration&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;30s -rate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; -output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;results-veg-mem.bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; results-veg-mem.bin &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta plot --title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Quotes API after memozie&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; quotes-api-after-memoize.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It results in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/03after-javascript-memoization.jpg&quot; title=&quot;50 RPS for 30 seconds after javascript memoization&quot; alt=&quot;50 RPS for 30 seconds after javascript memoization&quot; /&gt;
&lt;p&gt;Here compared to the above load test, the fastest response time we got was ~157ms and the slowest one (probably the first one) was 1.05 s. Overall we clearly see a cut of 50-75 milliseconds for each request from the previous test. Another advantage we have is that the database is getting hit just once for 1500 (30*50) requests in the span of just 30 seconds.&lt;/p&gt;
&lt;p&gt;Similarly, the logs for this branch deployment is as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/04logs-after-javascript-memoization.jpg&quot; title=&quot;Server logs after Javascipt Memoization - DB hit only once&quot; alt=&quot;Server logs after Javascipt Memoization - DB hit only once&quot; /&gt;
&lt;p&gt;As seen here, the first request hit the database rendering the log saying &lt;code&gt;Getting quotes from the db&lt;/code&gt; then for the next one minute it would not hit the database. So all remaining 1499 requests in our load test got the memoized (cached) result for getting multiple quotes. The first two requests took ~320 ms and then after it took 0.5 ms to 2.4 ms, all thanks to memoization.&lt;/p&gt;
&lt;p&gt;If we had run the tests locally the results would have been much faster after memoization as it will not need to use the internet. Local tests would also avoid any complexities like the &lt;a href=&quot;https://www.cloudflare.com/en-gb/learning/ssl/what-happens-in-a-tls-handshake/&quot;&gt;SSL handshake&lt;/a&gt;. Anyway, I wanted to show a more practical and real-life example for javascript memoization as I was super bored with the factorial and Fibonacci examples.&lt;/p&gt;
&lt;p&gt;I used p-memoize but you can use any library I would suggest looking at fast-memoize or Memoizee. Fast-memoize also aims to be the “fastest possible memoization library in JavaScript that supports N arguments.”. Give that a spin.&lt;/p&gt;
&lt;h2 id=&quot;other-considerations&quot;&gt;Other considerations &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#other-considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on the library you are using, please be mindful of the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When memoizing might just cache the first parameter giving unexpected results. For example, in P-memoize we need to &lt;a href=&quot;https://github.com/sindresorhus/mem#caching-strategy&quot;&gt;join&lt;/a&gt; the arguments if there are more than 1 arguments.&lt;/li&gt;
&lt;li&gt;Not all languages support it, for instance, there would be no straightforward native way to memoize the return value of a function as all &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-process-is-long-running%2C-unlike-php&quot;&gt;PHP processes spin up and die&lt;/a&gt; per request. The same logic will apply for serverless functions.&lt;/li&gt;
&lt;li&gt;It is pretty clear that only functions that return something can be memoized.&lt;a href=&quot;https://www.cs.fsu.edu/~cop3014p/lectures/ch7/index.html&quot;&gt;Void functions&lt;/a&gt; cannot be memoized.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this example, we could also utilize the &lt;code&gt;Cache-Control&lt;/code&gt; response &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot;&gt;header&lt;/a&gt;  to cache the response on the browser. That would be the HTTP level caching option if you want to explore.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Understand memoization a bit differently and use it more for practical purposes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Break the notion that you can use javascript memoization for just things like Factorial and Fibonacci and use it for any resource-heavy thing that can be cached like a GET request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you learned a bit more things about memoization and specifically memoization in javascript, keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>5 Node.js Logging libraries compared for you to make the optimal choice</title>
		<link href="https://geshan.com.np/blog/2021/01/nodejs-logging-library/"/>
		<updated>2021-01-27T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/01/nodejs-logging-library/</id>
		<content type="html">&lt;p&gt;The optimally correct logging Node.js logging library can give you unprecedented insights into how your application is working. Having proper logging is equivalent to having a powerful telescope in a space with all your applications. Do you want to be able to see how your application behaves under load in production? In this post, we are going to analyze 5 popular Node.js logging libraries that can easily do the job for you.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-logging-libraries/01nodejs-logging-library.jpg&quot; title=&quot;5 node.js logging libraries compared&quot; alt=&quot;5 node.js logging libraries compared&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#assumptions&quot;&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#nodejs-logging-libraries-to-evaluate&quot;&gt;Node.js logging libraries to evaluate&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#winston&quot;&gt;Winston&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#bunyan-for-node.js-logging&quot;&gt;Bunyan for Node.js logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#pino&quot;&gt;Pino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#loglevel&quot;&gt;Loglevel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#npmlog&quot;&gt;Npmlog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#quick-comparison-of-node.js-logging-libraries&quot;&gt;Quick comparison of Node.js logging libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;assumptions&quot;&gt;Assumptions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#assumptions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You are familiar with how Node.js works and can run node locally&lt;/li&gt;
&lt;li&gt;You can install npm libraries and have basic knowledge of package.json and npm CLI&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will use Express.js as an example app to see code examples writing log to the console for all of the Node.js logging libraries in this post.&lt;/p&gt;
&lt;h2 id=&quot;node.js-logging-libraries-to-evaluate&quot;&gt;Node.js logging libraries to evaluate &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#node.js-logging-libraries-to-evaluate&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this post, we will evaluate 5 of the popular Node.js logging libraries available on NPM. All of them are downloaded more than a million times each week, so they are pretty darn popular. Let’s get started!&lt;/p&gt;
&lt;h3 id=&quot;winston&quot;&gt;Winston &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#winston&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt; is a popular logging library. It is designed to be simple and enables universal logging with support for multiple &lt;code&gt;transports&lt;/code&gt;. Winston defines itself as “A logger for just about everything”.&lt;/p&gt;
&lt;p&gt;With Winston, we can route your logs to other services like &lt;a href=&quot;https://www.npmjs.com/package/winston-cloudwatch&quot;&gt;AWS cloud watch&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/@eximius/winston-graylog2&quot;&gt;graylog2&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/winston-logzio&quot;&gt;logz.io&lt;/a&gt;, or even &lt;a href=&quot;https://www.npmjs.com/package/winston-logsene&quot;&gt;Sematext Logsene&lt;/a&gt;. We can even add the express middleware to make &lt;a href=&quot;https://www.npmjs.com/package/express-winston&quot;&gt;logging with Express&lt;/a&gt; better with Winston.&lt;/p&gt;
&lt;p&gt;Below is a code example of Winston with Express using &lt;a href=&quot;https://github.com/bithavoc/express-winston&quot;&gt;express-winston middleware&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; winston &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;winston&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; expressWinston &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express-winston&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more options here - https://github.com/bithavoc/express-winston#request-logging&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expressWinston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  transports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  format&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;colorize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  meta&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  msg&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HTTP  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  expressFormat&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  colorize&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;ignoreRoute&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - Winston logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello winston!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will give an output as follows when we run the server with &lt;code&gt;node winston.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3001/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3001&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[32minfo&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[39m&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET /api/test 304 2ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[32minfo&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[39m&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET /favicon.ico 404 2ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[32minfo&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[39m&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET /favicon.ico 404 1ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/2/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;bunyan-for-node.js-logging&quot;&gt;Bunyan for Node.js logging &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#bunyan-for-node.js-logging&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt; is another famous Node.js logging library. Bunyan is used by &lt;a href=&quot;https://www.joyent.com/node-js/production/modules&quot;&gt;Joyent&lt;/a&gt; in production. It defines itself as a simple and fast JSON logging library for Node.js services.&lt;/p&gt;
&lt;p&gt;Bunyan advocates that logs should be in JSON format. Its features include a CLI for pretty-printing, serializers, and support for &lt;a href=&quot;https://github.com/trentm/node-bunyan#runtime-environments&quot;&gt;multiple runtimes&lt;/a&gt; in addition to Node.js like Webpack and Browserify.&lt;/p&gt;
&lt;p&gt;Below is a code example of Bunyan with Express using &lt;a href=&quot;https://github.com/villadora/express-bunyan-logger&quot;&gt;Express Bunyan logger&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3002&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more options here - https://github.com/villadora/express-bunyan-logger#usage&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express-bunyan-logger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  name&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;logger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  format&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;:remote-address - :user-agent[major] custom logger&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  streams&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      level&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      stream&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - Bunyan logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello bunyan!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show an output similar as follows when we execute the code with &lt;code&gt;node bunyan.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3002/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3002&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;logger&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:32691,&lt;span class=&quot;token string&quot;&gt;&quot;req_id&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0b2d2977-376e-4742-86b0-57feec630188&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;:30,&lt;span class=&quot;token string&quot;&gt;&quot;remote-address&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;referer&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Chrome&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;87&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;4280&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;device&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Other&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;os&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mac OS X&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;14&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;http-version&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;response-time&quot;&lt;/span&gt;:14.628108,&lt;span class=&quot;token string&quot;&gt;&quot;response-hrtime&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,14628108&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;status-code&quot;&lt;/span&gt;:304,&lt;span class=&quot;token string&quot;&gt;&quot;req-headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3002&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a=b&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;res-headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x-powered-by&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Express&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;req&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3002&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a=b&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remoteAddress&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remotePort&quot;&lt;/span&gt;:63793&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;res&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:304,&lt;span class=&quot;token string&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HTTP/1.1 304 Not Modified&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;X-Powered-By: Express&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;ETag: W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;Date: Tue, 26 Jan 2021 21:11:12 GMT&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;Connection: keep-alive&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;incoming&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;--&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1 - 87 custom logger&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2021-01-26T21:11:12.817Z&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;v&quot;&lt;/span&gt;:0&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bunyan&#39;s logs are very verbose by default.&lt;/p&gt;
&lt;p&gt;The above code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/3/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pino&quot;&gt;Pino &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#pino&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/pino&quot;&gt;Pino&lt;/a&gt; is a relatively popular Node.js logging library that marks itself as a “very low overhead Node.js logger”. It attributes &lt;a href=&quot;https://github.com/pinojs/pino/blob/HEAD/docs/asynchronous.md&quot;&gt;asynchronous logging&lt;/a&gt; to its fast performance. Pino claims to be over 5x faster than alternatives in many cases in its &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/benchmarks.md&quot;&gt;benchmarks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other features include &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/child-loggers.md&quot;&gt;child loggers&lt;/a&gt; and &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/web.md&quot;&gt;support for multiple web frameworks&lt;/a&gt;. It has multiple core and community modules which helps to form a thriving &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/ecosystem.md&quot;&gt;ecosystem&lt;/a&gt;. With Pino, you can send the logs to many services by using proper transports like &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-mysql&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-datadog&quot;&gt;Datadog&lt;/a&gt;, &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-cloudwatch&quot;&gt;AWS cloud watch&lt;/a&gt;, or &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-logflare&quot;&gt;log flare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example of Pino with Express using &lt;a href=&quot;https://github.com/pinojs/express-pino-logger&quot;&gt;Express Pino logger&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pino &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express-pino-logger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3003&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more options here - https://github.com/pinojs/express-pino-logger#example&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pino&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - Pino logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Yo from pino&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello Pino!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will send out output as follows when we run the server with &lt;code&gt;node pino.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3003/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3003&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;:30,&lt;span class=&quot;token string&quot;&gt;&quot;time&quot;&lt;/span&gt;:1611695678813,&lt;span class=&quot;token string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:32768,&lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;req&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3003&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_ga=GA1.1.1863215728.1591927460; PPA_ID=gkq1qhp7htr141pkojpmqcqt95; webfx-tree-cookie-persistence=wfxt-4; io=TxK-RQvnHb14VONKAAAC&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;19-JzA5ewGlTSyvFTwS4fIYMkAu78Q&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remoteAddress&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remotePort&quot;&lt;/span&gt;:63824&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Yo from pino&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;:30,&lt;span class=&quot;token string&quot;&gt;&quot;time&quot;&lt;/span&gt;:1611695678817,&lt;span class=&quot;token string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:32768,&lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;req&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3003&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a=b&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;19-JzA5ewGlTSyvFTwS4fIYMkAu78Q&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remoteAddress&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remotePort&quot;&lt;/span&gt;:63824&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;res&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:304,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x-powered-by&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Express&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;19-JzA5ewGlTSyvFTwS4fIYMkAu78Q&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;responseTime&quot;&lt;/span&gt;:4,&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;request completed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to Bunyan, Pino&#39;s default logs are also verbose. We can use &lt;a href=&quot;https://github.com/pinojs/pino-pretty&quot;&gt;pino-pretty&lt;/a&gt; CLI to make the logs prettier.&lt;/p&gt;
&lt;p&gt;The code example can be accessed as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/4/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;loglevel&quot;&gt;Loglevel &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#loglevel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/loglevel&quot;&gt;Loglevel&lt;/a&gt; is a very popular logging library that can be used in both Node.js and the browser. LogLevel defines itself as “Minimal lightweight simple logging for JavaScript.” It also claims to replace console.log eliminating console.log’s downsides.&lt;/p&gt;
&lt;p&gt;Loglevel seems to be easy to use and very convenient too. Its readme adds “This is a barebones reliable everyday logging library.” which does not do fancy things but does have core functionality you will actually use.&lt;/p&gt;
&lt;p&gt;Below is a very simple example of Loglevel with Express server and no middleware:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loglevel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3004&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more docs here - https://github.com/pimterry/loglevel#documentation&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - loglevel logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Loglevel is simple&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello loglevel!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show output as follows when we run the execute the above code with &lt;code&gt;node loglevel.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3004/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3004&lt;br /&gt;Loglevel is simple&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loglevel output is very simple compared to the other libraries. Also, we did not use any express specific middleware to log using Loglevel.&lt;/p&gt;
&lt;p&gt;We can access the above example as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/5/files&quot;&gt;pull request&lt;/a&gt; too.&lt;/p&gt;
&lt;h3 id=&quot;npmlog&quot;&gt;Npmlog &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#npmlog&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/npmlog&quot;&gt;Npmlog&lt;/a&gt; is yet another very popular logging library that NPM uses. As per NpmLog’s readme “This logger is very basic. It does the logging for npm. It supports custom levels and colored output.”&lt;/p&gt;
&lt;p&gt;There is nothing fancy about this Node.js logging library and the last version was published 4 years ago. Yet, it is the most popular logging library listed in this post. The only library with over 10 million downloads per week as of Jan-2021.&lt;/p&gt;
&lt;p&gt;Below is a quick example of npmlog in action with Express js and no middleware:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;npmlog&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more docs here - https://github.com/npm/npmlog#basic-usage&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - npmlog logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;From Npmlog&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Npmlog is simple too %j&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello npmlog!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show an output like below when we start the Express js server with &lt;code&gt;node npmlog.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3005/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3005&lt;br /&gt;WARN From Npmlog Npmlog is simple too &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to Loglevel, for npmlog the output was simple and we did not use any Express js middleware too.&lt;/p&gt;
&lt;p&gt;The above code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/6/files&quot;&gt;pull request&lt;/a&gt; too.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison-of-node.js-logging-libraries&quot;&gt;Quick comparison of Node.js logging libraries &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#quick-comparison-of-node.js-logging-libraries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a quick comparison of the Node.js logging libraries we have discussed till now, all data is collected on the last week of Jan-2021:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Feature/Service&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Downloads/week&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Github Stars&lt;/th&gt;
&lt;th&gt;Github Forks&lt;/th&gt;
&lt;th&gt;First Release&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5.05 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/winstonjs/winston&quot;&gt;16.7K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.5K&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/winstonjs/winston/tags?after=0.1.3&quot;&gt;0.1.0&lt;/a&gt; on 19-Jan-2011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.23 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;6.5K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;513&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan/tags?after=0.5.0&quot;&gt;0.1.0&lt;/a&gt; on 3-Feb-2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/pino&quot;&gt;Pino&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.28 millon&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/pinojs/pino&quot;&gt;6.6K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;439&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/pinojs/pino/tags?after=v0.4.2&quot;&gt;0.2.0&lt;/a&gt; on 6-Mar-2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/loglevel&quot;&gt;LogLevel&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9.12 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/pimterry/loglevel&quot;&gt;1.9K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;154&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/pimterry/loglevel/tags?after=1.0.0&quot;&gt;0.1.0&lt;/a&gt; on 2-Apr-2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/npmlog&quot;&gt;npmlog&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10.71 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/npm/npmlog&quot;&gt;346&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/npm/npmlog/tags?after=v1.0.0&quot;&gt;0.1.0&lt;/a&gt; on 6-Jun-2012&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If we look at the download trends, &lt;a href=&quot;https://www.npmtrends.com/winston-vs-bunyan-vs-pino-vs-loglevel-vs-npmlog&quot;&gt;NPM trends&lt;/a&gt; paints a picture like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-logging-libraries/02nodejs-logging-libraries-downloads.jpg&quot; title=&quot;5 node.js logging libraries downloads trend in past 1 year&quot; alt=&quot;5 node.js logging libraries downloads trend in past 1 year&quot; /&gt;
&lt;p&gt;Even though npmlog has only 346 stars and 53 forks, it is reportedly downloaded more than 10 million times each week. In terms of GitHub stars, Winston has 3 times as many stars compared to the second one Bunyan with 513 stars. Winston is also the oldest library created on 30-Dec-2010 with the first release on 19-Jan-2011.&lt;/p&gt;
&lt;p&gt;As per &lt;a href=&quot;https://npmcompare.com/compare/bunyan,loglevel,npmlog,pino,winston&quot;&gt;npmcompare&lt;/a&gt;, Npmlog has the most points with 25.5 million points and Buyan has the least points with 2.9 million points.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For an optimal logging and monitoring experience in Node.js, rather than going after the numbers, it might be best to choose the library that suits your needs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the library that fits your purpose the best and utilize its addons or features that make the most sense to your use case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It would also be great if you follow some &lt;a href=&quot;https://geshan.com.np/blog/2019/03/follow-these-logging-best-practices-to-get-the-most-out-of-application-level-logging-slides/&quot;&gt;logging best practices&lt;/a&gt; to reap the most benefits as they are &lt;a href=&quot;https://geshan.com.np/blog/2019/11/laracon-au-2019-overall-a-good-experience/#slides&quot;&gt;software engineers’ best friend&lt;/a&gt;. I have been preaching about the &lt;a href=&quot;https://geshan.com.np/blog/2015/08/importance-of-logging-in-your-applications/&quot;&gt;importance of logging&lt;/a&gt; for a long time now. Happy logging!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>3 free Node.js hosting services you should be using today (with step-by-step deployment examples)</title>
		<link href="https://geshan.com.np/blog/2021/01/free-nodejs-hosting/"/>
		<updated>2021-01-14T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/01/free-nodejs-hosting/</id>
		<content type="html">&lt;p&gt;Hosting Node.js applications is easy, finding a completely free Node.js hosting service that is reliable is not. In this post, we will discuss 3 hosting services where you can host your Node.js applications or API for free which you should start using now. We will also deploy a demo app step-by-step on each of these 3 platforms. I wished to have found more than 3 but finding even 3 was not very easy.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/01free-nodejs-hosting.jpg&quot; title=&quot;3 free node.js hosting services you should try now&quot; alt=&quot;3 free node.js hosting services you should try now&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-options&quot;&gt;Free Node.js Hosting options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-services&quot;&gt;Free Node.js hosting services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#issues-with-these-services&quot;&gt;Issues with these services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-platforms-to-deploy-your-app&quot;&gt;Free Node.js hosting platforms to deploy your app&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#heroku&quot;&gt;Heroku&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-heroku&quot;&gt;Deploy Node.js Quotes API to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#vercel&quot;&gt;Vercel&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-on-vercel&quot;&gt;Deploy Node.js Quotes API on Vercel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#zeet&quot;&gt;Zeet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-zeet&quot;&gt;Deploy Node.js Quotes API to Zeet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#quick-comparison-of-free-node.js-hosting-services&quot;&gt;Quick comparison of Free Node.js hosting services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#other-options-for-free-node.js-hosting&quot;&gt;Other options for free Node.js hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;free-node.js-hosting-options&quot;&gt;Free Node.js Hosting options &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-options&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post is about services where you can host your Node.js application completely free, yes for $0 a month. Of course, when you don’t pay anything you will need to make some trade-offs. Still, this is not a list with just a couple of free options and a bulk of paid alternatives like the other posts I have seen and read.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have tried all of the 3 services on my own and they work pretty well for demo and small-sized applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Needless to say, we would not use a free service to host a medium-sized or a production-level application. All of these 3 main services DO NOT ask for your credit card even for backup purposes so keep them inside your wallets.&lt;/p&gt;
&lt;p&gt;I will include 3+ other services that ask for credit cards or have pretty inexpensive plans towards the end to make the list a bit more comprehensive.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All 3 of these services that we are going to look at in the next sections. Before we dive into actually deploying our Node.js applications below are some prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have a GitHub account and know how to fork repositories&lt;/li&gt;
&lt;li&gt;Your application code is available on GitHub&lt;/li&gt;
&lt;li&gt;You are able to add third-party applications to your GitHub account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to start revealing our free Node.js hosting services:&lt;/p&gt;
&lt;h2 id=&quot;free-node.js-hosting-services&quot;&gt;Free Node.js hosting services &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-services&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The free Node.js hosting services are Heroku (free tier), Vercel (hobby free forever plan), and Zeet. All these services can host your Node.js application for $0 a month a.k.a. absolutely and completely free. You don&#39;t even need to add a credit card for backup or safety reasons. But there are strings attached, as discussed next.&lt;/p&gt;
&lt;h2 id=&quot;issues-with-these-services&quot;&gt;Issues with these services &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#issues-with-these-services&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Heroku free dynos sleep if they are inactive for 30 minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a workaround called &lt;a href=&quot;https://kaffeine.herokuapp.com/&quot;&gt;Kaffeine&lt;/a&gt; that calls your Heroku service every 30 minutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or you can use something like &lt;a href=&quot;http://cron-job.org/&quot;&gt;Cron-Job.org&lt;/a&gt; to ping your Heroku service every 20 minutes to keep it awake. Heroku has a maximum of 5 applications available on the free tier.&lt;/p&gt;
&lt;p&gt;Vercel is an amazing service, where you could host both your backend API and frontend application in the same repository. It focuses more on the frontend side of things.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The downside is that Vercel uses serverless functions. It is like a great wrapper on top of AWS Lambda. It only allows personal GitHub repositories for free, not organizational ones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With serverless functions, the issues of cold start and losing application state comes into the picture.&lt;/p&gt;
&lt;p&gt;Zeet is another awesome service where neither the app sleeps if you don’t get requests for 30 minutes nor it is serverless.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The con here is you get only 1 app free but it gets 1 shared CPU and 1 GB of shared memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, that is still better than the above two options if you only have only one &lt;a href=&quot;https://geshan.com.np/blog/2020/09/take-home-coding-challenges-outshine-competition/&quot;&gt;coding challenge&lt;/a&gt; to deploy.&lt;/p&gt;
&lt;h2 id=&quot;free-node.js-hosting-platforms-to-deploy-your-app&quot;&gt;Free Node.js hosting platforms to deploy your app &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-platforms-to-deploy-your-app&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, let’s cut the rant and get to deploying a demo application. For this illustration I will use A &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;node.js Express API&lt;/a&gt; that talks with a PostgreSQL database on &lt;a href=&quot;https://www.elephantsql.com/&quot;&gt;ElephantSQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a simple quotes API and you can find the code open-source on &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;Github&lt;/a&gt;. Time to see this app hosted for free on Heroku.&lt;/p&gt;
&lt;h3 id=&quot;heroku&quot;&gt;Heroku &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#heroku&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://heroku.com/&quot;&gt;Heroku&lt;/a&gt; is a salesforce company and one of the first Platform-as-a-service (PaaS) companies that made it big, really big. It has been around since 2007, and it has evolved and adapted well to the changing technology landscape in the past 15 years. We can host multiple languages as Heroku Dynos and Node.js is definitely one of them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Heroku even 11 years back in 2010 was more like throw me your app and I will run it for you, this was before Docker and containers were a thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now in 2021, they have a host of services, and luckily the Free plan is still alive on their &lt;a href=&quot;https://www.heroku.com/pricing&quot;&gt;pricing&lt;/a&gt; page. Time to proceed to how you can deploy the demo app on Heroku:&lt;/p&gt;
&lt;h4 id=&quot;deploy-node.js-quotes-api-to-heroku&quot;&gt;Deploy Node.js Quotes API to Heroku &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-heroku&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You will need a &lt;a href=&quot;https://signup.heroku.com/&quot;&gt;free account&lt;/a&gt; on Heroku to get started. After you have registered, please follow the steps below to run your Node.js app on Heroku:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login to your Heroku account&lt;/li&gt;
&lt;li&gt;Go to: &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;https://github.com/geshan/nodejs-posgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on the “Deploy to Heroku” button&lt;/li&gt;
&lt;li&gt;On the Heroku “Create New App” page give the app a name like &lt;code&gt;nodejs-heroku-try&lt;/code&gt; or something that is available&lt;/li&gt;
&lt;li&gt;Then click “Deploy App”&lt;/li&gt;
&lt;li&gt;Wait for a minute or two and it will build and deploy the app like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/02nodejs-heroku.jpg&quot; title=&quot;Deploy a Node.js API on Heroku from its interface&quot; alt=&quot;Deploy a Node.js API on Heroku from its interface&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;After that click the “View” button, you should see something like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/03nodejs-app-on-heroku.jpg&quot; title=&quot;Node.js API running on Heroku&quot; alt=&quot;Node.js API running on Heroku&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;/quotes&lt;/code&gt; to the URL and you should see the quotes in JSON format as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/04nodejs-quotes-api-on-heroku.jpg&quot; title=&quot;Node.js Quotes API running on Heroku&quot; alt=&quot;Node.js Quotes API running on Heroku&quot; /&gt;
&lt;p&gt;Wasn’t that easy, there you have the quotes API built with Node.js and Express running on the first free Node.js hosting platform: Heroku.&lt;/p&gt;
&lt;p&gt;It did not run magically though, the settings were already present on the repo in the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/app.json&quot;&gt;app.json&lt;/a&gt; file. This tells Heroku how to deploy the app. For a real-life app, we will need to set the correct environment variable mainly secrets like database credentials properly.&lt;/p&gt;
&lt;p&gt;To make it better you can Fork the repository and connect &lt;a href=&quot;https://devcenter.heroku.com/articles/github-integration&quot;&gt;Github as a deployment method&lt;/a&gt; for Heroku.&lt;/p&gt;
&lt;p&gt;Furthermore, you can set up &lt;a href=&quot;https://devcenter.heroku.com/articles/pipelines&quot;&gt;Pipelines&lt;/a&gt; to create staging and production environments in Heroku. You can also use the &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;Heroku CLI&lt;/a&gt; for more control over your apps. I leave further exploration to you. Next, let’s look at how to deploy the same application on Vercel.&lt;/p&gt;
&lt;h3 id=&quot;vercel&quot;&gt;Vercel &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#vercel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; (previously known as Zeit) is a great place to deploy frontend apps. Being a layer on top of serverless functions it can also run some other languages and &lt;a href=&quot;https://vercel.com/docs/runtimes#official-runtimes/node-js&quot;&gt;Node.js is included&lt;/a&gt; in that list. Amongst other good features, a very handy feature with Vercel is you get a unique URL for each pull request which makes testing that particular branch a breeze. They call this deploy preview.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://vercel.com/pricing&quot;&gt;Vercel Pricing&lt;/a&gt; is pretty straight forward. Personal projects run free and it integrates with GitHub, BitBucket, and GitLab.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s look at how we can deploy our Quotes API Node.js app on Vercel.&lt;/p&gt;
&lt;h4 id=&quot;deploy-node.js-quotes-api-on-vercel&quot;&gt;Deploy Node.js Quotes API on Vercel &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-on-vercel&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After you have &lt;a href=&quot;https://vercel.com/signup&quot;&gt;registered&lt;/a&gt; with Vercel and are logged into Vercel, do the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visit &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;https://github.com/geshan/nodejs-posgresql&lt;/a&gt; (you don’t even need to fork the repo)&lt;/li&gt;
&lt;li&gt;Click on the blue “Deploy” button&lt;/li&gt;
&lt;li&gt;Give it a name in the Vercel UI like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/05nodejs-vercel-linkup.jpg&quot; title=&quot;Link up Node.js App Github Repo with Vercel&quot; alt=&quot;Link up Node.js App Github Repo with Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;And click &amp;quot;Continue&amp;quot;&lt;/li&gt;
&lt;li&gt;You can create your own repo on Github from the screen below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/06nodejs-vercel-create-repo.jpg&quot; title=&quot;Create Github Repo within Vercel for Node.js free hosting&quot; alt=&quot;Create Github Repo within Vercel for Node.js free hosting&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;After that, select the root as the project’s source code, then click “Continue”&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/07nodejs-vercel-project-root.jpg&quot; title=&quot;Choose root as the project source code in Vercel&quot; alt=&quot;Choose root as the project source code in Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Subsequently, click deploy in the next screen:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/08nodejs-vercel-deploy.jpg&quot; title=&quot;Deploy the app on Vercel with Deploy button&quot; alt=&quot;Deploy the app on Vercel with Deploy button&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;It will build and deploy the app and you will see a screen like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/09nodejs-vercel-deployed.jpg&quot; title=&quot;The app is deployed on Vercel&quot; alt=&quot;The app is deployed on Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Now, click the “Visit” button, you should see something like the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/10nodejs-vercel-app-running.jpg&quot; title=&quot;The app is running on Vercel&quot; alt=&quot;The app is running on Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;/quotes&lt;/code&gt; to the URL and you should see the quotes in a JSON format like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/11nodejs-vercel-api-running.jpg&quot; title=&quot;The quotes API is running on Vercel&quot; alt=&quot;The quotes API is running on Vercel&quot; /&gt;
&lt;p&gt;This is set up very well now, you should go to the app’s settings page if you want to tweak anything. You can add environment variables and do other things in the settings. You can even look at the function’s logs.&lt;/p&gt;
&lt;p&gt;Each time you open a new pull request in that repository Vercel will give you a deploy preview URL which is very handy. You can see how it looks like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/12nodejs-vercel-deploy-preview.jpg&quot; title=&quot;Vercel deploy preview on GitHub pull request&quot; alt=&quot;Vercel deploy preview on GitHub pull request&quot; /&gt;
&lt;p&gt;On merge to master/main branch, it will auto-deploy the code to the main URL. You can use the &lt;a href=&quot;https://vercel.com/docs/cli&quot;&gt;Vercel CLI&lt;/a&gt; for re-deployments, setting up environment variables, and a host of other things.&lt;/p&gt;
&lt;p&gt;Both Heroku and Vercel have powerful CLI to make your life easier for deploying the apps and doing other things like having a look at the app logs from the CLI.&lt;/p&gt;
&lt;p&gt;Next, let&#39;s look at how Zeet compares to Heroku and Vercel.&lt;/p&gt;
&lt;h3 id=&quot;zeet&quot;&gt;Zeet &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#zeet&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://zeet.co/&quot;&gt;Zeet&lt;/a&gt; brands itself as the easiest way to deploy. It supports both code from Github or a public docker container. Zeet is not as popular as either Heroku or Vercel but it packs a punch with its simplicity quotient.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As Zeet doesn’t run serverless functions or sleep in 30 mins it looks like a promising option to host just one app for free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per its &lt;a href=&quot;https://zeet.co/pricing&quot;&gt;pricing&lt;/a&gt; page, we can run one project for free with limited and shared resources. Time to dig more into Zeet:&lt;/p&gt;
&lt;h3 id=&quot;update%3A-mar-2021---zeet-has-started-to-charge&quot;&gt;Update: Mar 2021 - Zeet has started to charge &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#update%3A-mar-2021---zeet-has-started-to-charge&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recently Zeet has deprecated its free plan and started to charge $5 for the single shared VM it used to provide free. I would recommend using &lt;a href=&quot;https://www.qovery.com/pricing&quot;&gt;Qovery&lt;/a&gt; as an alternative to Zeet which has a great free plan.&lt;/p&gt;
&lt;h4 id=&quot;deploy-node.js-quotes-api-to-zeet&quot;&gt;Deploy Node.js Quotes API to Zeet &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-zeet&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given you have &lt;a href=&quot;https://zeet.co/new&quot;&gt;registered&lt;/a&gt; on to Zeet with GitHub and you are logged into Zeet, follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fork the &lt;code&gt;https://github.com/geshan/nodejs-posgresql&lt;/code&gt; repository to your GitHub account&lt;/li&gt;
&lt;li&gt;Go to Zeet, click the green “+ New Project” button on the top right of Zeet&lt;/li&gt;
&lt;li&gt;Then click “GitHub” and click the green “Continue” button under the “Trial $0” option&lt;/li&gt;
&lt;li&gt;After that, click “Continue” besides the “Nodejs-posgresql” repo that you have just forked and then click “Deploy Now” as seen below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/13nodejs-zeet-deploy-now.jpg&quot; title=&quot;Deploy Node.js app to Zeet&quot; alt=&quot;Deploy Node.js app to Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Subsequently, choose “Node.js 14” on “Build Method” and click “Save” as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/14nodejs-zeet-commands.jpg&quot; title=&quot;Node.js app to deploy on Zeet&quot; alt=&quot;Node.js app to deploy on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Give it some time to build and deploy, after that, you will see something like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/15nodejs-zeet-deployed.jpg&quot; title=&quot;Node.js app deployed on Zeet&quot; alt=&quot;Node.js app deployed on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;If you click the green &amp;quot;Visit&amp;quot; button, it will not work now. There is one small config left. Click on “Settings” then click on the “Networking” link on the left then set the &amp;quot;Port&amp;quot; to be &lt;code&gt;3000&lt;/code&gt; as seen below, after that click “Save” on the bottom right as seen below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/16nodejs-zeet-port.jpg&quot; title=&quot;Configure right port for the Node.js app on Zeet&quot; alt=&quot;Configure right port for the Node.js app on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;This should redeploy the App, if you go back to the “Deployments” tap it should be deploying/deployed.&lt;/li&gt;
&lt;li&gt;Consequently, click the “Visit” button again you should see something like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/17nodejs-zeet-app-running.jpg&quot; title=&quot;Node.js app running on Zeet&quot; alt=&quot;Node.js app running on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Next, add &lt;code&gt;/quotes&lt;/code&gt; to the URL and you should see something similar to the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/18nodejs-zeet-api-running.jpg&quot; title=&quot;Node.js Quotes API running on Zeet&quot; alt=&quot;Node.js Quotes API running on Zeet&quot; /&gt;
&lt;p&gt;Like Vercel, Zeet also provides a deploy preview URL on each pull request. I have a feeling they wanted to compete Zeit with Zeet :), if you know what I mean. Below is a preview of how the deploy perview URL looks like as a comment in your pull reqeust:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/19nodejs-zeet-deploy-preview.jpg&quot; title=&quot;Node.js App deploy preview on Zeet&quot; alt=&quot;Node.js App deploy preview on Zeet&quot; /&gt;
&lt;p&gt;Anyway if you want to deploy your own app you will need to delete this demo app and add your own app. Zeet only allows 1 free app. They have more demos in their &lt;a href=&quot;https://github.com/zeet-demo&quot;&gt;GitHub account&lt;/a&gt;. Zeet does not have a CLI app which is good I suppose as it wants to keep things simple and clean.&lt;/p&gt;
&lt;p&gt;There you have it, the same Node.js API deployed on all 3 free Node.js hosting services without even needing to reach your wallet for your credit card.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison-of-free-node.js-hosting-services&quot;&gt;Quick comparison of Free Node.js hosting services &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#quick-comparison-of-free-node.js-hosting-services&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a quick comparison table for Heroku, Vercel, and Zeet.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Feature/Service&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;CPU&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Memory&lt;/th&gt;
&lt;th&gt;Sleeps on no activity?&lt;/th&gt;
&lt;th&gt;Is FAAS/Serverless?&lt;/th&gt;
&lt;th&gt;No. of apps?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Heroku&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;512 MB&lt;/td&gt;
&lt;td&gt;After 30 mins&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Vercel&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N/A&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 GB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Unlimited&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Zeet&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 Shared&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 GB Shared&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After that contrast, let’s look at some other options that are free but still ask for your credit card as a backup option that they can charge if you use more resources.&lt;/p&gt;
&lt;h2 id=&quot;other-options-for-free-node.js-hosting&quot;&gt;Other options for free Node.js hosting &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#other-options-for-free-node.js-hosting&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some other services where you can host your Node.js application free/almost free but you need to put your credit card are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://fly.io/&quot;&gt;Fly.io&lt;/a&gt; - Pretty good, it is like CDN for the backend. The &lt;a href=&quot;https://fly.io/docs/about/pricing/&quot;&gt;free plan&lt;/a&gt; has 3 shared-CPU-1x VMs with 256 MB of RAM. Asks for a credit-card on registration.&lt;/li&gt;
&lt;li&gt;Google Cloud Run - You can host your Node.js app on &lt;a href=&quot;https://cloud.google.com/run&quot;&gt;Google Cloud Run&lt;/a&gt; as &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot;&gt;serverless containers&lt;/a&gt;. You can get up to &lt;a href=&quot;https://cloud.google.com/run/pricing&quot;&gt;2 million requests&lt;/a&gt; per month free. But it will involve setting up Google Cloud Registry and other tools. Part of Google Cloud Platform which asks for a credit card on registration.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openode.io/&quot;&gt;Openode.io&lt;/a&gt; - If you have an open-source project you can ask them for a &lt;a href=&quot;https://www.openode.io/pricing&quot;&gt;free plan&lt;/a&gt;. The cheapest plan with 50MB of memory is just $0.75 a month.&lt;/li&gt;
&lt;li&gt;Glitch - &lt;a href=&quot;https://glitch.com/pricing&quot;&gt;Glitch&lt;/a&gt; can host one of your Node.js Apps for free. It is better used to code collaboratively than host a Node.js app or API.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;You can host your Node.js App on all 3 of the big cloud providers AWS, Azure, and GCP and/or their function as a service (FAAS) serverless options or even on free-forever VM. But, they will ask for your credit-card.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can even explore other cloud providers like IBM Cloud or Alibaba to host your Node.js app for $0 a month. I will leave the digging deeper part for you.&lt;/p&gt;
&lt;p&gt;If you are looking for windows hosting, this &lt;a href=&quot;https://www.accuwebhosting.com/vps-hosting/windows&quot;&gt;Windows VPS Hosting Comparison&lt;/a&gt; is great.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hosting a small test project with Node.js should not be a hassle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should be able to do it easily with any of the above 3 services that give it absolutely free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also use the other services that give it for free but ask you to put down your credit card number. The choice is yours!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Express Helmet: the must-have seatbelt for a secure Node.js application</title>
		<link href="https://geshan.com.np/blog/2021/01/nodejs-express-helmet/"/>
		<updated>2021-01-08T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/01/nodejs-express-helmet/</id>
		<content type="html">&lt;p&gt;Security is everyone’s responsibility. Express Helmet secures your Node.js application from some obvious threats. While writing a Node.js &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; application, always use &lt;a href=&quot;https://github.com/helmetjs/helmet&quot;&gt;Helmet&lt;/a&gt; to safeguard your application or API from usual security risks like XSS, Content Security Policy, and others.&lt;/p&gt;
&lt;p&gt;In this post, we will see how we can add Helmet to an existing API and how it bolsters the security of the application. Let’s get started!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/express-helmet/01express-helmet.jpg&quot; title=&quot;Use Helmet js to secure your Node.js Express app&quot; alt=&quot;Use Helmet js to secure your Node.js Express app&quot; /&gt;
&lt;!-- more --&gt;
&lt;p&gt;Background Photo by &lt;a href=&quot;https://unsplash.com/@harleydavidson&quot;&gt;Harley-Davidson&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/photos/ZZbniSDAGoU&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#web-application-security&quot;&gt;Web application security&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#handy-owasp-cheat-sheets&quot;&gt;Handy OWASP cheat sheets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#nodejs-web-application-security&quot;&gt;Node.js Web application security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#example-express-js-application&quot;&gt;Example Express Js application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#express-without-helmet-js&quot;&gt;Express without Helmet Js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#express-helmet-to-the-rescue&quot;&gt;Express Helmet to the rescue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#helmet-js-with-sane-defaults&quot;&gt;Helmet js with sane defaults&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#response-headers-for-security&quot;&gt;Response headers for security&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#content-security-policy&quot;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#expect-certificate-transparency&quot;&gt;Expect Certificate Transparency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#strict-transport-security&quot;&gt;Strict Transport Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#quick-scan&quot;&gt;Quick scan&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#before-express-helmet&quot;&gt;Before Express Helmet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#after-express-helmet&quot;&gt;After Express Helmet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;web-application-security&quot;&gt;Web application security &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#web-application-security&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web application security is a pretty vast topic, people have &lt;a href=&quot;https://www.oreilly.com/library/view/web-application-security/9781492053101/&quot;&gt;written&lt;/a&gt; &lt;a href=&quot;https://leanpub.com/wasec&quot;&gt;books&lt;/a&gt; about it. For example, OWASP comes up with a yearly &lt;a href=&quot;https://owasp.org/www-project-top-ten/&quot;&gt;top 10 web application security risks&lt;/a&gt; where Injection (like SQL injection) and Cross-Site Scripting (XSS) usually make it into the top 10 list.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example, with &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;Node.js and MySQL&lt;/a&gt; you would want to use the &lt;a href=&quot;https://github.com/sidorares/node-mysql2&quot;&gt;MySQL2&lt;/a&gt; library vs &lt;a href=&quot;https://github.com/mysqljs/mysql&quot;&gt;MySQL&lt;/a&gt; library because it supports &lt;a href=&quot;https://github.com/sidorares/node-mysql2#using-prepared-statements&quot;&gt;prepared statements&lt;/a&gt; which can tackle SQL injection from the database level.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There would be a lot of other security things you would want to learn about depending on how sensitive your public-facing application and its related data is.&lt;/p&gt;
&lt;h3 id=&quot;handy-owasp-cheat-sheets&quot;&gt;Handy OWASP cheat sheets &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#handy-owasp-cheat-sheets&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you want to get your hands dirty with some Security stuff they have a long list of &lt;a href=&quot;https://cheatsheetseries.owasp.org/Glossary.html&quot;&gt;Cheat Sheets&lt;/a&gt; to get started quickly. It includes cheat sheets from &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html&quot;&gt;docker security&lt;/a&gt; to &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html&quot;&gt;SQL injection prevention&lt;/a&gt;. You want to find something on security, chances are you will find a cheat sheet from OWASP on that topic.&lt;/p&gt;
&lt;h3 id=&quot;node.js-web-application-security&quot;&gt;Node.js Web application security &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#node.js-web-application-security&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Focusing on a web application built with Node.js and Express. A library like Helmet can help on setting the right response headers which are great for a more secure application. As Node.js has a built-in web server it is easier for controlling the HTTP response headers from Node.js itself than another web server like Apache or Nginx.&lt;/p&gt;
&lt;p&gt;If you are using Koa you can use &lt;a href=&quot;https://github.com/venables/koa-helmet&quot;&gt;Koa Helmet&lt;/a&gt; to add important response headers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In case you are using other languages do consider the options available found in the &lt;a href=&quot;https://helmetjs.github.io/see-also/&quot;&gt;see also&lt;/a&gt; section of the Helmet js website.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, there is a &lt;a href=&quot;https://github.com/BePsvPT/secure-headers&quot;&gt;Secure Headers&lt;/a&gt; composer package for PHP, and for Django there exists a pip package called &lt;a href=&quot;https://django-csp.readthedocs.io/en/latest/index.html&quot;&gt;Django CSP&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;example-express-js-application&quot;&gt;Example Express Js application &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#example-express-js-application&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this walkthrough, we will use the Currency API application which is &lt;a href=&quot;https://github.com/geshan/currency-api/&quot;&gt;open source&lt;/a&gt;. It is a simple currency converter proxy API that gives the exchange rate from one currency to the other for a given date.&lt;/p&gt;
&lt;p&gt;I have used it for other examples too like the &lt;a href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/&quot;&gt;faster docker builds&lt;/a&gt; one. I have also used the same application for &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;docker multi-stage build&lt;/a&gt; post. It is a simple API, let’s analyze the headers and security risks it poses without Helmet.&lt;/p&gt;
&lt;h2 id=&quot;express-without-helmet-js&quot;&gt;Express without Helmet Js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#express-without-helmet-js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is the screenshot of the Header for the Currency API Node.js Express app without Helmet hosted on Vercel:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/express-helmet/02express-without-helmet.jpg&quot; title=&quot;Express without helmet does not have needed security HTTP Response Headers&quot; alt=&quot;Express without helmet does not have needed security HTTP Response Headers&quot; /&gt;
&lt;p&gt;One of the things that caught my attention is the &lt;code&gt;x-powered-by&lt;/code&gt; response header. I don’t think it adds any value to the client by knowing it is an Express app. On the contrary, if an attacker finds out we are using an old version of Express, the attacker will try to exploit any known vulnerability. This header will be removed by Helmet.&lt;/p&gt;
&lt;p&gt;Some more headers that would make the server secure that are missing are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Security-Policy&lt;/li&gt;
&lt;li&gt;Strict-Transport-Security&lt;/li&gt;
&lt;li&gt;Expect-CT&lt;/li&gt;
&lt;li&gt;Referrer-Policy&lt;/li&gt;
&lt;li&gt;X-Content-Type-Options&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this juncture, let’s add Helmet js to our Currency API Express application as the next step.&lt;/p&gt;
&lt;h2 id=&quot;express-helmet-to-the-rescue&quot;&gt;Express Helmet to the rescue &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#express-helmet-to-the-rescue&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen that some Response headers are crucial for security. To get these essential Response headers that instruct the browser to make our website more secure we will add Helmet Js to our application. We can add Helmet to our Express API app by simply installing it with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; instal --save helmet&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, we will require helmet in our &lt;code&gt;index.js&lt;/code&gt; file and use it as a middleware like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; bodyParser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;body-parser&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; helmet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;helmet&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; exchangeRates &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./src/exchangeRates&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;helmet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can view the changes as a &lt;a href=&quot;https://github.com/geshan/currency-api/pull/113/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;helmet-js-with-sane-defaults&quot;&gt;Helmet js with sane defaults &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#helmet-js-with-sane-defaults&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As seen in the above code change, we have just used helmet with &lt;code&gt;app.use(helmet());&lt;/code&gt; without any extra configs added. The good thing about Express Helmet is that it automatically adds 11 sub middlewares with sane default configs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This may be one of the reasons that even the Express.js security best practices for production &lt;a href=&quot;https://expressjs.com/en/advanced/best-practice-security.html#use-helmet&quot;&gt;recommends&lt;/a&gt; to use helmet js.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition to using Helmet, it also mentions &lt;a href=&quot;https://expressjs.com/en/advanced/best-practice-security.html#use-cookies-securely&quot;&gt;securing cookies&lt;/a&gt; and other things.&lt;/p&gt;
&lt;p&gt;Looking further, it&#39;s time to see what new response headers has Helmet added with the default configuration:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/express-helmet/03express-with-helmet.jpg&quot; title=&quot;Express with helmet has many needed security HTTP Response Headers&quot; alt=&quot;Express with helmet has many needed security HTTP Response Headers&quot; /&gt;
&lt;p&gt;I had done a similar request last time but this time the &lt;code&gt;x-powered-by&lt;/code&gt; response header is missing, thanks to Express Helmet. On the contrary, Helmet has added some new hearers which are very useful from a security point of view. We will see further, what these headers are and analyze 4 of the main ones.&lt;/p&gt;
&lt;h3 id=&quot;response-headers-for-security&quot;&gt;Response headers for security &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#response-headers-for-security&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By adding Helmet with default configuration we can see that some new response headers have been added to our Currency API app’s response:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Content-security-policy&lt;/a&gt; is also known as CSP for short&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT&quot;&gt;Expect-CT&lt;/a&gt; - CT is Certificate Transparency&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.dev/referrer-best-practices/#referer-and-referrer-policy-101&quot;&gt;Referrer-Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&quot;&gt;Strict-Transport-Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s discuss these 4 in a bit more detail:&lt;/p&gt;
&lt;h4 id=&quot;content-security-policy&quot;&gt;Content Security Policy &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#content-security-policy&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This header adds a layer of security by declaring which dynamic resources are allowed to load. It helps to mitigate Cross Site Scripting (XSS) and some forms of Click jacking too. You can read more about &lt;a href=&quot;https://content-security-policy.com/&quot;&gt;CSP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance, with a strict CSP you can block images from other websites Following is the value of the Header given by Helmet as default:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;content-security-policy: default-src &#39;self&#39;;base-uri &#39;self&#39;;block-all-mixed-content;font-src &#39;self&#39; https: data:;frame-ancestors &#39;self&#39;;img-src &#39;self&#39; data:;object-src &#39;none&#39;;script-src &#39;self&#39;;script-src-attr &#39;none&#39;;style-src &#39;self&#39; https: &#39;unsafe-inline&#39;;upgrade-insecure-requests&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the above policy, you can’t load a remote style as &lt;code&gt;style-src&lt;/code&gt; is set to only &lt;code&gt;self&lt;/code&gt;. Depending on your specific needs you can relax the policy. Have a look at the &lt;a href=&quot;https://github.com/helmetjs/helmet#reference&quot;&gt;config options&lt;/a&gt; available on Express Helmet.&lt;/p&gt;
&lt;h4 id=&quot;expect-certificate-transparency&quot;&gt;Expect Certificate Transparency &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#expect-certificate-transparency&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Expect-CT as the name suggests checks for misuse of certificates. When a site enables the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT&quot;&gt;Expect-CT&lt;/a&gt; header, they are requesting that the browser check that any certificate for that site appears in public CT logs.&lt;/p&gt;
&lt;p&gt;Browsers ignore the Expect-CT header over HTTP; the header only has an effect on HTTPS connections. So this is an explicit check by the browser that the given certificate for the website is a valid one as per &lt;a href=&quot;https://www.certificate-transparency.org/known-logs&quot;&gt;public logs&lt;/a&gt;. Helmet adds &lt;code&gt;expect-ct: max-age=0&lt;/code&gt; meaning the browser should expect the certificate to be valid.&lt;/p&gt;
&lt;h4 id=&quot;referrer-policy&quot;&gt;Referrer Policy &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#referrer-policy&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;In simple terms, referrer policy defines what data should be picked up from the referrer of the request. Helmet by default puts this to no data which means no part of the URL neither the origin nor the query string can be used on your website. Web.dev has a great piece on &lt;a href=&quot;https://web.dev/referrer-best-practices&quot;&gt;Referrer best practices&lt;/a&gt; with easy to understand graphical explanations. Helmet adds &lt;code&gt;referrer-policy: no-referrer&lt;/code&gt;, which is pretty restrictive.&lt;/p&gt;
&lt;h4 id=&quot;strict-transport-security&quot;&gt;Strict Transport Security &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#strict-transport-security&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This response header tells the browser that the website needs to be accessed using HTTPS not HTTP. It has &lt;code&gt;max-age&lt;/code&gt; and &lt;code&gt;includeSubdomain&lt;/code&gt; directives. Max-age tells the browser the time in seconds the browser should remember that the website should only be accessed using HTTPS. The &lt;code&gt;includeSubdomain&lt;/code&gt; directive which is optional, tells this rule applies to the site’s subdomains as well. Helmet adds the following:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;strict-transport-security: max-age=15552000; includeSubDomains&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it says that the website needs to be accessed via HTTPS for 180 days with its subdomains.&lt;/p&gt;
&lt;p&gt;There are other headers added by Helmet like &lt;code&gt;x-permitted-cross-domain-policies&lt;/code&gt;, &lt;code&gt;X-Content-Type-Options&lt;/code&gt;, etc, they are a bit less important than the 4 mentioned above.&lt;/p&gt;
&lt;h2 id=&quot;quick-scan&quot;&gt;Quick scan &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#quick-scan&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can do a quick scan of your website’s security headers on &lt;a href=&quot;https://securityheaders.com/&quot;&gt;SecurityHeaders.com&lt;/a&gt;. Below is the before and after results of the Currency API Express application:&lt;/p&gt;
&lt;h3 id=&quot;before-express-helmet&quot;&gt;Before Express Helmet &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#before-express-helmet&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/express-helmet/04express-before-helmet.jpg&quot; title=&quot;Express before adding helmet got a D on SecurityHeader.com&quot; alt=&quot;Express before adding helmet got a D on SecurityHeader.com&quot; /&gt;
&lt;p&gt;As seen above, without the use of Express helmet it is missing important HTTP response headers like Content-Security-Policy, Referrer-Policy, and others. The score for the website at this point is a &amp;quot;D&amp;quot;.&lt;/p&gt;
&lt;h3 id=&quot;after-express-helmet&quot;&gt;After Express Helmet &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#after-express-helmet&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/express-helmet/05express-after-helmet.jpg&quot; title=&quot;Express after adding helmet got an amazing A on SecurityHeader.com&quot; alt=&quot;Express after adding helmet got an amazing A SecurityHeader.com&quot; /&gt;
&lt;p&gt;So from a poor &amp;quot;D&amp;quot; before Express Helmet, it jumped to a great &amp;quot;A&amp;quot; on Security Headers website.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This means Helmet is a must for every Node.js Express application for better security response headers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are building an Express js application and thinking of putting it on production make adding Helmet js part of your go-to production checklist.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-express-helmet/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Helmet is a great package for all Node.js Express applications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It should be used with proper configurations so that the application is secure and still optimally permissive too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are other factors than just response headers and for better overall security we should focus also on other factors like secure cookies, the latest and secure versions of the packages, etc.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>5 useful PHPUnit Assertions you should start using today</title>
		<link href="https://geshan.com.np/blog/2021/01/phpunit-assertions/"/>
		<updated>2021-01-03T10:32:45Z</updated>
		<id>https://geshan.com.np/blog/2021/01/phpunit-assertions/</id>
		<content type="html">&lt;p&gt;PHPUnit has been blowing away its competition for more than &lt;a href=&quot;https://trends.google.com/trends/explore?date=2016-01-01%202020-12-31&amp;amp;q=phpunit,phpspec,codeception,behat,atoum&quot;&gt;5 years&lt;/a&gt; now. With the use of the right PHPUnit assertions, you can get the most benefit out of PHPUnit. In this post, we will look into some popular and very useful PHPUnit assertions you should be using day to day in your PHPUnit tests. Let’s get cracking!&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-assertions/01phpunit-assertions.jpg&quot; title=&quot;PHPUnit assertions you should start using now&quot; alt=&quot;PHPUnit assertions you should start using now&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#phpunit-assertions-to-know-about&quot;&gt;PHPUnit Assertions to know about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#analyzing--phpunit-assertions-usage-in-a-small-medium-and-large-project&quot;&gt;Analyzing PHPUnit Assertions usage in a small, medium, and large project&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#small-project-with-phpunit-assertions&quot;&gt;Small Project with PHPUnit Assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#medium-project-for-phpunit-assertions-count&quot;&gt;Medium project for PHPUnit Assertions count&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#big-project-for-counting-phpunit-assertions&quot;&gt;Big project for counting PHPUnit Assertions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#anatomy-of-phpunit-assertions&quot;&gt;Anatomy of PHPUnit assertions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#some-phpunit-assertions-you-must-start-using-today&quot;&gt;Some PHPUnit assertions you must start using today&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertjsonstringequalsjsonstring&quot;&gt;assertJsonStringEqualsJsonString&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertmatchesregularexpression-or-assertregexp&quot;&gt;assertMatchesRegularExpression or assertRegExp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertstringcontainsstring&quot;&gt;assertStringContainsString&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assetequalswithdelta&quot;&gt;assetEqualsWithDelta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertarrayhaskey&quot;&gt;assertArrayHasKey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;phpunit-assertions-to-know-about&quot;&gt;PHPUnit Assertions to know about &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#phpunit-assertions-to-know-about&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Currently, PHPUnit is at version &lt;a href=&quot;https://github.com/sebastianbergmann/phpunit/releases/tag/9.5.0&quot;&gt;9.5&lt;/a&gt;. As per the latest &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/assertions.html&quot;&gt;docs&lt;/a&gt; there are 60 assert methods you can use in your PHPUnit tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These PHPUnit assertions range from checking if &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/assertions.html#assertarrayhaskey&quot;&gt;array has a key&lt;/a&gt; to the ever-popular &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/assertions.html#assertequals&quot;&gt;assert equals&lt;/a&gt; to the not so widely used &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/assertions.html#assertxmlstringequalsxmlstring&quot;&gt;XML string comparing&lt;/a&gt; PHPUnit assertion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;analyzing-phpunit-assertions-usage-in-a-small%2C-medium%2C-and-large-project&quot;&gt;Analyzing  PHPUnit Assertions usage in a small, medium, and large project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#analyzing-phpunit-assertions-usage-in-a-small%2C-medium%2C-and-large-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To know which PHPUnit assertions are used most in the projects I have worked with in the past years I ran the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; -rin &lt;span class=&quot;token string&quot;&gt;&quot;&gt;assert&quot;&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{print $2}&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;awk&lt;/span&gt; -F&lt;span class=&quot;token string&quot;&gt;&quot;[&gt;(]&quot;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;{print $2}&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;uniq&lt;/span&gt; -c &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt; -nr&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The above command should be run in your &lt;code&gt;tests&lt;/code&gt; folder. It basically looks for &lt;code&gt;&amp;gt;assert*&lt;/code&gt; in the code and sorts them, then counts the unique occurrences and again sorts at the end with most occurrences first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will be taking three projects, one small, the second one medium, and the third one is a large one. The size is not only the code but also the number of tests and assertions in the projects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;These projects are built with Symfony and another framework. Two of them are REST APIs and one of them which is the big one has a user interface too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;small-project-with-phpunit-assertions&quot;&gt;Small Project with PHPUnit Assertions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#small-project-with-phpunit-assertions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The small project built with Symfony as a REST API has only 104 tests and 306 PHPUnit assertions. The above command when executed on this project’s tests folder gave the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-assertions/02phpunit-assertions-count-small.jpg&quot; title=&quot;PHPUnit assertions count on a small project&quot; alt=&quot;PHPUnit assertions count on a small project&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;As we can see, the most popular PHPUnit assertion used in this project is &lt;code&gt;assertEquals&lt;/code&gt; which is used 73 times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After that, &lt;code&gt;assertSame&lt;/code&gt; is used 51 times in this relatively small project. This means almost 1 out of 4 PHPUnit assertions for this project is &lt;code&gt;assertEquals&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;medium-project-for-phpunit-assertions-count&quot;&gt;Medium project for PHPUnit Assertions count &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#medium-project-for-phpunit-assertions-count&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The medium project built with Symfony which is a REST API has 221 tests and 472 PHPUnit assertions. The above command when run on its tests directory looks like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-assertions/03phpunit-assertions-count-medium.jpg&quot; title=&quot;PHPUnit assertions count on a small project&quot; alt=&quot;PHPUnit assertions count on a medium project&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;We can clearly see that &lt;code&gt;assertSame&lt;/code&gt; and &lt;code&gt;assertEquals&lt;/code&gt; is used the most in this small project with 37 times each.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The numbers of asserts don’t add up to 221 because there are a lot of &lt;a href=&quot;https://geshan.com.np/blog/2014/02/using-phpunit-data-provider-for-less/&quot;&gt;PHPunit data providers&lt;/a&gt; used in these tests.&lt;/p&gt;
&lt;p&gt;Still, &lt;code&gt;assertSame&lt;/code&gt; and &lt;code&gt;assertEquals&lt;/code&gt; make up almost 16% of the assertions used in this project. Recently we switched the code coverage driver to be &lt;a href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/&quot;&gt;PCov&lt;/a&gt; instead of Xdebug. It made the test coverage much faster. If you are interested, I had also blogged about &lt;a href=&quot;https://geshan.com.np/blog/2015/07/getting-started-with-unit-testing-in-laravel/&quot;&gt;unit testing in Laravel&lt;/a&gt; in the past.&lt;/p&gt;
&lt;h3 id=&quot;big-project-for-counting-phpunit-assertions&quot;&gt;Big project for counting PHPUnit Assertions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#big-project-for-counting-phpunit-assertions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next up is the big-sized project, it has both APIs and user interface. It has unit tests as well as some integration tests. This project has a whopping 5824 tests and 13975 PHPUnit assertions. When we run the above PHPUnit assertions counter command on this project’s tests folder it yields:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-assertions/04phpunit-assertions-count-large.jpg&quot; title=&quot;PHPUnit assertions count on a large project&quot; alt=&quot;PHPUnit assertions count on a large project&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;Even here, &lt;code&gt;assertEquals&lt;/code&gt; is still the most used PHPUnit assertion with 3145 occurrences.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That accounts for  22.5% of all asserts in the test suite. Next in line is &lt;code&gt;assertTrue&lt;/code&gt; which is used 942 times, making it get 6.74% of the pie. Let’s have a look at some more PHPUnit assertions that are very helpful but not that obvious.&lt;/p&gt;
&lt;h2 id=&quot;anatomy-of-phpunit-assertions&quot;&gt;Anatomy of PHPUnit assertions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#anatomy-of-phpunit-assertions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Assertions in PHPUnit follow a pattern, for instance, &lt;code&gt;assertEquals&lt;/code&gt; takes 3 arguments. The first one is &lt;code&gt;expected&lt;/code&gt;, the second one is &lt;code&gt;actual&lt;/code&gt;, and the third one which is optional but important is &lt;code&gt;message&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The message is printed when the test fails.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance the following test:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;check if 1 is 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will result in:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;There was &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; failure:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;FCQN::testAssertEqualsFail&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;check &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; is &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;Failed asserting that two strings are equal.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;--- Expected&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;+++ Actual&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;@@ @@&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;-&lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;+&lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;check if 1 is 1&lt;/code&gt;, these types of messages will be helpful when you debug which tests did not pass and how to fix them.&lt;/p&gt;
&lt;h2 id=&quot;some-phpunit-assertions-you-must-start-using-today&quot;&gt;Some PHPUnit assertions you must start using today &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#some-phpunit-assertions-you-must-start-using-today&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the past, I have used many PHPUnit assertions among the 60 odd available ones. Below are some of them which have been particularly useful:&lt;/p&gt;
&lt;h3 id=&quot;assertjsonstringequalsjsonstring&quot;&gt;assertJsonStringEqualsJsonString &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertjsonstringequalsjsonstring&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This PHPUnit assertion is very handy when testing APIs’ responses. You can use this &lt;code&gt;assertJsonStringEqualsJsonString&lt;/code&gt; assertion to check if the received JSON response matches what you were expecting it to be. To match the JSON string, you could do something like:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertJsonStringEqualsJsonString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;{&quot;message&quot;: &quot;ok&quot;}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token string double-quoted-string&quot;&gt;&quot;ok&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Check message ok json&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next one is about Regex matching.&lt;/p&gt;
&lt;h3 id=&quot;assertmatchesregularexpression-or-assertregexp&quot;&gt;assertMatchesRegularExpression or assertRegExp &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertmatchesregularexpression-or-assertregexp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the name sounds the assert will match for the regular expression. I have found it helpful to test error messages that begin with something or have a defined pattern. It was called &lt;code&gt;assertRegExp&lt;/code&gt; in PHPUnit &lt;a href=&quot;https://phpunit.readthedocs.io/en/8.5/assertions.html#assertregexp&quot;&gt;8.5&lt;/a&gt;. Below is an example which checks for string &lt;code&gt;Exception 40\d&lt;/code&gt; so 40 and any digit, the test below will as the test string is &lt;code&gt;Exception 501&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertRegExp&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;/Exception 40\d/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Exception 501&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Check if it is exception 40x&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next one is about strings.&lt;/p&gt;
&lt;h3 id=&quot;assertstringcontainsstring&quot;&gt;assertStringContainsString &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertstringcontainsstring&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is also a very handy assertion to check if a given string has another string. If you want to ignore the letter case you can use &lt;code&gt;assertStringContainsStringIgnoringCase&lt;/code&gt;. The &lt;code&gt;assertStringStartsWith&lt;/code&gt; and &lt;code&gt;assertStringEndsWith&lt;/code&gt; PHPUnit assertions are also very useful. Below is a quick example of the string contains the string:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertStringContainsString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Error id is required, the quote is required&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Check if word Error is present&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consequently, we have the ever-popular assert Equals PHPUnit assertion with a twist.&lt;/p&gt;
&lt;h3 id=&quot;assetequalswithdelta&quot;&gt;assetEqualsWithDelta &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assetequalswithdelta&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Another useful PHPUnit assertion is &lt;code&gt;assertEqualsWithDelta&lt;/code&gt;. When you have a test where some variance is expected this assertion is super useful. Below is an example:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertEqualsWithDelta&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;34.3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;34.1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;0.5 degree variance in temperature is allowed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Subsequently, we have a PHPUnit assertion that is related to PHP arrays.&lt;/p&gt;
&lt;h3 id=&quot;assertarrayhaskey&quot;&gt;assertArrayHasKey &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#assertarrayhaskey&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;assertArrayHasKey&lt;/code&gt; assertion in PHPUnit is also very helpful. If you are using arrays are return types then you can use this assertion to check if the returned array has a certain key before checking the value. Below is an example of this practical PHPUnit assertion:&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;testAssertArrayHasKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token variable&quot;&gt;$exchangeRates&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;usd&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.77&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;euro&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0.63&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertArrayHasKey&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;usd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$exchangeRates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Check if USD is available&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token variable&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0.77&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token variable&quot;&gt;$exchangeRates&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;usd&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string single-quoted-string&quot;&gt;&#39;Test if USD rate is 0.77&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can view all the 5 PHPUnit assertions’ examples in this &lt;a href=&quot;https://gist.github.com/geshan/75153b39e6277dd8ece4048cf1d44ae5&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You can find a list of PHPUnit assertions in this &lt;a href=&quot;https://gist.github.com/briankip/35e3506be8b1ecbcf3bb&quot;&gt;list&lt;/a&gt; too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Before wiring up 2 or 3 PHPUnit assertions please do check on the &lt;a href=&quot;https://phpunit.readthedocs.io/en/9.5/assertions.html&quot;&gt;docs&lt;/a&gt; if there is any existing assertion that suits your use case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per need, you can also write your &lt;a href=&quot;https://matthiasnoback.nl/2012/02/phpunit-writing-a-custom-assertion/&quot;&gt;custom assertion&lt;/a&gt;. Happy PHPUnit testing!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Node.js Postgresql tutorial: Build a simple REST API with Express step-by-step</title>
		<link href="https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/"/>
		<updated>2021-01-01T10:15:35Z</updated>
		<id>https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/</id>
		<content type="html">&lt;p&gt;Node.js can be used efficiently with relational databases like PostgreSQL. In this post about Node.js PostgreSQL tutorial, we are going to build a REST API for Quotes step-by-step using Express Js.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/01nodejs-postgres-tutorial.jpg&quot; title=&quot;Node.js postgresql tutorial to build a quotes REST API using Express step-by-step&quot; alt=&quot;Node.js postgresql tutorial to build a quotes REST API using Express step-by-step&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;nav class=&quot;toc&quot;&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#steps-for-node.js-postgresql-tutorial&quot;&gt;Steps for Node.js PostgreSQL tutorial&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#setup-express-with-express-generator&quot;&gt;Setup Express with express generator&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#delete-the-public-folder&quot;&gt;Delete the public folder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#delete-unnecessary-existing-routes-then-create-a-new-route-for-quotes&quot;&gt;Delete unnecessary existing routes then create a new route for quotes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#change-index-route-to-give-out-json&quot;&gt;Change index route to give out JSON&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#setup-postgresql-with-quote-table&quot;&gt;Setup PostgreSQL with quote table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#link-node.js-with-postgres&quot;&gt;Link Node.js with Postgres&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#show-quotes---get-api-with-pagination&quot;&gt;Show Quotes - GET API with pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#save-a-new-quote---post-api-for-node.js-postgresql-tutorial&quot;&gt;Save a new quote - POST API for Node.js PostgreSQL tutorial&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#adding-validation-for-creating-quotes-post-api&quot;&gt;Adding validation for creating quotes POST API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#tldr%3B-quick-rundown&quot;&gt;TLDR; quick rundown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/nav&gt;
&lt;p&gt;You can read my previous tutorial to try &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;Node.js with MySQL&lt;/a&gt;. You should read this guide to use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Docker with Node.js&lt;/a&gt;, it is also a step-by-step guide. You can, of course, carry on with this Node.js with PostgreSQL tutorial :).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For your convinience, each step has been carved out as a distinct pull reqeust so that you can follow the tutorial with ease.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You have Node.js (preferably Node 14.x) installed and running on your machine (or Node.js running with a docker container).&lt;/li&gt;
&lt;li&gt;You are aware of how Node.js generally works and also have a bit of Express Js experience.&lt;/li&gt;
&lt;li&gt;Having some knowledge of Git and GitHub will be really useful.&lt;/li&gt;
&lt;li&gt;For the database we will use a free database on &lt;a href=&quot;https://www.elephantsql.com/&quot;&gt;ElephantSQL&lt;/a&gt;, so please register and set up a free PostgreSQL database there. Of course, you should know how a relational database works.&lt;/li&gt;
&lt;li&gt;You are able to code using an IDE. I will be using VS Code as an editor but you are free to use any code editor of your choice for this Node.js PostgreSQL tutorial.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;steps-for-node.js-postgresql-tutorial&quot;&gt;Steps for Node.js PostgreSQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#steps-for-node.js-postgresql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will be building a very simple REST API with Express Js that can send out some quotes. A quick refresher on what &lt;a href=&quot;https://www.mulesoft.com/resources/api/what-is-rest-api-design&quot;&gt;REST APIs&lt;/a&gt; are would be greatly helpful at this point.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It will be great to read about HTTP verbs and brush up on some cURL commands too. We will be using cURL to run the examples.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At this juncture, we believe that your Node.js is running fine. So let’s start with setting up Express js:&lt;/p&gt;
&lt;h3 id=&quot;setup-express-with-express-generator&quot;&gt;Setup Express with express generator &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#setup-express-with-express-generator&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To step Express js with &lt;a href=&quot;https://expressjs.com/en/starter/generator.html&quot;&gt;express-generator&lt;/a&gt; run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx express-generator --no-view --git nodejs-postgresql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--no-view&lt;/code&gt; parameter tells the generator to generate the Express app without any view like Pug. The other &lt;code&gt;--git&lt;/code&gt; parameter indicates that we want to add the default &lt;code&gt;.gitignore&lt;/code&gt; file in our Express app.&lt;br /&gt;
It will create the needed files in &lt;code&gt;nodesj-postgresql&lt;/code&gt; directory. Your express will be set up when the command runs successfully. To quickly check if Express is setup correctly run the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; nodejs-posgresql &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs-posgresql:* &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see something similar on your browser when you hit &lt;code&gt;http://localhost:3000&lt;/code&gt; on it:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/02express.jpg&quot; title=&quot;Express running on local at port 3000&quot; alt=&quot;Express running on local at port 3000&quot; /&gt;
&lt;p&gt;The generated barebones Express Js app can be viewed in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/1/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;delete-the-public-folder&quot;&gt;Delete the public folder &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#delete-the-public-folder&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Because we are building a REST API for quotes for this Node.js PostgreSQL tutorial we don’t need any CSS or JS. Therefore, we will delete the generated &lt;code&gt;public&lt;/code&gt; folder as we will deal with JSON.&lt;/p&gt;
&lt;p&gt;To delete the generated public folder execute the following on your terminal:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf public&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;delete-unnecessary-existing-routes-then-create-a-new-route-for-quotes&quot;&gt;Delete unnecessary existing routes then create a new route for quotes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#delete-unnecessary-existing-routes-then-create-a-new-route-for-quotes&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At this juncture, we will delete the unnecessary users&#39; route found in &lt;code&gt;routes/users.js&lt;/code&gt;. Consequently, we will add &lt;code&gt;routes/quotes.js&lt;/code&gt; file that will have the following content:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      page&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now, it will give a static output of only 1 quote as shown above. We will link up the quotes route in the &lt;code&gt;app.js&lt;/code&gt; file like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; cookieParser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cookie-parser&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;morgan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; indexRouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./routes/index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; quotesRouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./routes/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;dev&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;urlencoded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; extended&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cookieParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; indexRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quotesRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The changes on the above file are only on lines 7 and 18 where the users’ router has been replaced with the quotes one.&lt;/p&gt;
&lt;h4 id=&quot;change-index-route-to-give-out-json&quot;&gt;Change index route to give out JSON &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#change-index-route-to-give-out-json&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The last change in this step is on line 6 of &lt;code&gt;index.js&lt;/code&gt; file found in the root of the project. We will edit it to send out JSON in place of rendering a view. The file will look like before after this change:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET home page. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;alive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check all the changes made in this step in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/2/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To swiftly view the output of the above changes run the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs-postgresql:* &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then hit &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; on the browser tab, you will see something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/03quotes-static.jpg&quot; title=&quot;Quotes API with static output&quot; alt=&quot;Quotes API with static output&quot; /&gt;
&lt;p&gt;We will fetch the quotes from our PostgreSQL database in the next step.&lt;/p&gt;
&lt;h3 id=&quot;setup-postgresql-with-quote-table&quot;&gt;Setup PostgreSQL with quote table &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#setup-postgresql-with-quote-table&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We want to save you from the hassle of creating and maintaining a database locally on your machine. You can have a free PostgreSQL database on Elephant SQL with 20 MB data and 5 concurrent connections. It is more than enough for the purpose of this tutorial.&lt;/p&gt;
&lt;p&gt;To create the PostgreSQL database on &lt;a href=&quot;https://www.elephantsql.com/&quot;&gt;Elephant SQL&lt;/a&gt; after registering please follow this &lt;a href=&quot;https://www.elephantsql.com/docs/&quot;&gt;documentation&lt;/a&gt;. Create the free (tiny turtle) database in the data center of your choice. If you want to learn more about PostgreSQL follow this multi-part &lt;a href=&quot;https://www.elephantsql.com/blog/2017-02-24-databases-for-beginners-what-is-sql-what-is-postgresql.html&quot;&gt;tutorial&lt;/a&gt; on Elephant SQL.&lt;/p&gt;
&lt;p&gt;After that, to create the quote table run the following SQL in the “browser” section of the created database:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; SEQUENCE quote_id_seq &lt;span class=&quot;token keyword&quot;&gt;START&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; INCREMENT &lt;span class=&quot;token keyword&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;NO&lt;/span&gt; MINVALUE &lt;span class=&quot;token keyword&quot;&gt;NO&lt;/span&gt; MAXVALUE CACHE &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    id &lt;span class=&quot;token keyword&quot;&gt;bigint&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; nextval&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;quote_id_seq&#39;&lt;/span&gt;::regclass&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    quote &lt;span class=&quot;token keyword&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varying&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    author &lt;span class=&quot;token keyword&quot;&gt;character&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;varying&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    created_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    updated_at &lt;span class=&quot;token keyword&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;time&lt;/span&gt; zone &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here is how it looks on the Elephant SQL interface:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/04create-table-elephant-sql.jpg&quot; title=&quot;Create Quotes table on Elephant SQL interface&quot; alt=&quot;Create Quotes table on Elephant SQL interface&quot; /&gt;
&lt;p&gt;This is a very simple table with 5 columns. The first one is the &lt;code&gt;id&lt;/code&gt; which is a sequence and primary key. Then there are &lt;code&gt;quote&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt; both are variable characters.&lt;/p&gt;
&lt;p&gt;After that &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt; are both time stamps. There is a unique index added to the &lt;code&gt;quote&lt;/code&gt; column so that we don’t have the same quote more than once. After the table is created we will fill up some quotes in the &lt;code&gt;quote&lt;/code&gt; table executing the insert SQL below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;I&#39;&#39;m not a great programmer; I&#39;&#39;m just a good programmer with great habits.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Kent Beck&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Truth can only be found in one place: the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Robert C. Martin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;If you have to spend effort looking at a fragment of code and figuring out what it&#39;&#39;s doing, then you should extract it into a function and name the function after the &quot;what&quot;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Donald Knuth&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SQL, Lisp, and Haskell are the only programming languages that I’ve seen where one spends more time thinking than typing.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Philip Greenspun&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Deleted code is debugged code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jeff Sickel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;C.A.R. Hoare&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Simplicity is prerequisite for reliability.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Edsger W. Dijkstra&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two hard things in Computer Science: cache invalidation and naming things.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Phil Karlton&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Measuring programming progress by lines of code is like measuring aircraft building progress by weight.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bill Gates&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Controlling complexity is the essence of computer programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Brian Kernighan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The only way to learn a new programming language is by writing programs in it.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dennis Ritchie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you have inserted the 17 rows, if you run the following on the Elephant SQL browser interface:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see something similar to below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/05select-elephant-sql.jpg&quot; title=&quot;SELECT all from quote on Elephant SQL interface&quot; alt=&quot;SELECT all from quote on Elephant SQL interface&quot; /&gt;
&lt;p&gt;You can find the init database SQL file in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/3/files&quot;&gt;pull request&lt;/a&gt;. As our database is set up and ready let’s proceed to link it up with the Node.js Express application.&lt;/p&gt;
&lt;h3 id=&quot;link-node.js-with-postgres&quot;&gt;Link Node.js with Postgres &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#link-node.js-with-postgres&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To link up the Node.js Express Js application with the database that we have set up we will need to install the Postgres npm library. To get this useful library please run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save pg&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The changes we have got by installing this npm package are in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/4/files&quot;&gt;pull request&lt;/a&gt;. Time to proceed to add the GET quotes API route.&lt;/p&gt;
&lt;h3 id=&quot;show-quotes---get-api-with-pagination&quot;&gt;Show Quotes - GET API with pagination &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#show-quotes---get-api-with-pagination&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you go to &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; after starting the Express Js app, you can see something like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;quote&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;First, solve the problem. Then, write the code.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;John Johnson&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will replace this by fetching data from the PostgreSQL database on Elephant SQL. To do this, we will need to connect to the database.&lt;/p&gt;
&lt;p&gt;Let’s create a &lt;code&gt;config.js&lt;/code&gt; file on the root level. This config file has the database credentials and other configs like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; env &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* do not put password or any sensitive info here, done only for demo */&lt;/span&gt;&lt;br /&gt;    host&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_HOST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;otto.db.elephantsql.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    port&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;5432&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_USER&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cklijfef&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_PASSWORD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;V1qidES5k3DSJICDRgXtyT8qeu2SPCZp&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    database&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_NAME&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;cklijfef&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  listPerPage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LIST_PER_PAGE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Subsequently, we will need to add a &lt;code&gt;services/db.js&lt;/code&gt; file that will use a pool to run our SQL queries. It will look like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Pool &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;pg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Pool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/**&lt;br /&gt; * Query the database using the pool&lt;br /&gt; * @param {*} query &lt;br /&gt; * @param {*} params &lt;br /&gt; * &lt;br /&gt; * @see https://node-postgres.com/features/pooling#single-query&lt;br /&gt; */&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fields&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  query&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that we will add a &lt;code&gt;helper.js&lt;/code&gt; file on the root level that will help us format the results and calculate the offset for pagination. It will have the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;currentPage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; listPerPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentPage &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;emptyOrRows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getOffset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  emptyOrRows&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this juncture, we will add &lt;code&gt;services/quotes.js&lt;/code&gt; file which will have contents as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; helper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../helper&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;SELECT id, quote, author FROM quote OFFSET $1 LIMIT $2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emptyOrRows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All of this is glued from the routes file at &lt;code&gt;routes/quotes.js&lt;/code&gt; which after the change looks like:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main change here in the &lt;code&gt;routes/quotes.js&lt;/code&gt; file is the addition of quotes service. After that, the &lt;code&gt;/quotes&lt;/code&gt; is getting the quotes dynamically using the added quotes service.&lt;/p&gt;
&lt;p&gt;Please take note that the quotes are already paginated, meaning &lt;code&gt;https://localhost:3000/quotes?page=2&lt;/code&gt; will give out quotes 11-20 as it has 10 quotes per page in the config.js file. The output at this point for page 2 should look something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/06quotes-api-page-2.jpg&quot; title=&quot;Quotes on page 2 fetched dynamically from the database table&quot; alt=&quot;Quotes on page 2 fetched dynamically from the database table&quot; /&gt;
&lt;p&gt;Now let’s proceed to add the POST quote API which will insert a new quote on the database. As above, you can view all file changes for this step in this neatly organized &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/5/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;save-a-new-quote---post-api-for-node.js-postgresql-tutorial&quot;&gt;Save a new quote - POST API for Node.js PostgreSQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#save-a-new-quote---post-api-for-node.js-postgresql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create a new quote we will keep it a simple POST API. We will not use any validation library and keep the response codes as simple as possible.&lt;/p&gt;
&lt;p&gt;The first thing we will do for adding the save new quote endpoint is to add it to the &lt;code&gt;/routes/quotes.js&lt;/code&gt; file just above &lt;code&gt;module.exports = router&lt;/code&gt; line as shown below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* POST quotes */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while posting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the time being, we will not add any code level validation. The database table &lt;code&gt;quote&lt;/code&gt;  has the &lt;code&gt;quote&lt;/code&gt; field required and 255 characters. So, if the quote is empty it will get a database level error. Unlike MySQL, PostgreSQL will give an error if the quote is longer than 255 characters.&lt;/p&gt;
&lt;p&gt;In a more real-life scenario, I would recommend using a validation library for these kinds of cases. For now, let’s add the &lt;code&gt;create&lt;/code&gt; method in &lt;code&gt;/services/quotes.js&lt;/code&gt; like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;INSERT INTO quote(quote, author) VALUES ($1, $2) RETURNING *&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Error in creating quote&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Quote created successfully&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  create&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you run the server, you can try the following curl to see if it create a new quote:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i -X POST -H &lt;span class=&quot;token string&quot;&gt;&#39;Accept: application/json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    -H &lt;span class=&quot;token string&quot;&gt;&#39;Content-type: application/json&#39;&lt;/span&gt; http://localhost:3000/quotes &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    --data &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;quote&quot;:&quot;Before software can be reusable it first has to be usable2.&quot;,&quot;author&quot;:&quot;Ralph Johnson&quot;}&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It should come back with a 200 response saying the quote has been created. You can try other quotes from this &lt;a href=&quot;https://dzone.com/articles/best-programming-jokes-amp-quotes&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the create quote POST API working. You can easily build upon it to create the edit and the delete quote endpoints with respective &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; SQL statements. Just be careful to pass the right id to carry out those operations.&lt;/p&gt;
&lt;p&gt;Similar to the previous steps, all the code changes for this step can be found in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/6/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;adding-validation-for-creating-quotes-post-api&quot;&gt;Adding validation for creating quotes POST API &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#adding-validation-for-creating-quotes-post-api&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Till now it should be functional but we should not push validation to the database layer as it will be more resource expensive. So in the next part of this step, we will add validation on the code level.&lt;/p&gt;
&lt;p&gt;We will add a &lt;code&gt;validateCreate&lt;/code&gt; method above &lt;code&gt;create&lt;/code&gt; method in &lt;code&gt;/services/quotes.js&lt;/code&gt; to do the validation like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; messages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;No object is provided&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote cannot be longer than 255 characters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Author name cannot be longer than 255 characters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;INSERT INTO quote(quote, author) VALUES ($1, $2) RETURNING *&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Error in creating quote&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Quote created successfully&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now if you try the below cURL without an author, when the server is running it will show an error:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i -X POST -H &lt;span class=&quot;token string&quot;&gt;&#39;Accept: application/json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    -H &lt;span class=&quot;token string&quot;&gt;&#39;Content-type: application/json&#39;&lt;/span&gt; http://localhost:3000/quotes &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    --data &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;quote&quot;:&quot;Before software can be reusable it first has to be usable.&quot;}&#39;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/07validation-working.jpg&quot; title=&quot;Creating a quote without author will give a validation error&quot; alt=&quot;Creating a quote without author will give a validation error&quot; /&gt;
&lt;p&gt;These changes are also reflected in a &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/7/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On dev, I would highly recommend using &lt;a href=&quot;https://nodemon.io/&quot;&gt;Nodemon&lt;/a&gt; as it will restart the server on every file change.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After you have &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; installed globally you can run the app with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs-postgresql:* nodemon bin/www &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nodemon is great for development.&lt;/p&gt;
&lt;h2 id=&quot;tldr%3B-quick-rundown&quot;&gt;TLDR; quick rundown &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#tldr%3B-quick-rundown&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the code shown above is in a public &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;GitHub repository&lt;/a&gt;, to quickly get started with what has already been built you can follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository with: &lt;code&gt;git clone git@github.com:geshan/nodejs-posgresql.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then run &lt;code&gt;cd nodejs-postgresql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Subsequently, execute: &lt;code&gt;npm install &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that, hit: &lt;code&gt;https://localhost:3000/quotes&lt;/code&gt; on your favorite browser&lt;/li&gt;
&lt;li&gt;You should see the following on your browser:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-postgresql-tutorial/08quotes-page-1.jpg&quot; title=&quot;Quotes on page 1&quot; alt=&quot;Quotes on page 1&quot; /&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Setting up a REST API with Node.js and PostgreSQL was pretty fun till now. Still, it is more like scratching the surface. You can use the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;GitHub repo&lt;/a&gt; as a boilerplate to create simple REST APIs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This tutorial is a great starting point to build a full-on real-life REST API. I hope you can use this as commencement of something exciting. Best of luck!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>Recap 2020: Review of the year with blogging, a side project, and other things</title>
		<link href="https://geshan.com.np/blog/2020/12/recap-review-2020/"/>
		<updated>2020-12-20T11:45:35Z</updated>
		<id>https://geshan.com.np/blog/2020/12/recap-review-2020/</id>
		<content type="html">&lt;p&gt;This is the second time I am writing a year in review, the first one was for a &lt;a href=&quot;https://geshan.com.np/blog/2019/12/2019-year-in-review/&quot;&gt;recap of 2019&lt;/a&gt;. The year 2020 has been chaotic, to say the least. With COVID 19 turning out to be a mild world war 3, everyone had a fair share of this disorder and new normal. In this post, I am going to discuss the professional and technical things I accomplished in 2020.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/01recap-2020.jpg&quot; title=&quot;A recap of professional things I accomplised in 2020 including blogging, a side projecat, and some other things&quot; alt=&quot;A recap of professional things I accomplised in 2020 including blogging, a side projecat, and some other things&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;highlights&quot;&gt;Highlights &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#highlights&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;My interview got published on &lt;a href=&quot;https://developersnepalnewsletter.substack.com/p/issue1-inspirational-developer-journey&quot;&gt;Developers Nepal’s Newsletter&lt;/a&gt; volume 1&lt;/li&gt;
&lt;li&gt;Successfully migrated this blog from Octopress 2.0 to Eleventy 0.10 - here is the &lt;a href=&quot;https://github.com/geshan/geshan.github.com/pull/146/files&quot;&gt;pull request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Deployed a pet project with helping hands from almost 2 dozen people - &lt;a href=&quot;https://autechjobs.ml/&quot;&gt;Au Tech Jobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Before I took a social media break, a tweet thread I did in May-2020 about “How to run your side project for exactly $0 a month” gathered 36+ retweets and almost 60 likes.&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/02leaf.jpg&quot; title=&quot;Sum up the highlights of 2020&quot; alt=&quot;Sum up the highlights of 2020&quot; /&gt;
&lt;h2 id=&quot;featured&quot;&gt;Featured &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#featured&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This year I got interviewed only once. At least I have 1 interview to share. I was asked to appear for a couple of interviews/panel discussions for youtube channels but I didn’t do it due to some reasons.&lt;/p&gt;
&lt;h3 id=&quot;interview-developers-nepal-newsletter&quot;&gt;Interview Developers Nepal newsletter &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#interview-developers-nepal-newsletter&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When &lt;a href=&quot;http://www.bibekshrestha.com/&quot;&gt;Bibek Shrestha&lt;/a&gt; (not the one from Kandara :) band) asked me to do an interview for the first Developers Nepal newsletter I said yes. I got his email about it in mid-Aug (it was winter here then) and my interview was published on Nov 2 (almost summer here).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, big thanks to Aviskar and the team to condense the over ranting into something concise and readable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&quot;https://developersnepalnewsletter.substack.com/p/issue1-inspirational-developer-journey&quot;&gt;interview&lt;/a&gt; I believe has set the tone right for the newsletter. The second interview of &lt;a href=&quot;https://developersnepalnewsletter.substack.com/p/issue2-a-published-author-and-technology&quot;&gt;Anita Sharma&lt;/a&gt; is also out recently.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/10interview.jpg&quot; title=&quot;My interview on the first editon of Developers Nepal Newsletter&quot; alt=&quot;My interview on the first editon of Developers Nepal Newsletter&quot; /&gt;
&lt;h2 id=&quot;blogging-and-writing&quot;&gt;Blogging and writing &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#blogging-and-writing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In terms of the number of posts, this year 2020 has been the highest.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have written 24 blog posts and with this recap, it will be 25.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The year started with a post on the “Difference between backend, frontend, full-stack, and super stack development” which turned out to be the most popular post of 2020.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/03book.jpg&quot; title=&quot;Most popular blog posts of 2020&quot; alt=&quot;Most popular blog posts of 2020&quot; /&gt;
&lt;p&gt;Let’s look at other posts published this year that have gathered a good amount of views and read:&lt;/p&gt;
&lt;h3 id=&quot;most-viewed-blog-posts&quot;&gt;Most viewed blog posts &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#most-viewed-blog-posts&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Below are the most viewed posts of 2020 for the blog posts published in 2020 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/02/difference-between-backend-frontend/&quot;&gt;Difference between backend, frontend, full-stack and super stack development&lt;/a&gt; - Feb 2020&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;How to use Docker with Node.js a step-by-step tutorial&lt;/a&gt; - Nov 2020&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/06/pair-programming-benefits-for-your-team/&quot;&gt;5 benefits of pair programming you should know about&lt;/a&gt; - Jun 2020&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/&quot;&gt;Docker build example: how to go from slow to fast docker builds&lt;/a&gt; - Oct 2020&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/09/vegeta-load-testing-primer-with-examples/&quot;&gt;Vegeta load testing a quick primer with GET examples&lt;/a&gt; - Sep 2020&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looks like when I write about docker it gets popular :). I have been a bit cautious about cross-posting this year for a better SEO strategy. I have cross-posted to &lt;a href=&quot;https://geshan.com.np/blog/2018/12/5-tech-medium-publications-software-engineers-should-strive-to-write-for/&quot;&gt;tech Medium publications&lt;/a&gt;, Hackernoon, and &lt;a href=&quot;http://dev.to/&quot;&gt;dev.to&lt;/a&gt;. I have been deliberately slow to crosspost after September to gather some more SEO juice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have been lucky enough to get my posts published on &lt;a href=&quot;https://medium.com/dailyjs/node-js-mysql-tutorial-a-step-by-step-getting-started-guide-with-express-js-rest-api-287858df4e8d&quot;&gt;Daily Js&lt;/a&gt; (108K followers) and &lt;a href=&quot;https://medium.com/javascript-in-plain-english/5-important-reasons-to-choose-node-js-for-your-microservices-5744ec55f4b2&quot;&gt;JavaScript in Plain English&lt;/a&gt; (40K followers) publications on medium.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have also published a couple of my posts on &lt;a href=&quot;https://medium.com/quick-code/working-as-a-software-engineer-on-internal-product-vs-a-customer-facing-one-in-e-commerce-companies-644d70e4438d&quot;&gt;Quick Code&lt;/a&gt; (12K followers) and my work’s tech blog.&lt;/p&gt;
&lt;h3 id=&quot;moved-blog-to-eleventy-from-octopress&quot;&gt;Moved blog to Eleventy from Octopress &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#moved-blog-to-eleventy-from-octopress&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In March 2020 I moved my blog from Octopress to Eleventy. Octopress 2.x I can say is in a coma if not dead. I evaluated other options Hugo was one of them but &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;Eleventy&lt;/a&gt; was a clear winner. It is simple yet super powerful.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/04eleventy.jpg&quot; title=&quot;Moved blog to Eleventy  on Mar 2020&quot; alt=&quot;Moved blog to Eleventy  on Mar 2020&quot; /&gt;
&lt;p&gt;My previous blogging software was limiting me as it took a long time to compile the markdown to HTML (CSS + JS of course). Now with Eleventy, that process takes seconds not minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With this ease I have been much better and faster at blogging than before.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I did not change the theme, not even the colors. Eleventy is a lot faster to compile the markdown to HTML (CSS + JS). To make things JAM Stack I have added the most popular posts on the homepage. It comes from an API and the posts are pulled in on build time. I also use &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry&lt;/a&gt; to edit it on the fly now.&lt;/p&gt;
&lt;h3 id=&quot;blog-posts-target---14-posts%2C-reached-24-%3A)&quot;&gt;Blog posts target - 14 posts, reached 24 :) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#blog-posts-target---14-posts%2C-reached-24-%3A)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For this year I exceeded my target on the no. of blog posts. I hope I can do it in 2021 too. I had set a yearly goal for 2020 to write 14 blog posts and a recap. Basically at least a post a month. I ended up doing 24 blog posts and this recap, making the total 25. Here is the breakdown by month:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feb - 1&lt;/li&gt;
&lt;li&gt;Apr - 3&lt;/li&gt;
&lt;li&gt;Jun - 1&lt;/li&gt;
&lt;li&gt;Aug - 1&lt;/li&gt;
&lt;li&gt;Sep - 5&lt;/li&gt;
&lt;li&gt;Oct - 5&lt;/li&gt;
&lt;li&gt;Nov - 6&lt;/li&gt;
&lt;li&gt;Dec - 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Till August I had only 6 posts but Sep to Dec I pushed the tempo really up. As of Aug, I might have just reached my target of 14 posts. In the last quarter, I really pushed hard to get more content out. That brings us to the next segway of posting out good content consistently.&lt;/p&gt;
&lt;h3 id=&quot;alexa-top-1-million-websites&quot;&gt;Alexa top 1 million websites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#alexa-top-1-million-websites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First time in my life, I saw my blog make it to the &lt;a href=&quot;https://www.alexa.com/siteinfo/geshan.com.np&quot;&gt;top 1 million websites&lt;/a&gt; in the world as tracked by Alexa. It entered the top 1 million race around mid-Sep at 748K mark and climbed up to 520K. Then it tumbled down to the 735K range in Dec and stayed there.&lt;/p&gt;
&lt;p&gt;Probably it will go out of the top 1 million but this is already a great achievement considering:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are around &lt;a href=&quot;https://hostingtribunal.com/blog/how-many-websites/&quot;&gt;400 million active websites&lt;/a&gt; out of the 2 billion or more registered domain names. Basically being on the top 1 million puts your website at the top 0.25% of websites in the world which is not bad at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And FYI my blog does not get a tonne of traffic + it runs for exactly $0 a month.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/05alexa.jpg&quot; title=&quot;This blog ranks on top 1 million websites in Alexa&quot; alt=&quot;This blog ranks on top 1 million websites in Alexa&quot; /&gt;
&lt;h2 id=&quot;side-project&quot;&gt;Side project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#side-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Similar to 2019, this year as well I focused on only 1 side project. The side project is &lt;a href=&quot;https://autechjobs.ml/&quot;&gt;AU Tech Jobs&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/06autechjobs.jpg&quot; title=&quot;AU Tech Jobs homepage&quot; alt=&quot;AU Tech Jobs homepage&quot; /&gt;
&lt;h3 id=&quot;au-tech-jobs&quot;&gt;AU Tech Jobs &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#au-tech-jobs&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We soft-launched AU Tech Jobs on Aug 3 and till now almost 2 dozen people helped build it in one way or the other. The &lt;a href=&quot;https://app.autechjobs.ml/&quot;&gt;AU Tech Jobs App&lt;/a&gt; does not have a lot of users but we think it is benefiting users getting 1300+ jobs from 50+ companies in one place.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/07autechjobs-app.jpg&quot; title=&quot;AU Tech Jobs app homepage&quot; alt=&quot;AU Tech Jobs app homepage&quot; /&gt;
&lt;p&gt;Most people contributed code to this platform which includes me. Other people like Ansubha helped manage the social media side of things for this side project I tried to lead.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want to heartily thank each and everyone who helped build up this side project. Thanks again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I would highly recommend do only one side project at a time and get it across the line. It is not a good idea to have 2 or 3 running at the same time. As none of them is in a production-ready state.&lt;/p&gt;
&lt;h2 id=&quot;misc---everything-else&quot;&gt;Misc - everything else &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#misc---everything-else&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some points that I remember:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I helped more people find full-time tech jobs this year too. I helped a couple guys find a better second full-time tech job. I hope they will thank me and not forget the boat after crossing the river ;).&lt;/li&gt;
&lt;li&gt;My &lt;a href=&quot;https://twitter.com/geshan/status/1265426642547048448&quot;&gt;most popular tweet of 2020&lt;/a&gt; garnered 40 retweets (including quotes) and almost 60 likes. A screenshot is below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/08tweet.jpg&quot; title=&quot;My most popualr tweet of 2020&quot; alt=&quot;My most popualr tweet of 2020&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;I took a &lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/&quot;&gt;social media break&lt;/a&gt; from Oct 2020 and it is still going on. I might carry it on for 2021 too.&lt;/li&gt;
&lt;li&gt;It is said that I won the “&lt;a href=&quot;https://noonies.tech/award/cicd-writer-of-the-year&quot;&gt;CI/CD writer of the Year&lt;/a&gt;” award at Noonies.tech run by Hackernoon. I was a runner up in the &lt;a href=&quot;https://noonies.tech/award/hacker-noon-contributor-of-the-year-serverless&quot;&gt;serverless&lt;/a&gt; category too. Congrats to &lt;a href=&quot;https://gmrsagar.github.io/&quot;&gt;Sagar&lt;/a&gt; for winning the serverless category. Also Milap for winning the &lt;a href=&quot;https://noonies.tech/award/hacker-noon-contributor-of-the-year-computer-science&quot;&gt;Computer Science&lt;/a&gt; category. Good to see Nepalis winning.&lt;/li&gt;
&lt;li&gt;I did not do any public speaking, even virtual ones. I didn’t even attend any virtual meetups. Public speaking for me is connecting to the audience best done in person. With this COVID situation is it not possible. I did a lightning talk on learning day at my workplace THE ICONIC about setting up a blog and how to SEO optimize posts. The first slide is below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2020/09blog-seo.jpg&quot; title=&quot;Only talk of the year on Blog and SEO&quot; alt=&quot;Only talk of the year on Blog and SEO&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;I was promoted to Lead Software Engineer circa Sep/Oct-2020.&lt;/li&gt;
&lt;li&gt;I started using slack a bit more outside of work. It is a great place to learn and network. Among others &lt;a href=&quot;https://xplorers.slack.com/&quot;&gt;Xplorers Slack&lt;/a&gt; group is Amazing. They also run the great &lt;a href=&quot;https://knowledgeacademy.io/&quot;&gt;Knowledge Academy blog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/recap-review-2020/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This year had its ups and downs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing that it taught us all is probably being resilient in adverse times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope we all get to see a better 2021.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Software Resilience: 7 must-have factors for healing from the unexpected</title>
		<link href="https://geshan.com.np/blog/2020/12/software-resilience/"/>
		<updated>2020-12-17T11:45:35Z</updated>
		<id>https://geshan.com.np/blog/2020/12/software-resilience/</id>
		<content type="html">&lt;p&gt;Software resilience is a must-have quality for any software that is scalable, performant, and fault-tolerant.&lt;/p&gt;
&lt;p&gt;The ability of software to heal from unexpected events is software resilience. This means a software engineer has to anticipate unexpected events and account for them. The solution for creating this fault tolerance can be in code or on the infrastructure layer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Distributed systems will fail, a resilient software system will not try to avoid failure but expect it and respond gracefully.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post, we will look into some aspects that you need to be careful to have software resilience.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-resilience/01software-resilience.jpg&quot; title=&quot;Software resilience factors to consider&quot; alt=&quot;Software resilience  factors to consider to heal from the unexpected&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#what-is-software-resilience&quot;&gt;What is software resilience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#resilient-software-factors&quot;&gt;Resilient software factors&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#gradual-rollout%2Fdeploy&quot;&gt;Gradual rollout/deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#retry-for-software-resilience&quot;&gt;Retry for software resilience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#timeouts-for-resilient-software&quot;&gt;Timeouts for resilient software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#fallback&quot;&gt;Fallback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#idempotent-operations-enable-software-resilience&quot;&gt;Idempotent operations enable software resilience&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#database-transaction&quot;&gt;Database transaction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#rate-limiting&quot;&gt;Rate limiting&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#other-things-to-consider&quot;&gt;Other things to consider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-is-software-resilience&quot;&gt;What is software resilience &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#what-is-software-resilience&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software Engineering Institute &lt;a href=&quot;https://insights.sei.cmu.edu/sei_blog/2019/11/system-resilience-what-exactly-is-it.html&quot;&gt;blog&lt;/a&gt; of Carnegie Mellon University indicates:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Basically, a system is resilient if it continues to carry out its mission in the face of adversity (i.e., if it provides required capabilities despite excessive stresses that can cause disruptions). Being resilient is important because no matter how well a system is engineered, reality will sooner or later conspire to disrupt the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If a software system is able to function even partially well when unexpected events occur that is software resilience. On an infrastructure level, there is the infamous &lt;a href=&quot;https://netflix.github.io/chaosmonkey/&quot;&gt;Chaos Monkey&lt;/a&gt; by NetFlix. Chaos Monkey goes into your production environment and randomly starts killing instances. This acts as a stress test for your software resilience.&lt;/p&gt;
&lt;p&gt;Software resilience is also affected by the blast radius. If the change is low risk in terms of the radius it can cover it is easier to go on with the change. If the blast radius is very big you might need to think of other things too.&lt;/p&gt;
&lt;h2 id=&quot;resilient-software-factors&quot;&gt;Resilient software factors &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#resilient-software-factors&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple factors that are part of the software resilience equation. Below are some that I have had experience within my more than a decade long software engineering career.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The examples mentioned below will be related to E-commerce as I have worked in fashion E-commerce for almost 9 years now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s get started.&lt;/p&gt;
&lt;h3 id=&quot;gradual-rollout%2Fdeploy&quot;&gt;Gradual rollout/deploy &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#gradual-rollout%2Fdeploy&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A gradual rollout or deployment is the ability to give access to a release in parts. It may be canary deployment or blue green deployment or just a feature flag or even a rolling deployment. You can read more about these &lt;a href=&quot;https://opensource.com/article/17/5/colorful-deployments&quot;&gt;deployment techniques&lt;/a&gt; in a colorful way.&lt;/p&gt;
&lt;p&gt;The point here is, even if this is a manual task it is very important for resilient software. Imagine this, you are changing the Payment gateway for an e-commerce website. If you do a big bang 100% of the transactions go from the former Payment gateway A to the New payment gateway B you will land in deep trouble.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But, if you can try out like 1% of the customers for 1 week, smoothen out any bugs with the new gateway integration it helps a lot and the blast radius is just 1% of the transactions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Slowly week by week you can go from 1 to 5 then to 10 and finally to 100 with full confidence. The same logic goes on having a &lt;a href=&quot;https://microservices.io/patterns/observability/health-check-api.html&quot;&gt;health check&lt;/a&gt; when deploying. If the health check fails the deployment is automatically rolled back. Depending on the services, you can even do a gradual rollout meaning this particular version only get 2% of the traffic. &lt;a href=&quot;https://cloud.google.com/run/docs/rollouts-rollbacks-traffic-migration&quot;&gt;Gradual rollout&lt;/a&gt; is supported by services like &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot;&gt;Google Cloud run&lt;/a&gt; on the infrastructure layer not the code layer.&lt;/p&gt;
&lt;p&gt;Another important consideration for resilient software is a &lt;a href=&quot;https://geshan.com.np/blog/2018/10/deployment-is-not-release/&quot;&gt;deployment is not a release&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;retry-for-software-resilience&quot;&gt;Retry for software resilience &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#retry-for-software-resilience&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;If you call another system you always need to expect they might fail. So a retry mechanism helps in this case. For instance, you are calling a product review service to create a new product review.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If it fails to create the review you could easily retry 1 or 2 times more to get a successful response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A very simple curl example is below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i --retry &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; http://httpbin.org/status/500&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The curl here is always going to retry 3 times as it will get a 500 error back. The curl below will only run once as it will get at 200 back on the first try:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i --retry &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; http://httpbin.org/status/200&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A retry is a simple but effective way to make the software more resilient.&lt;/p&gt;
&lt;h3 id=&quot;timeouts-for-resilient-software&quot;&gt;Timeouts for resilient software &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#timeouts-for-resilient-software&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;External systems can be slow and you don&#39;t have control over their response times. This can in turn makes the systems you develop slow. Once we were integrating with a &amp;quot;popular&amp;quot; courier service. Unfortunately, their response time to create a shipment was in seconds not milliseconds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We tackled this with an optimum timeout and pushing the task async where possible. This really helps keep software resilience intact.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This unblocked the person doing quality checks and putting the items in a box to be shipped to the customer. While the box was traveling from the QC station to the packing station the shipment would be created and the shipping label could be printed. Even though it took some seconds for the box to go from QC to the packing station it was enough for us to create the shipment. If some shipments failed there was an easy option to retry that would call the courier on demand.&lt;/p&gt;
&lt;p&gt;The moral of the story, always add relevant timeouts and fail fast. As per need give a way for the user to retry manually when needed. Timeouts are very &lt;a href=&quot;https://itnext.io/why-i-like-go-http-client-as-a-java-developer-676ea1e698b4&quot;&gt;important&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;fallback&quot;&gt;Fallback &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#fallback&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Fallback is a very simple concept. If the main thing does not work use the backup. The main thing in the case of a web system can be a response from an API. So if your API call fails even after some retries you can fall back to a local copy of the response.&lt;/p&gt;
&lt;p&gt;Another example in terms of pure code can be as simple as:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; shippingFee &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fees&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shipping &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; fees&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;shipping&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10.00&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code snippet, it looks for &lt;code&gt;fees.shipping&lt;/code&gt; if that is not available it falls back to the value of 10.00. We could implement the same thing to an API call, if we don’t get the desired result from the API call it will gracefully degrade to using the default value.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fallbacks seem very obvious but at times I have seen them being forgotten or omitted.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This can cause problems for high traffic systems.&lt;/p&gt;
&lt;h3 id=&quot;idempotent-operations-enable-software-resilience&quot;&gt;Idempotent operations enable software resilience &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#idempotent-operations-enable-software-resilience&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;One &lt;a href=&quot;https://stackoverflow.com/a/1077421/112849&quot;&gt;stack overflow&lt;/a&gt; answer sums it up well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, an idempotent operation is one that has no additional effect if it is called more than once with the same input parameters.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In real life, it is like that stop button on the bus. You press it once or 100 times after the stop sign is lit, it has the same result to indicate the bus driver to stop at the next bus stop. For instance, a GET operation in an API is Idempotent. This is important in designing resilient systems, let me explain with an example.&lt;/p&gt;
&lt;p&gt;You are designing an API to mark a message as read.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Regardless of how many times the API is called to mark that single message as read, the first one will set it from unread to read and all the others won’t change the state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is an easy to understand example of idempotency. When making your systems resilient you can safely ignore the second and later requests preserving your resources.&lt;/p&gt;
&lt;h3 id=&quot;database-transaction&quot;&gt;Database transaction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#database-transaction&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The simplest way to understand &lt;a href=&quot;https://www.tutorialspoint.com/dbms/dbms_transaction.htm&quot;&gt;database transactions&lt;/a&gt; is &lt;code&gt;all or nothing&lt;/code&gt;. If you have 3 steps to complete a task and there is an issue in step 2 it will rollback the whole operation.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A classic example is a money transfer between 2 bank accounts, either it goes through in full or nothing happens.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There should not be a case where the money is deducted from account A but not added to account B. Database transactions are very important for consistent data.&lt;/p&gt;
&lt;p&gt;With good use of &lt;a href=&quot;https://www.geeksforgeeks.org/transaction-isolation-levels-dbms/&quot;&gt;isolation levels&lt;/a&gt;, we can use database transactions to counter race conditions. For instance, 20 records are to be updated by a cron and a flag called &lt;code&gt;synced&lt;/code&gt; will be set to true if the rows are successfully synced with another system like an ERP. It can be done in the following steps to avoid another cron doing the same task at the same time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare for the underlying task like sync those rows with an Enterprise Resource Planning (ERP) software&lt;/li&gt;
&lt;li&gt;Start a database transaction&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT  … FOR UPDATE&lt;/code&gt; with isolation level read committed and longer timeout than usual for the session&lt;/li&gt;
&lt;li&gt;Sync the rows with the ERP&lt;/li&gt;
&lt;li&gt;Set the synced flag to 1 for selected rows  with an update query&lt;/li&gt;
&lt;li&gt;Commit the transaction&lt;/li&gt;
&lt;li&gt;If there is any problem, roll back the whole transaction&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, in the above case if step 4 fails the transaction will be rolled back. While the rows are locked with a select for update another cron will not be able to read it as it is locked for UPDATE and is done with isolation level read committed.&lt;/p&gt;
&lt;p&gt;This helps in creating fault-tolerant and resilient software by stopping the same rows to be synced twice. If another cron even by mistake runs while the first one is running it will wait for those rows to be free to be read by the new SELECT … FOR UPDATE query.&lt;/p&gt;
&lt;h3 id=&quot;rate-limiting&quot;&gt;Rate limiting &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#rate-limiting&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;By now you have surely found out that for software to be more resilient it needs to use the resources optimally. This rate-limiting factor is saving our resources from misuse. For instance, &lt;a href=&quot;https://developer.twitter.com/en/docs/twitter-api/v1/tweets/timelines/&quot;&gt;Twitter API&lt;/a&gt; rate limits call. Let&#39;s take an example of &lt;code&gt;/statuses/user_timeline&lt;/code&gt; on the Twitter API, it says “900 requests/15-min window (user-auth)” and “100,000 requests/24-hour window (application level)”. So if as a consumer you do more than 900 calls to get statues by a user there will be a response with status code 429.&lt;/p&gt;
&lt;p&gt;The same principles must be practiced when you develop APIs even if they are consumed by other internal services. Let’s assume if one of the other internal services has a misconfigured infinite loop your service will come down when it starts hitting your service frantically.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you have a good rate-limiting in place the other service will start seeing errors early and they can fix the problem quicker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On your end, your service doesn’t gobble up resources as well as keeps things sane by failing faster.&lt;/p&gt;
&lt;h2 id=&quot;other-things-to-consider&quot;&gt;Other things to consider &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#other-things-to-consider&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For better software resilience there are many other things to consider. A database read-write segregation is a good practice. Where there is one master database for mainly writing and multiple read replicas.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this case, the bulk of the operation which is read is load-balanced between the read replicas and the master node gets the write.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There can be “seconds” of lag for the master to sync with the read replicas but that is a cost you should be willing to pay for the resiliency it provides.&lt;/p&gt;
&lt;p&gt;Another important software resilience &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/category/resiliency&quot;&gt;pattern&lt;/a&gt; is the Circuit breaker pattern.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Similar to your house’s electric circuit breaker if your software system cannot reach another software system multiple times it breaks the circuit marking it open. It periodically checks if the other system is back.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When the other system comes back the circuit is closed again. Microsoft blog has a great explanation of the &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/circuit-breaker&quot;&gt;circuit breaker&lt;/a&gt; pattern.&lt;/p&gt;
&lt;p&gt;Resilient software systems scale automatically. They add up resources depending on the load. This point is also related to &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt;, generally software scalability and resilience go hand in hand. Autoscaling systems depend on &lt;a href=&quot;https://docs.microsoft.com/en-us/azure/architecture/patterns/health-endpoint-monitoring&quot;&gt;health checks&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For systems to be resilient to load they should be able to add resources when the load is high and lower down the resources as the traffic subsides.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This keeps the software resilient and the costs optimal too.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Resilience and self-healing software is very important for high uptime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even in case of adversity the software that can have a degraded but functional performance is a mark of resilient software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Software resilience is achieved by always questioning what happens if this fails especially when communicating with external services like a database or an external API. I hope this helps you architect more resilient software. If you have any more aspects to share, please don’t forget to comment.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>6 dev and operations factors to consider for software scalability to meet high demands</title>
		<link href="https://geshan.com.np/blog/2020/12/software-scalability/"/>
		<updated>2020-12-07T09:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/12/software-scalability/</id>
		<content type="html">&lt;p&gt;Software scalability is an interesting issue to have. Making software scalable consists of multiple factors, we discuss some dev (code) related and a few operations (platforms) associated aspects in this blog post.&lt;/p&gt;
&lt;p&gt;We will discuss more on how to write software (software development) and how you run the software (operations) to make the software scalable. For beginners, &lt;a href=&quot;https://medium.com/@i.gorton/six-rules-of-thumb-for-scaling-software-architectures-a831960414f9&quot;&gt;cost and scalability&lt;/a&gt; are generally proportional, let’s get cracking.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-scalability/01software-scalability.jpg&quot; title=&quot;Software scalability factors to consider&quot; alt=&quot;Software scalability dev and ops factors to consider to meet high demands&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#what-is-software-scalability&quot;&gt;What is software scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#software-scalability-dev-point-of-view&quot;&gt;Software Scalability dev point of view&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#scalable-software-with-efficient-code&quot;&gt;Scalable software with efficient code&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#choosing-the-apt-algorithm&quot;&gt;Choosing the apt algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#better-memory-management&quot;&gt;Better memory management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#choosing-performant-libraries&quot;&gt;Choosing performant libraries&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#asynchronous-processing&quot;&gt;Asynchronous processing&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#use-queues-and-consumer-for-software-scalability&quot;&gt;Use queues and consumer for software scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#use-async-code-where-applicable&quot;&gt;Use async code where applicable&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#write-stateless-applications-for-scalable-software&quot;&gt;Write stateless applications for scalable software&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#don%E2%80%99t-use-the-local-file-system&quot;&gt;Don’t use the local file system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#replace-server-side-sessions-with-something-client-side&quot;&gt;Replace server-side sessions with something client side&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#software-scalability-from-an-operations-standpoint&quot;&gt;Software Scalability from an operations standpoint&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#vertical-scaling-vs-horizontal-scaling&quot;&gt;Vertical scaling vs Horizontal scaling&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#vertical-scaling-(scale-up)&quot;&gt;Vertical Scaling (Scale Up)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#horizontal-scaling-(scale-out)&quot;&gt;Horizontal scaling (Scale out)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#using-nosql-for-high-software-scalability&quot;&gt;Using NoSQL for high software scalability&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#nosql-database-for-scalable-software&quot;&gt;NoSQL database for scalable software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#eventual-consistency-and-cap-theorem&quot;&gt;Eventual consistency and CAP Theorem&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#caching-to-enable-software-scalability&quot;&gt;Caching to enable software scalability&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#memoization&quot;&gt;Memoization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#http-caching-for-scalable-software&quot;&gt;HTTP Caching for scalable software&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-is-software-scalability&quot;&gt;What is software scalability &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#what-is-software-scalability&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://fullscale.io/blog/what-is-software-scalability&quot;&gt;Full-scale blog&lt;/a&gt; defines software scalability as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Software scalability is an attribute of a tool or a system to increase its capacity and functionalities based on its users’ demand. Scalable software can remain stable while adapting to changes, upgrades, overhauls, and resource reduction.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So if the software can be elastic on handling load given more resources are allocated (mostly dynamically) when the volume of requests increases we can say that the software is scalable. Even to achieve this we need to focus on the code part too.&lt;/p&gt;
&lt;h2 id=&quot;software-scalability-dev-point-of-view&quot;&gt;Software Scalability dev point of view &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#software-scalability-dev-point-of-view&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software engineers should know how to write scalable software. You should focus on writing code that makes software scalability easy and put it as a priority. It is easy to write software that barely works but it is difficult to write tested, maintainable code that also scales very well. Below are a few things that can help you to write more scalable software.&lt;/p&gt;
&lt;h3 id=&quot;scalable-software-with-efficient-code&quot;&gt;Scalable software with efficient code &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#scalable-software-with-efficient-code&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Software applications can be written in a way where it just works. On the other hand, it can be written in a way with software scalability, maintenance, and resilience in mind.&lt;/p&gt;
&lt;h4 id=&quot;choosing-the-apt-algorithm&quot;&gt;Choosing the apt algorithm &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#choosing-the-apt-algorithm&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Choosing the right algorithm apt for the use case based on time and space complexity can yield great results.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Knowing about the &lt;a href=&quot;https://github.com/pavankat/big-o-in-plain-english#what-is-big-o&quot;&gt;Big O notation&lt;/a&gt; and things like streams to tackle space complexity would be immensely helpful for writing scalable software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, you can opt to use &lt;a href=&quot;https://www.baeldung.com/cs/linear-search-vs-binary-search&quot;&gt;Binary search than a linear search&lt;/a&gt; algorithm so that it performs faster. In case of space complexity, you can opt for a low memory consuming stream to &lt;a href=&quot;https://medium.com/dev-bits/writing-memory-efficient-software-applications-in-node-js-5575f646b67f&quot;&gt;copy a big file with less memory&lt;/a&gt;. Do have a look at this &lt;a href=&quot;https://www.youtube.com/watch?v=kPRA0W1kECg&quot;&gt;video&lt;/a&gt; that visually shows the sorting algorithms in 6 minutes.&lt;/p&gt;
&lt;h4 id=&quot;better-memory-management&quot;&gt;Better memory management &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#better-memory-management&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As a software engineer, you should be careful about things like &lt;a href=&quot;https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/&quot;&gt;memory management&lt;/a&gt;, garbage collection so that they don&#39;t become an issue at scale. For scalable software anticipating and writing code for the &lt;a href=&quot;https://www.baeldung.com/cs/race-conditions&quot;&gt;race conditions&lt;/a&gt; are also vital.&lt;/p&gt;
&lt;h4 id=&quot;choosing-performant-libraries&quot;&gt;Choosing performant libraries &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#choosing-performant-libraries&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Other things that can help software scalability include comparing and using more performance solutions.&lt;br /&gt;
For example, you can use just javascript in place of &lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt; and it will be &lt;a href=&quot;https://codeburst.io/why-you-shouldnt-use-lodash-anymore-and-use-pure-javascript-instead-c397df51a66&quot;&gt;faster&lt;/a&gt; and more performant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, don’t just use a library or package because it’s popular, check the performance and software scalability implications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, you could use &lt;a href=&quot;https://github.com/iamkun/dayjs&quot;&gt;Day.js&lt;/a&gt; in place of &lt;a href=&quot;https://momentjs.com/&quot;&gt;Moment.js&lt;/a&gt; to do simple date manipulation. If need be use the native methods to make the software more scalable.&lt;/p&gt;
&lt;h3 id=&quot;asynchronous-processing&quot;&gt;Asynchronous processing &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#asynchronous-processing&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Imagine this, a customer has successfully placed an order and you need to send an order confirmation email. How would you want to do it? As it is a non-critical part of the process I would always vote to do it asynchronously.&lt;/p&gt;
&lt;h4 id=&quot;use-queues-and-consumer-for-software-scalability&quot;&gt;Use queues and consumer for software scalability &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#use-queues-and-consumer-for-software-scalability&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;You can easily set up queues and consumers to get the email sending task done well after the order is placed. If the email is sent 1 minute late it does not cause a problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to reduce the latency when there are many orders you can always scale up the number of consumers. Any non-critical or non-blocking task can be pushed to the background to be done asynchronously. It helps use the available resources at an optimum level without any problems.&lt;/p&gt;
&lt;h4 id=&quot;use-async-code-where-applicable&quot;&gt;Use async code where applicable &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#use-async-code-where-applicable&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Another example of asynchronous processing is using async code. Depending on the language, you should be able to push some tasks to the background. While the task is being executed, a response can be sent that it is scheduled. You can look at a Node.js &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-code-execution-is-async-and-non-sequential&quot;&gt;example&lt;/a&gt; of an async response. Of course, this depends on your language of choice, some languages like PHP might not support async code out of the box.&lt;/p&gt;
&lt;h3 id=&quot;write-stateless-applications-for-scalable-software&quot;&gt;Write stateless applications for scalable software &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#write-stateless-applications-for-scalable-software&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Statelessness is a prerequisite for high scalability software. The &lt;a href=&quot;https://www.redhat.com/en/topics/cloud-native-apps/stateful-vs-stateless&quot;&gt;Stateless vs Stateful&lt;/a&gt; comparison from Redhat mentions “Think of stateless transactions as a vending machine: a single request and a response.” It depicts a stateful application as “You can think of stateful transactions as an ongoing periodic conversation with the same person.”&lt;/p&gt;
&lt;p&gt;Stateless software does not share anything between requests. It also doesn&#39;t depend on things like the local filesystem.&lt;/p&gt;
&lt;h4 id=&quot;don%E2%80%99t-use-the-local-file-system&quot;&gt;Don’t use the local file system &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#don%E2%80%99t-use-the-local-file-system&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is a need to save a file it should be done somewhere remote and reliable like access-controlled storage for instance an Amazon S3 bucket.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This makes it easy to save the file and serving it can be scaled too with the use of Content Delivery Network (CDN). It also helps in software scalability by separating static and dynamic content. Static content like images and other files like PDF can be served much more efficiently with a CDN than your web server. Utilize your webserver to serve up the dynamic content as web servers like Apache or Nginx are built to do that better than just serving up static files.&lt;/p&gt;
&lt;h4 id=&quot;replace-server-side-sessions-with-something-client-side&quot;&gt;Replace server-side sessions with something client-side &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#replace-server-side-sessions-with-something-client-side&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Another classic example is to not use &lt;a href=&quot;https://www.tutorialspoint.com/What-is-the-difference-between-session-and-cookies&quot;&gt;server-side sessions&lt;/a&gt; for web applications but use client-side cookies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can easily replace server-side sessions with something like a &lt;a href=&quot;https://jwt.io/&quot;&gt;JSON Web Token (JWT)&lt;/a&gt; for authentication and authorization.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;JWTs can be easily passed to the server on each request from the client as part of the header or as a cookie. It makes scaling software a lot easier as servers can act as &lt;a href=&quot;http://cloudscaling.com/blog/cloud-computing/the-history-of-pets-vs-cattle/&quot;&gt;cattle than a pet&lt;/a&gt;. If you absolutely need sessions don’t save it on the server file system move it to a datastore like Redis which will make the server replaceable easily.&lt;br /&gt;
The main point here is you should not love your server, they should be disposable and elastic as per the load. This is made possible by writing stateless software which is easily scalable and also highly available.&lt;/p&gt;
&lt;h2 id=&quot;software-scalability-from-an-operations-standpoint&quot;&gt;Software Scalability from an operations standpoint &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#software-scalability-from-an-operations-standpoint&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By operation/platforms, I am referring to where and how the software is deployed and run. I am also covering the architecture of the systems and how they talk to each other.&lt;/p&gt;
&lt;p&gt;The location where the software is deployed is crucial.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If your users are in Sydney and the software is deployed in Europe, it will have network latency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, if the components are not laid out well or chosen properly it will have negative implications. Let’s look at some operations level factors that are crucial for software scalability.&lt;/p&gt;
&lt;h3 id=&quot;vertical-scaling-vs-horizontal-scaling&quot;&gt;Vertical scaling vs Horizontal scaling &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#vertical-scaling-vs-horizontal-scaling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a continuation of the &lt;a href=&quot;https://www.hava.io/blog/cattle-vs-pets-devops-explained&quot;&gt;cattle vs pet&lt;/a&gt; analogy of servers. Time to analyze it a bit further. Imagine this, you are technically managing a fairly popular e-commerce website that has around 500 orders a day and ~50k users coming to the website. You have a big web server that is close to an &lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/&quot;&gt;Amazon EC2 m5.4xlarge&lt;/a&gt; spec. It has 16 vCPUs and has a massive 64GB of RAM. Let’s assume your &lt;a href=&quot;https://woocommerce.com/&quot;&gt;WooCommerce&lt;/a&gt; store is running on it where the webserver and MySQL database are also in that same machine.&lt;/p&gt;
&lt;p&gt;Now, just 3 months before Black Friday the company wants to push for a massive TV campaign and expects 5-7 times more traffic on Black Friday. The management is investing a lot in advertising and the website can’t go down for those 4-5 days.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is also expected that there will be 300k+ users on the website and 3k+ orders placed for those 3-4 days.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You have 2 options to scale the application now either scale up (vertical scaling) or scale-out (horizontal scaling).&lt;/p&gt;
&lt;h4 id=&quot;vertical-scaling-(scale-up)&quot;&gt;Vertical Scaling (Scale-Up) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#vertical-scaling-(scale-up)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you choose the scale-up path also called vertical scaling. With vertical scaling, you add more hardware to solve the scaling issue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can get an EC2 m5.24xlarge machine. It has 96 vCPUS and 384 MB of RAM.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The CPU and RAM are 6 times compared to the old machine so theoretically, it should hold up.&lt;/p&gt;
&lt;p&gt;But there are 3 main issues, you will need a bit of downtime to upgrade the hardware. The second and main one is that the machine is the single point of failure. If there is an issue in the DB due to load the website can still come crashing down. You will need to scale down later and if the traffic is not as much as expected, there are resources wasted due to over-provisioning.&lt;/p&gt;
&lt;h4 id=&quot;horizontal-scaling-(scale-out)&quot;&gt;Horizontal scaling (Scale-out) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#horizontal-scaling-(scale-out)&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Another option is to scale-out also known as horizontal scaling. With this path, you will try to get many smaller EC2 instances like 8-50 of t3.mediums.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Each of them will have 2 vCPUs and 4 GB of RAM. So a fleet of 50 t3.mediums can give you 100 vCPUs and 200 GBs of RAM in total. To distribute the load correctly among the fleets of these new EC2 instances you can use &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/application-load-balancer/&quot;&gt;Amazon Application load balancer&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To make the application more scalable you can use Amazon RDS db.m5.8xlarge instance with 32 vCPUs and 128 GB RAM. As per need, you can also configure the backup. At this point, your 50 servers are your cattle if 3 dies, you spin up 3 more.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is much less load then only 3 instances are running and when traffic spikes up 20 more come up in minutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the sale period ends you scale down the DB to a db.m5.large and things are working fine for 500 orders a day.&lt;/p&gt;
&lt;p&gt;As this is important let’s explain it visually below:  PS: pardon my bad designing skills :)&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-scalability/02vertical-scaling-software-scalability.jpg&quot; title=&quot;Vertical scalability with beefing up resource on the same machine for software scalability&quot; alt=&quot;Vertical scalability with beefing up resource on the same machine for software scalability&quot; /&gt;
&lt;hr /&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-scalability/03horizontal-scaling-software-scalability.jpg&quot; title=&quot;Horizontal scalability with load balancer for software scalability&quot; alt=&quot;Horizontal scalability with load balancer for software scalability&quot; /&gt;
&lt;p&gt;This is the part where &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; and &lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; shine. You can package your workload into lightweight containers and Kubernetes can manage horizontal scaling, rolling deployment, etc for those containers. Docker has &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;changed the way we software engineers’ work&lt;/a&gt; in the past years.&lt;/p&gt;
&lt;p&gt;One takeaway here is Scaling RDBMS is hard. With things like sharding, it might be easier to Scale-up a relational database than try scaling out if you don’t know what you are doing. Amazon is an example here the same concepts can be applied to any major cloud vendor like Google Cloud or Azure. That leads me to my next point, the usage of NoSQL databases.&lt;/p&gt;
&lt;h3 id=&quot;using-nosql-for-high-software-scalability&quot;&gt;Using NoSQL for high software scalability &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#using-nosql-for-high-software-scalability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the above example, if your web store had 20 people on the website they can be served from a Relational database. For each request from every user, the application is hitting a relational database at this point which is slow but not crippling. Now imagine 120 users are on the website at the same time. It is very likely that the performance has degraded significantly and we can see some &lt;a href=&quot;https://sysadminxpert.com/aws-rds-max-connections-limit/&quot;&gt;connection to database&lt;/a&gt; issues popping up depending on the database provisioned.&lt;/p&gt;
&lt;h4 id=&quot;nosql-database-for-scalable-software&quot;&gt;NoSQL database for scalable software &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#nosql-database-for-scalable-software&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is where a NoSQL datastore is very handy. We can use a NoSQL memory key-value store like &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using an in-memory datastore like Redis to serve all the product details will drastically reduce the response times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another use can be for searching rather than running complex SQL query to find red t-shirt from Adidas of medium size we can use &lt;a href=&quot;https://lucene.apache.org/solr/&quot;&gt;Solr&lt;/a&gt; or &lt;a href=&quot;https://www.elastic.co/&quot;&gt;Elastic Search&lt;/a&gt; for blazing-fast faceted search. Solr is a NoSQL database with transaction support. This can help with software scalability and resilience.&lt;/p&gt;
&lt;p&gt;Both Redis and Solr/Elastic search will need some data to be filled up in advance to function but they surely outweigh the benefits of not hitting a relational database on each client request.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For each write request, it will need to reach the relational database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, every purchase by the customer must be stored in the relational database. In case of all the browsing, which should be 80-90% or more of the traffic we can use NoSQL databases for more software scalability.&lt;/p&gt;
&lt;h4 id=&quot;eventual-consistency-and-cap-theorem&quot;&gt;Eventual consistency and CAP Theorem &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#eventual-consistency-and-cap-theorem&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;NoSQL databases are fast because they take the tradeoff of &lt;a href=&quot;https://twitter.com/mykola/status/1101337299525267457&quot;&gt;eventual consistency&lt;/a&gt;. I would really recommend you to refresh your knowledge about &lt;a href=&quot;https://www.ibm.com/cloud/learn/cap-theorem#toc-what-is-th-DXABpEgu&quot;&gt;CAP theorem&lt;/a&gt; -- Consistency, Availability and Partition tolerance to understand data storages better.&lt;/p&gt;
&lt;p&gt;You can read more on how to scale from &lt;a href=&quot;http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html&quot;&gt;1 to 11 million users&lt;/a&gt; in this post on HighScalability. So a NoSQL database can work as an effective cache, which takes us to the next point of effective caching for software scalability.&lt;/p&gt;
&lt;h3 id=&quot;caching-to-enable-software-scalability&quot;&gt;Caching to enable software scalability &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#caching-to-enable-software-scalability&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;Phil Carlton&lt;/a&gt; has said&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cache invalidation is also an interesting problem to encounter. You will need a cache at scale because the normal way without cache is not scalable anymore. For great software scalability caching on different levels plays a vital role. Below are some of the ways/levels you can exploit cache to achieve more scalable software.&lt;/p&gt;
&lt;h4 id=&quot;memoization&quot;&gt;Memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#memoization&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The first level of caching can be done on the code level. One of the basic ways of caching is &lt;a href=&quot;https://lispcast.com/what-is-memoization/&quot;&gt;Memoization&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Memoization is a higher-order function that caches another function. It can turn some slow functions into fast ones. It saves the result of a function call after the first time to the cache, so if you call the function again with the same arguments, it will find it in the cache.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can have a look at a Node.js &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#memoization-example&quot;&gt;Memoization example&lt;/a&gt; where the server caches the response for 1 minute. Therefore, for 1 minute even if the data changes the client gets the same old data. You should read more about &lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/&quot;&gt;javascript memoization&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;http-caching-for-scalable-software&quot;&gt;HTTP Caching for scalable software &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#http-caching-for-scalable-software&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Another level of caching can be done on the HTTP layer. With good use of &lt;a href=&quot;https://web.dev/http-cache/&quot;&gt;HTTP headers&lt;/a&gt; responses can be cached for a desired amount of time. HTTP Caching can also be implemented with an application like &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/202775670-Customizing-Cloudflare-s-cache&quot;&gt;Cloudflare&lt;/a&gt; to set up rules to cache responses for minutes or hours to reduce the load on the servers. This type of caching mechanism helps us achieve a high level of software scalability.&lt;/p&gt;
&lt;p&gt;If you have the capacity to manage a full-on HTTP cache and HTTP accelerator, &lt;a href=&quot;https://varnish-cache.org/index.html&quot;&gt;Varnish&lt;/a&gt; is a great option. Varnish claims:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It typically speeds up delivery with a factor of 300 - 1000x, depending on your architecture.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With a 1 million + download of the &lt;a href=&quot;https://hub.docker.com/_/varnish&quot;&gt;Varnish Docker image&lt;/a&gt;, I think people might have configured it well on &lt;a href=&quot;https://dealancer.medium.com/creating-a-scalable-and-resilient-varnish-cluster-using-kubernetes-853f03ec9731&quot;&gt;Kubernetes&lt;/a&gt; too for unmatched software scalability with great HTTP caching.&lt;/p&gt;
&lt;p&gt;I am not sure if a &lt;a href=&quot;https://cloud.google.com/sql/docs/mysql/replication/create-replica#:~:text=A%20read%20replica%20is%20a,analytics%20traffic%20from%20the%20primary&quot;&gt;read replica&lt;/a&gt; is a pure &lt;a href=&quot;https://aws.amazon.com/caching/database-caching/&quot;&gt;database caching&lt;/a&gt; mechanism. But I am very sure that it helps in software scalability putting less pressure on the main database by running the read queries on the read replica. There are other ways to implement cache on an N-tier application. Depending on your architecture you might want to add a cache to speed up things as well as give a boost to software scalability.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software scalability is a difficult problem, what makes it even more complex is the context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What is a very high scale for a medium-size company may be of no concern to one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Big_Tech&quot;&gt;FAANG&lt;/a&gt; companies. It is about RPM/RPS your software systems handle every day.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have not worked with systems that have 100K or millions of requests per second, I have only read about that scale. I have seen and worked with systems with 100s to sometimes 1000s of requests per second. Even at this volume software scalability is an interesting and challenging problem to meet high demands.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to make PHPUnit Code Coverage 2+ times faster with Pcov compared to Xdebug</title>
		<link href="https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/"/>
		<updated>2020-11-27T11:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/</id>
		<content type="html">&lt;p&gt;PHPUnit is the de-facto testing library for PHP. With the use of pcov you can speed up PHPUnit code coverage by 2-5 times for PHP 7.0+ application. In this post, we will compare the results of an experiment I did on Laravel framework tests. The tests were run without coverage, then with Xdebug coverage, and finally with pcov all on Github actions. Pcov took half the time to run the PHPUnit tests with code coverage compared to Xdebug, let’s go to the numbers.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-code-coverage-pcov/01faster-phpunit-code-coverage.jpg&quot; title=&quot;Faster PHPUnit code coverage with pcov&quot; alt=&quot;Faster PHPUnit code coverage with pcov&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;save-time-on-ci-builds&quot;&gt;Save time on CI builds &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#save-time-on-ci-builds&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What does saving say 12 seconds on each build mean on the long run? If you can save just 12 seconds on each build, it equates to 1 minute in just 5 builds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In just 100 builds you save 20 minutes and in 1000 builds that number becomes 3 hours and 20 mins.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Think of it as how much it will save in terms of waiting time for your colleagues too.&lt;/p&gt;
&lt;h2 id=&quot;php-code-coverage-with-pcov-not-xdebug&quot;&gt;PHP code coverage with Pcov not Xdebug &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#php-code-coverage-with-pcov-not-xdebug&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://xdebug.org/&quot;&gt;XDebug&lt;/a&gt; is a debugger that can do coverage too. &lt;a href=&quot;https://www.php.net/manual/en/intro.phpdbg.php&quot;&gt;PHPdbg&lt;/a&gt; is another alternative to Xdebug. &lt;a href=&quot;https://github.com/krakjoe/pcov&quot;&gt;Pcov&lt;/a&gt; is built for PHPUnit code coverage not something else.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dyrynda.com.au/blog/using-pcov-instead-of-xdebug-for-coverage&quot;&gt;Michael Dyrynda&lt;/a&gt; has also talked about this issue, where he mentions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have access to the same output formats that are available to PHPUnit (formatted output, clover, JSON, HTML, etc.) with none of the overhead.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He has also points out other issues with Xdebug like hitting the &lt;code&gt;max_nesting_limit&lt;/code&gt; too, you should read his blog post too.&lt;/p&gt;
&lt;h2 id=&quot;considerations-for-code-coverage-with-pcov&quot;&gt;Considerations for code coverage with pcov &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#considerations-for-code-coverage-with-pcov&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/krakjoe/pcov&quot;&gt;Pcov&lt;/a&gt; is a self-contained PHP code coverage driver for PHP 7 and above&lt;/li&gt;
&lt;li&gt;PHPUnit 8 and above supports PCOV out of the box, for PHPUnit 7 and lower you will need &lt;a href=&quot;https://github.com/krakjoe/pcov-clobber&quot;&gt;pcov-clobber&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pcov makes prefect sense in a Continuous Integration (CI) environment as you don&#39;t debug code on a CI :)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To show a real-life scenario we are going to see how long Laravel Framework’s 5700+ tests with 15500+ assertions are going to take in our quick experiment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let’s get cracking!&lt;/p&gt;
&lt;h2 id=&quot;procedure-for-faster-phpunit-code-coverage&quot;&gt;Procedure for faster PHPUnit code coverage &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#procedure-for-faster-phpunit-code-coverage&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I picked up the Laravel framework not only because it is very popular but also because there were a lot of tests, more than 5700 of them. On top of it, for the Laravel 8.x branch the tests are running on &lt;a href=&quot;https://github.com/laravel/framework/actions&quot;&gt;Github Actions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tests for Laravel 8.x run on multiple versions of PHP like 7.3, 7.4,8 on lowest to stable variants. The same tests also run on windows.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Another reason to choose Laravel 8.x was it is using &lt;a href=&quot;https://github.com/laravel/framework/blob/8.x/composer.json#L89&quot;&gt;PHPUnit  9.3&lt;/a&gt; which does not need pcov-clobber to get the PHPUnit coverage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I had blogged about getting started with &lt;a href=&quot;https://geshan.com.np/blog/2015/07/getting-started-with-unit-testing-in-laravel/&quot;&gt;Unit testing in Laravel&lt;/a&gt; in the past which should be a good unit testing refresher. &lt;a href=&quot;https://geshan.com.np/blog/2014/02/using-phpunit-data-provider-for-less/&quot;&gt;Data provider for PHPunit&lt;/a&gt; is also a great way to write less test code but achieve more code coverage.&lt;/p&gt;
&lt;p&gt;Below are the steps I took to find out how fast Pcov was against Xdebug for PHPUnit code coverage.&lt;/p&gt;
&lt;h3 id=&quot;fork-laravel%2Fframework-repo-and-run-tests-only-for-php-7.4&quot;&gt;Fork Laravel/framework repo and run tests only for PHP 7.4 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#fork-laravel%2Fframework-repo-and-run-tests-only-for-php-7.4&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To keep things simple, I forked the Laravel/framework Github &lt;a href=&quot;https://github.com/geshan/framework&quot;&gt;repo&lt;/a&gt;. After that, I change the Github Actions tests workflow to run tests only on PHP 7.4 which the current stable version. You can see the changes I made in this &lt;a href=&quot;https://github.com/geshan/framework/pull/1/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Opening the pull requests ran the tests without PHPUnit code coverage and it took &lt;code&gt;33 seconds&lt;/code&gt; to run the tests consuming &lt;code&gt;257MB&lt;/code&gt; of memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can view the details of that test run in this &lt;a href=&quot;https://github.com/geshan/framework/runs/1458355879?check_suite_focus=true&quot;&gt;Gitub Actions page&lt;/a&gt;, below is a quick screenshot.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-code-coverage-pcov/02phpunit-tests-without-coverage.jpg&quot; title=&quot;Laravel Framwork PHPUnit tests without code coverage&quot; alt=&quot;Laravel Framwork PHPUnit tests without code coverage took 33 seconds&quot; /&gt;
&lt;h3 id=&quot;run-phpunit-code-coverage-with-xdebug&quot;&gt;Run PHPUnit code coverage with XDebug &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#run-phpunit-code-coverage-with-xdebug&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I merged the above pull request to run tests only for PHP 7.4. Then I made changes to run the PHPUnit tests with code coverage using Xdebug as the driver. The change is very easy as Gitub action was using &lt;code&gt;shivammathur/setup-php@v2&lt;/code&gt; action. After a bit of Googling, I found that that action had &lt;a href=&quot;https://github.com/marketplace/actions/setup-php-action#signal_strength-coverage-support&quot;&gt;Code Coverage support&lt;/a&gt; and it was very easy to enable.&lt;/p&gt;
&lt;p&gt;I had to change the coverage from &lt;code&gt;none&lt;/code&gt; to &lt;code&gt;xdebug&lt;/code&gt; and add &lt;code&gt;--coverage-text&lt;/code&gt; to the PHPUnit command making it:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;vendor/bin/phpunit --verbose --coverage-text&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I made those changes in 2 places in the &lt;code&gt;tests.yml&lt;/code&gt; file and that resulted in this &lt;a href=&quot;https://github.com/geshan/framework/pull/2/files&quot;&gt;pull request&lt;/a&gt;. A new pull request = the tests running again in Github Actions CI.&lt;/p&gt;
&lt;p&gt;With Xdebug code coverage I did a couple more runs to see if the time taken to run the test vary by much. It was generally the same.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In one of the runs of &lt;a href=&quot;https://github.com/geshan/framework/runs/1458520731?check_suite_focus=true&quot;&gt;code coverage with Xdebug&lt;/a&gt; took &lt;code&gt;2 mins 34 seconds&lt;/code&gt; and consumed &lt;code&gt;395 MB&lt;/code&gt; of memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I am only checking the time for the &lt;code&gt;Execute tests&lt;/code&gt; task. You can view the screeshot below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-code-coverage-pcov/03phpunit-tests-with-xdebug.jpg&quot; title=&quot;Laravel Framwork PHPUnit tests with Xdebug code coverage&quot; alt=&quot;Laravel Framwork PHPUnit tests with Xdebug code coverage took 2 mins 34 seconds&quot; /&gt;
&lt;p&gt;The code coverage was reported as below, with 75.65% of the lines covered and 68.90% of the methods covered by PHPUnit Code coverage using Xdebug.&lt;/p&gt;
&lt;h3 id=&quot;phpunit-code-coverage-with-pcov-is-2x-faster&quot;&gt;PHPUnit Code Coverage with Pcov is 2x faster &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#phpunit-code-coverage-with-pcov-is-2x-faster&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Now with the time of &lt;code&gt;154 seconds&lt;/code&gt; for Xdebug, I wanted to see how long it would take the new coverage driver &lt;code&gt;Pcov&lt;/code&gt;. To find this out, I again followed a similar approach, went to the Laravel 8.x branch, and started editing the &lt;code&gt;.github/workflows/tests.yml&lt;/code&gt; file. I change the coverage from &lt;code&gt;none&lt;/code&gt; to &lt;code&gt;pcov&lt;/code&gt; thankfully the PHP action supports &lt;a href=&quot;https://github.com/marketplace/actions/setup-php-action#pcov&quot;&gt;pcov&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The changes I made are in this &lt;a href=&quot;https://github.com/geshan/framework/pull/3/files&quot;&gt;pull request&lt;/a&gt;. This triggered another build on Github Actions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This time surprisingly it took just &lt;code&gt;1 minute 17 seconds&lt;/code&gt; and consumed &lt;code&gt;393 MB&lt;/code&gt; of memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again this is for the &lt;code&gt;Execute tests&lt;/code&gt; task as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/phpunit-code-coverage-pcov/04phpunit-tests-with-pcov.jpg&quot; title=&quot;Laravel Framwork PHPUnit tests with Pcov code coverage&quot; alt=&quot;Laravel Framwork PHPUnit tests with Pcov code coverage took only 1 min 17 seconds&quot; /&gt;
&lt;p&gt;Same as Xdebug the PHPUnit Code Coverage was reported as 75.65% of the lines and 68.90% of the methods covered by Pcov. You can see other test runs in the &lt;a href=&quot;https://github.com/geshan/framework/actions&quot;&gt;Actions tab&lt;/a&gt; of my Laravel Framework fork.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison-of-code-coverage&quot;&gt;Quick comparison of Code coverage &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#quick-comparison-of-code-coverage&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s take a quick look at how long the PHPUnit test took with and without code coverage:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;PHPUnit Test Run (PHP 7.4 Linux)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Time Taken&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Memory Consumed&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;No Coverage&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;33 seconds&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;257 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Coverage with XDebug&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2 minutes 34 seconds (154 seconds)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;395 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Coverage with Pcov&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 minute 17 seconds (77 seconds)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;393 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;It is very clear that Pcov took half the time as Xdebug and even consumed lesser memory. PHPUnit code coverage with Pcov took 77 seconds and with Xdebug took double of that at 154 seconds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In my local run in a docker container, the results were pretty different.  For Xdebug these Laravel framework tests took 15 minutes 15 seconds (403 MB memory) and the with Pcov driver the same tests took 3 minutes 25 seconds (399 MB memory).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pcov was 4.43 times faster on my local machine inside a &lt;a href=&quot;https://github.com/lorisleiva/laravel-docker/blob/master/7.4/Dockerfile&quot;&gt;docker container&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not only me, &lt;a href=&quot;https://dev.to/swashata/setup-php-pcov-for-5-times-faster-phpunit-code-coverage-3d9c&quot;&gt;Swashata Ghosh&lt;/a&gt; has also reported a 5 times faster code coverage with Pcov in place of Xdebug. Speaking of pure numbers, I ran a check on a test where it took &lt;code&gt;17 seconds&lt;/code&gt; with Xdebug and it took just &lt;code&gt;1 second&lt;/code&gt; with pcov. It was 17 fold faster but that should not be a yard stick to compare X-dbeug and Pcov for code coverage.&lt;/p&gt;
&lt;p&gt;I didnot try PHPDbg as an option because it was not available in the &lt;code&gt;PHP Github action&lt;/code&gt;. If you want to quickly switch between Xdebug and Pcov please read this &lt;a href=&quot;https://localheinz.com/blog/2020/05/16/quickly-switching-between-pcov-and-xdebug/&quot;&gt;guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/phpunit-code-coverage-pcov/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PHPUnit code coverage is usually coupled with Xdebug. It has a problem the code converge reports are slow with XDebug. Pcov is purpose built for PHPunit code coverage not debugging and it makes gathering code coverage a lot faster.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to speed up your code coverage and save time on your CI builds use Pcov in place of Xdebug. You will surely like the time saved after the process is done. Happy faster testing and coverage reports!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>Node.js MySQL tutorial: a step-by-step getting started guide with Express js REST API</title>
		<link href="https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/"/>
		<updated>2020-11-23T12:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/</id>
		<content type="html">&lt;p&gt;Node.js and MySQL mix very well together. In this Node.js MySQL tutorial, we will look into how to get started with both of them step-by-step to build REST API for quotes using Express js.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/00nodejs-mysql-tutorial.jpg&quot; title=&quot;Node.js MySQL step-by-step tutorial&quot; alt=&quot;Node.js MySQL tutorial step-by-step to build a quotes REST API with Express js&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#why-node.js-mysql-tutorial&quot;&gt;Why Node.js MySQL tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#prerequisites-for-node.js-mysql-tutorial&quot;&gt;Prerequisites for Node.js MySQL tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#node.js-mysql-tutorial-steps&quot;&gt;Node.js MySQL tutorial steps&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#setup-express-js-for-node.js-mysql-tutorial&quot;&gt;Setup Express js for Node.js MySQL tutorial&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#delete-public-folder&quot;&gt;Delete public folder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#delete-existing-routes-and-create-a-new-route-for-quotes&quot;&gt;Delete existing routes and create a new route for quotes&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#setup-mysql-with-quote-table&quot;&gt;Setup MySQL with quote table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#wire-up-node.js-with-mysql&quot;&gt;Wire up Node.js with MySQL&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#install-mysql2-in-the-express-app&quot;&gt;Install mysql2 in the express app&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#show-the-quotes---get-api&quot;&gt;Show the quotes - Get API&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#paginate-the-quotes-for-node.js-mysql-tutorial&quot;&gt;Paginate the quotes for Node.js MySQL tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#save-new-quote---post-api-for-node.js-mysql-tutorial&quot;&gt;Save new quote - POST API for Node.js MySQL tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#tldr%3B-i-want-to-run-it-quickly&quot;&gt;TLDR; I want to run it quickly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;why-node.js-mysql-tutorial&quot;&gt;Why Node.js MySQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#why-node.js-mysql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Node.js has been popularly coupled with NoSQL databases, especially Mongo DB. If you move an older codebase to Node.js you will not have the option to choose a database. Most older systems or even new ones use a relational database management system like MySQL. This leads to a need for a step-by-step Node.js MySQL tutorial.&lt;/p&gt;
&lt;p&gt;If you are starting a new project don&#39;t blindly use a NoSQL like Mongo DB. This hilarious but accurate &lt;a href=&quot;https://youtu.be/b2F-DItXtZs&quot;&gt;video&lt;/a&gt; from 2010 about MySQL vs Mongo still makes perfect sense.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use a NoSQL database if your project absolutely needs it else a relational database would suffice.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;prerequisites-for-node.js-mysql-tutorial&quot;&gt;Prerequisites for Node.js MySQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#prerequisites-for-node.js-mysql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You have Node.js installed on your machine (or a docker container that can run Node.js). We will be using Node.js version 12 and npm 6.14.&lt;/li&gt;
&lt;li&gt;You are familiar with how Node.js works generally and also know about Node.js frameworks. We will use Express js for this guide.&lt;/li&gt;
&lt;li&gt;Some git knowledge would be really helpful&lt;/li&gt;
&lt;li&gt;You have access to a MySQL instance either running locally or remotely. I would suggest using &lt;a href=&quot;https://remotemysql.com/&quot;&gt;remote MySQL&lt;/a&gt;. You should know how RDBMS works.&lt;/li&gt;
&lt;li&gt;You can code with an IDE, I will be using VS code but you can use any editor or IDE for this Node.js MySQL tutorial.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;node.js-mysql-tutorial-steps&quot;&gt;Node.js MySQL tutorial steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#node.js-mysql-tutorial-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will be building a simple REST API with Express js that can give out quotes. Before diving deeper into the steps, I would really recommend you to take a refresher on &lt;a href=&quot;https://www.codecademy.com/articles/what-is-rest&quot;&gt;REST&lt;/a&gt;(REpresentational State Transfer). It will be best to read on REST verbs and run some cURL commands to POST APIs.&lt;/p&gt;
&lt;p&gt;Given you have Node.js running (either on the machine or with Docker), we can start with setting up Express first:&lt;/p&gt;
&lt;h3 id=&quot;setup-express-js-for-node.js-mysql-tutorial&quot;&gt;Setup Express js for Node.js MySQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#setup-express-js-for-node.js-mysql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To set up express, we will use the express-generator. You can generate an express js app without any view engine for this Node.js MySQL tutorial with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx express-generator --no-view --git nodejs-mysql&lt;/code&gt;&lt;/pre&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/01express-generator-output.jpg&quot; title=&quot;Generate Express.js with generator&quot; alt=&quot;Output of Node.js Express generator without view and with git ignore&quot; /&gt;
&lt;p&gt;To quickly check the output execute the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; nodejs-mysql &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs-mysql:* &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see the below output on your browser:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/02express-running.jpg&quot; title=&quot;Express running on the browser&quot; alt=&quot;Default express output on the browser&quot; /&gt;
&lt;p&gt;The generated basic express app can be seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/1/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;delete-public-folder&quot;&gt;Delete public folder &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#delete-public-folder&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As we are building a REST API for quote in this Node.js tutorial with Express we will delete the public folder. We don’t need any CSS or js for the purpose of this tutorial as we will deal with JSON.&lt;/p&gt;
&lt;p&gt;To delete the public folder run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf public&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;delete-existing-routes-and-create-a-new-route-for-quotes&quot;&gt;Delete existing routes and create a new route for quotes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#delete-existing-routes-and-create-a-new-route-for-quotes&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At this point, we will make some changes to the routes. We will delete the &lt;code&gt;routes/users.js&lt;/code&gt; file that we don’t need anymore. We will then add the &lt;code&gt;routes/quoets.js&lt;/code&gt; file that looks like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        quote&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        author&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      page&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For now the &lt;code&gt;/routes&lt;/code&gt; will give a static output of only one quote as shown above. We will make it dynamic in the next steps.&lt;/p&gt;
&lt;p&gt;After that, we will need to link up the quotes route with the &lt;code&gt;app.js&lt;/code&gt; file. After the linking my &lt;code&gt;app.js&lt;/code&gt; file looks like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cookieParser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cookie-parser&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;morgan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; indexRouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./routes/index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotesRouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./routes/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;dev&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;urlencoded&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; extended&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cookieParser&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; indexRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quotesRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One more thing to do is, change the &lt;code&gt;index.js&lt;/code&gt; file to show a JSON output in place of rendering a view/HTML template. After this change the &lt;code&gt;index.js&lt;/code&gt; file looks like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET home page. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ok&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have also changed all the &lt;code&gt;var&lt;/code&gt; to &lt;code&gt;const&lt;/code&gt; as it makes more sense. If you want to view all the changes in one go, it is available in this &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/2/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can see the last changes by running the following on your command line:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs-mysql:* &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see the below when you hit &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; on your browser:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/03quotes-static-output.jpg&quot; title=&quot;Quotes API with static output&quot; alt=&quot;Quotes API static output for Node.js MySQL tutorial using Express js&quot; /&gt;
&lt;h3 id=&quot;setup-mysql-with-quote-table&quot;&gt;Setup MySQL with quote table &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#setup-mysql-with-quote-table&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At this juncture, for this Node.js MySQL tutorial, we will create a Quotes API. The consumers can fetch quotes and add new ones too. To enable this we will use a single table called &lt;code&gt;quote&lt;/code&gt;, its structure is given below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;created_at&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DATETIME&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;updated_at&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DATETIME&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;INDEX&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;idx_author&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;idx_quote_uniqie&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;br /&gt; &lt;span class=&quot;token keyword&quot;&gt;ENGINE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;InnoDB&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf8mb4 &lt;span class=&quot;token keyword&quot;&gt;COLLATE&lt;/span&gt; utf8mb4_general_ci&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a simple table with 5 columns. The first one is &lt;code&gt;id&lt;/code&gt; the auto-incremented primary key. Then there is &lt;code&gt;quote&lt;/code&gt; and &lt;code&gt;author&lt;/code&gt;. Both of these columns are varchar.&lt;/p&gt;
&lt;p&gt;After that there is &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt;. Both date columns have a default value of &lt;code&gt;CURRENT_TIMESTAMP&lt;/code&gt; so we don’t need to send these values from code. Also not that, updated_at will be auto-updated when the row is updated because of this: &lt;code&gt;on update CURRENT_TIMESTAMP&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can run the above to create the &lt;code&gt;quote&lt;/code&gt; table, to fill up some good programming-related quotes run the following insert SQL query too:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;id&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;I&#39;m not a great programmer; I&#39;m just a good programmer with great habits.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Kent Beck&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Truth can only be found in one place: the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Robert C. Martin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;If you have to spend effort looking at a fragment of code and figuring out what it&#39;s doing, then you should extract it into a function and name the function after the &#39;what&#39;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Donald Knuth&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;SQL, Lisp, and Haskell are the only programming languages that I’ve seen where one spends more time thinking than typing.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Philip Greenspun&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Deleted code is debugged code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jeff Sickel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;C.A.R. Hoare&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Simplicity is prerequisite for reliability.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Edsger W. Dijkstra&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;There are only two hard things in Computer Science: cache invalidation and naming things.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Phil Karlton&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Measuring programming progress by lines of code is like measuring aircraft building progress by weight.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bill Gates&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above query will add 15 quotes to the table, it should be a good starting point for the get quotes API. Notice that id 2 is missing and this is done on purpose. You can view the database init file &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/blob/master/db/init.sql&quot;&gt;here&lt;/a&gt; too.&lt;/p&gt;
&lt;h3 id=&quot;wire-up-node.js-with-mysql&quot;&gt;Wire up Node.js with MySQL &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#wire-up-node.js-with-mysql&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;At this stage, we will connect to MySQL from Node.js express application. To do this task, we will use &lt;a href=&quot;https://github.com/sidorares/node-mysql2&quot;&gt;Mysql2&lt;/a&gt; library. If you are asking why not the default &lt;a href=&quot;https://github.com/mysqljs/mysql&quot;&gt;Mysql&lt;/a&gt;. It is because of 2 main reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mysql2 has a &lt;a href=&quot;https://github.com/sidorares/node-mysql2/blob/master/documentation/Promise-Wrapper.md&quot;&gt;wrapper for promises&lt;/a&gt; out of the box&lt;/li&gt;
&lt;li&gt;Mysql2 supports &lt;a href=&quot;https://github.com/sidorares/node-mysql2#using-prepared-statements&quot;&gt;prepared statements&lt;/a&gt; which are faster and safer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want a head to head comparison of these two libraries please head to &lt;a href=&quot;https://npmcompare.com/compare/mysql,mysql2&quot;&gt;npm compare&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;install-mysql2-in-the-express-app&quot;&gt;Install mysql2 in the express app &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#install-mysql2-in-the-express-app&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To start querying the MySQL database with Nodejs, we will first install the &lt;code&gt;mysql2&lt;/code&gt; library with npm:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save mysql2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command will install the &lt;code&gt;mysql2&lt;/code&gt; library and also add it to the &lt;code&gt;package.json&lt;/code&gt; file. The next step is to update the &lt;code&gt;/quotes&lt;/code&gt; route to show quotes from the database rather than a static quote.&lt;/p&gt;
&lt;h3 id=&quot;show-the-quotes---get-api&quot;&gt;Show the quotes - Get API &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#show-the-quotes---get-api&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When you hit &lt;code&gt;http://localhost:3000&lt;/code&gt; after starting the express js app, you can see something like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;quote&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Bjarne Stroustrup&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  	&lt;span class=&quot;token string&quot;&gt;&quot;page&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s pull similar data from our database table &lt;code&gt;quote&lt;/code&gt; and improvise more on it.&lt;/p&gt;
&lt;p&gt;To show multiple quotes we will change the static response with a dynamic one. For that, we will need to connect to the database. Let’s create a config file that has the database credentials like below called &lt;code&gt;config.js&lt;/code&gt; at the root of the project (besides app.js):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; env &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  db&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* do not put password or any sensitive info here, done only for demo */&lt;/span&gt;&lt;br /&gt;    host&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_HOST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;remotemysql.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    user&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_USER&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2ZE90yGC6G&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    password&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_PASSWORD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;JZFqXibSmX&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    database&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_NAME&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2ZE90yGC6G&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    waitForConnections&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    connectionLimit&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_CONN_LIMIT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    queueLimit&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    debug&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DB_DEBUG&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  listPerPage&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LIST_PER_PAGE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have created a &lt;code&gt;config.js&lt;/code&gt; file that has the credentials for the database taken from the environment variable. If the environment variables are not set we use the fallback values.&lt;/p&gt;
&lt;p&gt;After that, create &lt;code&gt;db.js&lt;/code&gt; file in &lt;code&gt;/services&lt;/code&gt; folder which should look like the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mysql &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;mysql2/promise&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pool &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mysql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;db&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fields&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; pool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  query&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this simple DB wrapper, we create a pool of connections for MySQL. As our config has &lt;code&gt;connectionLimit&lt;/code&gt; of 2 it will create a maximum of 2 connections to the database. Then there is a straightforward &lt;code&gt;query&lt;/code&gt; method exposed out that can run the SQL query with given params.&lt;/p&gt;
&lt;p&gt;After that, create a &lt;code&gt;/services/quotes.js&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SELECT id, quote, author FROM quote&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Till this point, it is a very simple file that includes the &lt;code&gt;db&lt;/code&gt; service created above. Then there is a &lt;code&gt;getMultiple&lt;/code&gt; function exposed out with module.exports. Beware this will query all the records on the database which should be 15 at this stage. We will make it paginated in the next step.&lt;/p&gt;
&lt;p&gt;Consequently we will wire up the &lt;code&gt;getMultiple&lt;/code&gt; function in &lt;code&gt;/services/quotes.js&lt;/code&gt; with the route &lt;code&gt;/quotes&lt;/code&gt; in the &lt;code&gt;/routes/quotes.js&lt;/code&gt; file like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I think this is the right time to install &lt;code&gt;nodemon&lt;/code&gt;, I would recommend to install it globally like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g nodemon &lt;span class=&quot;token comment&quot;&gt;#you might need sudo depending on your config&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt;, you can restart the Node.js server on each code change, which is very helpful while developing. You can run the app now with &lt;code&gt;nodemon&lt;/code&gt; like below to check the result on a browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;nodejs-mysql:* nodemon bin/www&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you hit &lt;code&gt;http://localhost:3000&lt;/code&gt; on the browser, you should see a similar output or lots of &lt;code&gt;JSON&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/04quotes-dynamic-output.jpg&quot; title=&quot;Quotes API with dynamic output from DB&quot; alt=&quot;Quotes API dynamic output for Node.js MySQL tutorial using Express js from DB table quote&quot; /&gt;
&lt;p&gt;If you go back and check your console where you ran &lt;code&gt;nodemon&lt;/code&gt; you should be able to see something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/05nodemon-output.jpg&quot; title=&quot;Nodemon output for quotes API&quot; alt=&quot;Quotes API nodemon output for Node.js MySQL tutorial using Express js&quot; /&gt;
&lt;p&gt;If you change any file the server will restart because of nodemon. In the next step of this Node.js MySQL tutorial with express js, we will paginate the results 10 quotes on the page. If you want to see the code changes we did to get the quotes from the database it is here in this &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/4/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;paginate-the-quotes-for-node.js-mysql-tutorial&quot;&gt;Paginate the quotes for Node.js MySQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#paginate-the-quotes-for-node.js-mysql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;At this juncture, we will start to paginate the quotes 10 quotes per page. The has already been put in place in the &lt;code&gt;/config.js&lt;/code&gt; file at line no. 14 as &lt;code&gt;listPerPage: env.LIST_PER_PAGE || 10,&lt;/code&gt; we will use it now.&lt;/p&gt;
&lt;p&gt;We will add a &lt;code&gt;/helper.js&lt;/code&gt; on the root that should look like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;currentPage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; listPerPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;currentPage &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;emptyOrRows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; rows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getOffset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  emptyOrRows&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use this helper.js file to calculate the offset. The other function will return an empty array if the rows variable is empty, else it will return rows.&lt;/p&gt;
&lt;p&gt;Next we will update the query to get quotes in &lt;code&gt;/services/quotes.js&lt;/code&gt; service. The change quote service looks like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; helper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../helper&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;SELECT id, quote, author FROM quote LIMIT ?,?&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emptyOrRows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main difference for the pagination feature compared to the older quotes service is the query has offset and limit passed to it. Notice that we are using a prepared statement which makes the query secure from SQL injection. You can read more about SQL injection prevention with prepared statements in this &lt;a href=&quot;https://stackoverflow.com/a/8265319/112849&quot;&gt;stackoverflow answer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other file changed to get the pagination feature is &lt;code&gt;/routes/quotes.js&lt;/code&gt;. The new quotes.js route looks like below now:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only change here is we are passing the &lt;code&gt;page&lt;/code&gt; query parameter to the &lt;code&gt;getMultiple&lt;/code&gt; function. This will enable pagination like &lt;code&gt;/quotes?page=2&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;If you run the app and hit the browser with &lt;code&gt;http://localhost:3000/quotes?page=2&lt;/code&gt; you will see 5 quotes like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/06pagination-output.jpg&quot; title=&quot;Nodemon output for quotes API pagination&quot; alt=&quot;Quotes API pagination output for Node.js MySQL tutorial using Express js&quot; /&gt;
&lt;p&gt;So what happened here, the main change is in the way we construct the &lt;code&gt;SELECT&lt;/code&gt; query. Depending on the page number we calculate an offset and pass a different query:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For page 1, the query is &lt;code&gt;SELECT id, quote, author FROM quote LIMIT 0,10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;For page 2, the query becomes &lt;code&gt;SELECT id, quote, author FROM quote LIMIT 10,10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you see the offset calculation makes it possible to get the next set of 10 quotes where 10 is the no. of items we want to list as per our config. This might be a big change to comprehend in one go, please have a look at this &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/5/files&quot;&gt;pull request&lt;/a&gt; for all the code that has changed for the pagination feature to come to life.&lt;/p&gt;
&lt;h4 id=&quot;next-steps&quot;&gt;Next steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;As you have a basic GET API up and running you can add more features to it like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add a new route like &lt;code&gt;/quotes/{id}&lt;/code&gt; to get a single quote by id&lt;/li&gt;
&lt;li&gt;You can add quote filter/search capability like by the author for instance&lt;/li&gt;
&lt;li&gt;You can also search by word using SQL Like &lt;code&gt;%computer%&lt;/code&gt; can give all quotes that have the word computer in it&lt;/li&gt;
&lt;li&gt;To make matters exciting for practice, add a new column called &lt;code&gt;category&lt;/code&gt; and update the API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will leave it up to you on what else you would want to build on top of the newly created GET quotes REST API endpoint. The next step is to create a POST API to create new quotes.&lt;/p&gt;
&lt;h3 id=&quot;save-new-quote---post-api-for-node.js-mysql-tutorial&quot;&gt;Save new quote - POST API for Node.js MySQL tutorial &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#save-new-quote---post-api-for-node.js-mysql-tutorial&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create new quotes we will need a Post API. Before we get on with it, let’s clear out our assumptions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We will not use a sophisticated validation library like &lt;a href=&quot;https://github.com/sideway/joi&quot;&gt;Joi&lt;/a&gt; for this demo.&lt;/li&gt;
&lt;li&gt;We will keep the response codes as simple as possible&lt;/li&gt;
&lt;li&gt;We will not build PUT (update) and DELETE endpoints. As you can run the INSERT query UPDATE and DELETE will be similar with a difference of the quote ID/IDs being passed in the request body.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s get cracking with the code for the POST quotes API. The first thing is we will add the POST quotes route to &lt;code&gt;/routes/quotes.js&lt;/code&gt; file just above &lt;code&gt;module.exports = router&lt;/code&gt; line:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* POST quotes */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while posting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that we will add &lt;code&gt;validateCreate&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; functions in the &lt;code&gt;/services/quotes.js&lt;/code&gt; service file and expose &lt;code&gt;create&lt;/code&gt; in module.exports  like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; messages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;No object is provided&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote cannot be longer than 255 characters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Author name cannot be longer than 255 characters&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;INSERT INTO quote (quote, author) VALUES (?, ?)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Error in creating quote&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;affectedRows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Quote created successfully&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  create&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know the validation is a bit primitive but it does the job for now. A better way to do it would be to use Joi or a similar validation library. Next up let’s add a new error handler to show our validation or other errors as JSON responses in the &lt;code&gt;/app.js&lt;/code&gt; file like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; app&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to put it just above the &lt;code&gt;module.exports = app&lt;/code&gt; line so that they get executed after the routes. Now you can start your app and try the cURL commands below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i -X POST -H &lt;span class=&quot;token string&quot;&gt;&#39;Accept: application/json&#39;&lt;/span&gt; -H &lt;span class=&quot;token string&quot;&gt;&#39;Content-type: application/json&#39;&lt;/span&gt; http://localhost:3000/quotes --data &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;quote&quot;:&quot;Controlling complexity is the essence of computer programming.&quot;}&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#should give an error about missing author&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i -X POST -H &lt;span class=&quot;token string&quot;&gt;&#39;Accept: application/json&#39;&lt;/span&gt; -H &lt;span class=&quot;token string&quot;&gt;&#39;Content-type: application/json&#39;&lt;/span&gt; http://localhost:3000/quotes --data &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;quote&quot;:&quot;Controlling complexity is the essence of computer programming.&quot;,&quot;author&quot;:&quot;Brian Kernighan&quot;}&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#should work&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is the output of both cURL commands:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/07curl-output.jpg&quot; title=&quot;cURL output for quotes API pagination&quot; alt=&quot;Quotes API cURL for POST output of Node.js MySQL tutorial using Express js&quot; /&gt;
&lt;p&gt;Depending on the configs and the database records you might get a &lt;code&gt;duplicate entry&lt;/code&gt; error. Just change the quote to something different and try. The code changes for the POST quote API is in this &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/6/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find lots of quotes to try &lt;a href=&quot;https://github.com/skolakoda/programming-quotes-api&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;So there you have it, a basic RESTful API for quotes that can crate new quotes with a POST endpoint. There is a GET endpoint to fetch quotes with pagination.&lt;/p&gt;
&lt;p&gt;If you want to try a hosted DB you can check this &lt;a href=&quot;https://amanhimself.dev/blog/build-rest-api-with-nodejs-harperdb/&quot;&gt;Node.js HarperDB&lt;/a&gt; tutorial.&lt;/p&gt;
&lt;h2 id=&quot;tldr%3B-i-want-to-run-it-quickly&quot;&gt;TLDR; I want to run it quickly &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#tldr%3B-i-want-to-run-it-quickly&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As all the code is in a public &lt;a href=&quot;https://github.com/geshan/nodejs-mysql&quot;&gt;Github repository&lt;/a&gt;, you can get started in no time running the following commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository: &lt;code&gt;git clone git@github.com:geshan/nodejs-mysql.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then run &lt;code&gt;cd nodejs-mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that execute &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Consequently run: &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then hit &lt;code&gt;https://localhost:3000/quote&lt;/code&gt; on your favorite browser&lt;/li&gt;
&lt;li&gt;You should see something like below:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-mysql-tutorial/04quotes-dynamic-output.jpg&quot; title=&quot;Quotes API with dynamic output from DB&quot; alt=&quot;Quotes API dynamic output for Node.js MySQL tutorial using Express js from DB table quote&quot; /&gt;
&lt;p&gt;You can look at the code and try to see how the whole thing is pieced together in this Node.js MySQL tutorial with Express Js for a quotes REST API. This API can act as a good base for a &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/&quot;&gt;Node.js microservice&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can dockerize the REST API app following this step-by-step &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;tutorial&lt;/a&gt;. After that app is dockerized you can host it easily on something like &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot;&gt;Google Cloud Run&lt;/a&gt;. If you want a quick start testing ground without Docker, I would recommend &lt;a href=&quot;https://glitch.com/&quot;&gt;Glitch&lt;/a&gt;. You can try 3 &lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/&quot;&gt;Node.js free hosting&lt;/a&gt; options too.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Creating a REST API with Node.js and MySQL is not that difficult.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some things are not taken care of in this Node.js MySQL tutorial with Express but this is an excellent good starting point.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Docker with Node.js a step-by-step tutorial</title>
		<link href="https://geshan.com.np/blog/2020/11/nodejs-with-docker/"/>
		<updated>2020-11-20T09:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/11/nodejs-with-docker/</id>
		<content type="html">&lt;p&gt;Both Docker and Node.js have risen in popularity in the past 5 years. Running Node.js on docker containers with docker-compose for local development is a great experience. In this step-by-step tutorial, we will look at how Node.js docker and docker-compose with multi-stage docker build work in sync. Time to get cracking.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/00nodejs-docker-docker-compose.jpg&quot; title=&quot;Docker with Node.js and docker compose a step-by-step tutorial&quot; alt=&quot;Docker with Node.js and docker compose&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#docker-the-new-norm&quot;&gt;Docker the new norm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#node.js-on-docker-with-high-scalability&quot;&gt;Node.js on Docker with high scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#assumptions-for-docker-with-node.js&quot;&gt;Assumptions for Docker with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#steps&quot;&gt;Steps&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.-setup-express-with-express-generator&quot;&gt;Setup express with express-generator&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.1-use-express-generator-to-scaffold-the-app&quot;&gt;1.1 Use express-generator to scaffold the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.2-edit-the-index-to-see-the-changes&quot;&gt;1.2 Edit the index to see the changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.3-add-nodemon-to-monitor-changes-and-reload&quot;&gt;1.3 Add nodemon to monitor changes and reload&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#2.-use-node.js-on-docker&quot;&gt;Use Node.js on Docker&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#2.1-simple-docker-file-for-local-node.js-docker-development&quot;&gt;2.1 Simple docker file for local Node.js docker development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#2.2-multi-stage-docker-file-to-support-nodejs-docker-in-production&quot;&gt;2.2 Multi-stage docker file to support Nodejs docker in production&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#3.-node.js-docker-made-better-with-docker-compose&quot;&gt;Node.js Docker made better with docker-compose&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#3.1-build-the-node.js-docker-compose-with-dev-target&quot;&gt;3.1 Build the Node.js docker-compose with dev target&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#3.2-run-the-docker-with-node.js-using-docker-compose-up&quot;&gt;3.2 Run the Docker with Node.js using docker compose up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#tldr%3B-give-me-a-quick-run-down&quot;&gt;TLDR; Give me a quick run down&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#considerations&quot;&gt;Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;docker-the-new-norm&quot;&gt;Docker the new norm &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#docker-the-new-norm&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker has &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;changed the way&lt;/a&gt; we software engineers work in the past 5-7 years.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Containers have made it easier to ship the whole stack including the OS, not just the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is more than one reason to use docker everywhere, especially in the &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;development environment&lt;/a&gt;. Docker was the second most loved platform in the &lt;a href=&quot;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-platforms&quot;&gt;Stack Overflow Survey 2020&lt;/a&gt; same as &lt;a href=&quot;https://insights.stackoverflow.com/survey/2019#technology-_-most-loved-dreaded-and-wanted-platforms&quot;&gt;2019&lt;/a&gt;. The same survey 2020 edition also quotes&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“We also see some year over year growth in the popularity of container technologies such as Docker and Kubernetes.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker is used by 35% of all respondents and 39.2% of professional developers. It is safe to say 1/3rd or more software engineers are using docker. In 2020 and beyond, if you are not using docker as a developer you are missing out for sure.&lt;/p&gt;
&lt;h2 id=&quot;node.js-on-docker-with-high-scalability&quot;&gt;Node.js on Docker with high scalability &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#node.js-on-docker-with-high-scalability&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Node.js was initially released in 2009. It has been used for high traffic web applications by big companies like &lt;a href=&quot;http://highscalability.com/blog/2013/12/11/using-nodejs-paypal-doubles-rps-lowers-latency-with-fewer-de.html&quot;&gt;Paypal&lt;/a&gt;, &lt;a href=&quot;https://netflixtechblog.com/making-netflix-com-faster-f95d15f2e972&quot;&gt;Netflix&lt;/a&gt;, &lt;a href=&quot;https://tech.ebayinc.com/engineering/how-we-built-ebays-first-node-js-application/&quot;&gt;Ebay&lt;/a&gt;, and &lt;a href=&quot;http://highscalability.com/blog/2012/10/4/linkedin-moved-from-rails-to-node-27-servers-cut-and-up-to-2.html&quot;&gt;LinkedIn&lt;/a&gt; to name a few. It has surely been battle-tested in the past 10 years and has proven its mettle.&lt;br /&gt;
It also works well with a big team where &lt;a href=&quot;https://blog.risingstack.com/how-enterprises-benefit-from-microservices-architectures/#spotifybuildsflawlessuserexperiencewithmicroservices&quot;&gt;Spotify&lt;/a&gt; is an example. It was used by 90 teams and 600 developers at Spotify. As per &lt;a href=&quot;https://w3techs.com/technologies/details/ws-nodejs&quot;&gt;W3tech&lt;/a&gt;, 1% of websites use Node.js.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1% of the websites tracked by W3tech might seem a small number, but Node.js is popular in websites with high traffic as mentioned above.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With high &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt; in the picture, it becomes a lot easier to scale the application horizontally with Docker and Kubernetes. We can say thet, using Docker with Node.js enables high scalability.&lt;/p&gt;
&lt;h2 id=&quot;assumptions-for-docker-with-node.js&quot;&gt;Assumptions for Docker with Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#assumptions-for-docker-with-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You have some familiarity with using Node.js (express js or any other framework)&lt;/li&gt;
&lt;li&gt;You have some experience using Docker (local development, production environments preferred)&lt;/li&gt;
&lt;li&gt;I am using Docker version 19.03.13 and docker-compose version 1.27.4, I hope you have similar versions.&lt;/li&gt;
&lt;li&gt;For the first part of this tutorial, we will use Node.js 8 + with npm and &lt;a href=&quot;https://www.freecodecamp.org/news/npm-vs-npx-whats-the-difference/&quot;&gt;npx&lt;/a&gt; installed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;steps&quot;&gt;Steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s dive deeper into step-by-step details of this tutorial on how to run a Node.js express demo application on docker with docker-compose.&lt;/p&gt;
&lt;h3 id=&quot;1.-setup-express-with-express-generator&quot;&gt;1. Setup express with express-generator &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.-setup-express-with-express-generator&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the first step, it is time to set up a bare-bones Node.js express application. To generate the express js application we will use the &lt;a href=&quot;https://expressjs.com/en/starter/generator.html&quot;&gt;express application generator&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;1.1-use-express-generator-to-scaffold-the-app&quot;&gt;1.1 Use express-generator to scaffold the app &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.1-use-express-generator-to-scaffold-the-app&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To generate your demo Node.js express application for docker with Node.js, execute the following commands:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;npx express-generator --view&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;pug express-app&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we are generating a web app not an API and using &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;pug&lt;/a&gt; as the templating engine for the views. It should give you an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/01setup-nodejs-express-with-generator.jpg&quot; title=&quot;Generate Express.js with generator&quot; alt=&quot;Output of Node.js Express generator&quot; /&gt;
&lt;p&gt;Now, let’s run the app to see how it looks on the browser, no Node.js on docker yet. To start the Node.js express application, please run the following commands:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; express-app&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DEBUG&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;express-app:* &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, you should see something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/02run-express.jpg&quot; title=&quot;Run express with debug enabled&quot; alt=&quot;Output of Express run with Debug&quot; /&gt;
&lt;p&gt;Hit &lt;code&gt;http://localhost:3000&lt;/code&gt; on a browser like Chrome to check if the app is running correctly. You should see something similar to this:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/03express-output.jpg&quot; title=&quot;Express output on browser&quot; alt=&quot;Express output on the browser&quot; /&gt;
&lt;p&gt;When you hit the homepage on the browser, you will also see some logs on how long the request took to respond on the command line.&lt;/p&gt;
&lt;p&gt;At this point, I have added it to git, if you want to view the code it is in this &lt;a href=&quot;https://github.com/geshan/express-app/pull/1/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;1.2-edit-the-index-to-see-the-changes&quot;&gt;1.2 Edit the index to see the changes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.2-edit-the-index-to-see-the-changes&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You can edit the page to say something different like &lt;code&gt;Express on Docker&lt;/code&gt; and &lt;code&gt;Let’s get started&lt;/code&gt; or something of that sort. To do this we will need to edit 2 files, &lt;code&gt;/routes/index.js&lt;/code&gt; and &lt;code&gt;views/index.pug&lt;/code&gt;, like below. You can get the file changes in this &lt;a href=&quot;https://github.com/geshan/express-app/pull/2/files&quot;&gt;pull request&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/04nodejs-code-changes.jpg&quot; title=&quot;Change some express code&quot; alt=&quot;Change on some express node.js code&quot; /&gt;
&lt;p&gt;It shows up on the browser like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/05express-output-changes.jpg&quot; title=&quot;Express code changes on the browser&quot; alt=&quot;Code changes of Node.js express refected onn the browser&quot; /&gt;
&lt;h4 id=&quot;1.3-add-nodemon-to-monitor-changes-and-reload&quot;&gt;1.3 Add nodemon to monitor changes and reload &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.3-add-nodemon-to-monitor-changes-and-reload&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;For a better developer experience, it is best to reload the server when a file changes. To achieve this we use &lt;a href=&quot;https://nodemon.io/&quot;&gt;nodemon&lt;/a&gt;. There are 2 ways to use Nodemon. The first way is to install it as a global node module resulting in a global &lt;code&gt;nodemon&lt;/code&gt; command. The second one is to have it as a dev dependency local to the project. We will be using the first way with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g nodemon&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;#if you don’t have nodemon installed&lt;/span&gt;&lt;br /&gt;nodemon bin/www&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you run your application index (&lt;code&gt;bin/www&lt;/code&gt; in this case) with &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; it will restart the server on each file save. Below is an example of how it looks on server restarts on code change:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/06run-express-with-nodemon.jpg&quot; title=&quot;Run Express with nodemon&quot; alt=&quot;Running Node.js express with nodemon&quot; /&gt;
&lt;p&gt;At this stage, you have the generated Node.js express app running. It can also be run with nodemon to restart the Node.js server on every file save. Next stage is to use Node.js on docker.&lt;/p&gt;
&lt;h3 id=&quot;2.-use-node.js-on-docker&quot;&gt;2. Use Node.js on Docker &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#2.-use-node.js-on-docker&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To use Node.js on Docker, we will start with a &lt;code&gt;Dockerfile&lt;/code&gt;. As per the &lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot;&gt;Docker’s&lt;/a&gt; official website:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will start with a simple dockerfile and move on to a multi-stage one. We will use a multi-stage build dockerfile so that we have one stage for development and another one for production. In the development stage we will have Nodemon. There will be some optimization for the production docker container, one of them being the absence of not needed Nodemon.&lt;/p&gt;
&lt;h4 id=&quot;2.1-simple-docker-file-for-local-node.js-docker-development&quot;&gt;2.1 Simple docker file for local Node.js docker development &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#2.1-simple-docker-file-for-local-node.js-docker-development&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Below is the simple Node Dockerfile for the express application:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:14-alpine&lt;br /&gt;&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package.json package-lock.json /src/&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --production&lt;br /&gt;&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;bin/www&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dockerfile is simple. It is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;using &lt;code&gt;node:14-alpine&lt;/code&gt; as the starting point. We are using alpine because it is a small and secure base image for docker containers.&lt;/li&gt;
&lt;li&gt;We first copy package.json and lock file to the WORKDIR &lt;code&gt;/src&lt;/code&gt; to exploit docker’s build caching&lt;/li&gt;
&lt;li&gt;Then we run &lt;code&gt;npm install --production&lt;/code&gt; to get only the needed application dependencies from npm&lt;/li&gt;
&lt;li&gt;After that our application code is copied to &lt;code&gt;/src&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Consequently the port is exposed and command to star the server is executed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With good use of Docker caching and BUILDKIT you can get &lt;a href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/&quot;&gt;faster docker builds&lt;/a&gt;. To build the above dockerfile to a Node.js docker image execute the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; docker build -t nodejs-express-docker &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will take some time. After it is done you should see an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/07docker-build-with-biuildkit.jpg&quot; title=&quot;Docker build with Buildkit&quot; alt=&quot;Docker build output with buildkit use&quot; /&gt;
&lt;p&gt;Time to run the docker image and see the output for Node.js with Docker on the browser. To do this run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm --name nodejs_express -d -p &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000 nodejs-express-docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; is used to remove the container when it is stopped&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; is used to name the container running Node.js on docker, it will be used later to see logs and stop the container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; is used to detach the container process sending it in the background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 3000:3000&lt;/code&gt; means the local post 3000 is mapped to container port 3000&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now to know the container is running, run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker &lt;span class=&quot;token function&quot;&gt;ps&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see something like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS              PORTS                    NAMES&lt;br /&gt;930b3227688b        nodejs-express-docker   &lt;span class=&quot;token string&quot;&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; seconds ago       Up &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt; seconds        &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;.0.0:3000-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;/tcp   nodejs_express&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can view the logs from the container with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker logs -f nodejs_express&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will attach the command line (bash) to the container logs. Then hit the url &lt;code&gt;http://localhost:3000&lt;/code&gt; on a browser. You will see some logs. Hit &lt;code&gt;Ctrl+C&lt;/code&gt; to stop viewing logs. Now you can stop the container with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker stop nodejs_express&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is a recap of running the docker container, viewing logs and stopping it:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/08docker-run-simple.jpg&quot; title=&quot;Docker run logs and stop&quot; alt=&quot;Ouptut of docker run with logs and later stopping it&quot; /&gt;
&lt;p&gt;This above simple dockerfile is also available as a &lt;a href=&quot;https://github.com/geshan/express-app/pull/3/files&quot;&gt;pull request&lt;/a&gt; for your convenience. At this juncture, we can proceed to make the Node.js dockerfile even better with &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multi-stage docker build&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;2.2-multi-stage-docker-file-to-support-nodejs-docker-in-production&quot;&gt;2.2 Multi-stage docker file to support Nodejs docker in production &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#2.2-multi-stage-docker-file-to-support-nodejs-docker-in-production&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;We will create 3 stages from the above simple dockerfile. The stages will be as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Base: This stage will have things common for docker with Node.js&lt;/li&gt;
&lt;li&gt;Production: This stage will have components useful for production environment for Node.js on docker. It also uses &lt;code&gt;npm ci&lt;/code&gt; in place of npm install.&lt;/li&gt;
&lt;li&gt;Dev: This stage will have nodemon which is only useful for developing Node.js on docker&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is the modified dockerfile:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:14-alpine as base&lt;br /&gt;&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package.json package-lock.json /src/&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as production&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; ci&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;bin/www&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as dev&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;development&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g nodemon &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;nodemon&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;bin/www&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can build the above Node.js dockerfile to run Node.js on docker with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; docker build --target&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;dev -t nodejs-express-docker-multi-stage &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The addition here in this &lt;code&gt;docker build&lt;/code&gt; command compared to the above one is the inclusion of &lt;code&gt;--target=dev&lt;/code&gt;. It tells docker to build the &lt;code&gt;dev&lt;/code&gt; stage not &lt;code&gt;production&lt;/code&gt;. If you want to build this multi-stage docker file for Node.js on docker use &lt;code&gt;--target=production&lt;/code&gt; and it will create a docker image optimized for production.&lt;/p&gt;
&lt;p&gt;To run the Node.js docker image and attach to its logs, you can run the following comamnd:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm --name nodejs_express_ms -d -p &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000 -v &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;:/src nodejs-express-docker-multi-stage &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker logs -f nodejs_express_ms&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main difference here from the above docker run command for Node.js with Docker is &lt;code&gt;-v &amp;quot;$(pwd)&amp;quot;:/src&lt;/code&gt;. As we want the server to restart on every file change the current directory is mounted on the docker container’s work dir. With this on each change the sever will restart for Node.js on docker.&lt;/p&gt;
&lt;p&gt;The mulit-stage dockerfile for docker with Node.js can be found in this &lt;a href=&quot;https://github.com/geshan/express-app/pull/4/files&quot;&gt;pull request&lt;/a&gt;. Below is a quick recap of the commands for Node.js docker multi-stage build:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/09docker-run-multi-stage.jpg&quot; title=&quot;Docker run logs and stop with multi-stage&quot; alt=&quot;Ouptut of docker run with logs and later stopping it for multi-stage Docker with Node.js&quot; /&gt;
&lt;h3 id=&quot;3.-node.js-docker-made-better-with-docker-compose&quot;&gt;3. Node.js Docker made better with docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#3.-node.js-docker-made-better-with-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As seen, we had to run long commands like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm --name nodejs_express_ms -d -p &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000 -v &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&quot;&lt;/span&gt;:/src nodejs-express-docker-multi-stage &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It was not easy, to say the least. Stopping the running contianer also needed another &lt;code&gt;docker stop&lt;/code&gt; command. The solution to these issue is using docker-compose with Node.js on docker. Docker compose can be used effectively to sew up multiple services like a database with the applicaiton Node.js docker container.&lt;/p&gt;
&lt;p&gt;With docker-compose you can get the application running with just as single commands, &lt;code&gt;docker compose up&lt;/code&gt;. It will build the containers if they are not built and run them for you. Next, we will see how to do it.&lt;/p&gt;
&lt;h4 id=&quot;3.1-build-the-node.js-docker-compose-with-dev-target&quot;&gt;3.1 Build the Node.js docker-compose with dev target &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#3.1-build-the-node.js-docker-compose-with-dev-target&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;To being with, below is the docker-compose.yml file that can run the applicaiton on docker with Node.js using docker-compose:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  web:&lt;br /&gt;    build:&lt;br /&gt;      context: ./&lt;br /&gt;      target: dev&lt;br /&gt;    volumes:&lt;br /&gt;      - .:/src&lt;br /&gt;    command: &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; start&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&quot;3000:3000&quot;&lt;/span&gt;&lt;br /&gt;    environment:&lt;br /&gt;      NODE_ENV: dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The docker compose file has some parts to understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The version is latest at &lt;code&gt;3.8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In services, the web service has &lt;code&gt;target:dev&lt;/code&gt; being sent so that we build only for the dev stage not production&lt;/li&gt;
&lt;li&gt;The current directory &lt;code&gt;.&lt;/code&gt; is mounted to the docker container at &lt;code&gt;/src&lt;/code&gt; so the changes will be reflected in the container too.&lt;/li&gt;
&lt;li&gt;We changed the &lt;code&gt;npm start&lt;/code&gt; command in the Docker with Node.js to use &lt;code&gt;nodemon&lt;/code&gt; as we wil use docker compose only for development.&lt;/li&gt;
&lt;li&gt;We pass in only one environment variable &lt;code&gt;NODE_ENV&lt;/code&gt; as &lt;code&gt;dev&lt;/code&gt; other environment variables for instance database credentials can also be passed in as environment variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be using &lt;code&gt;BUILDKIT&lt;/code&gt; to build docker containers with docker-compose too. To use BUILKIT with docker-compose while building the docker container we can execute the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token assign-left variable&quot;&gt;COMPOSE_DOCKER_CLI_BUILD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; docker-compose build&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here you see the output of the docker-compose build for docker with Node.js with BUILKIT in action:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/10nodejs-docker-compose-build.jpg&quot; title=&quot;Node.js Docker compose build with build kit&quot; alt=&quot;Ouptut of docker bulid with multi-stage docker file using buildkit&quot; /&gt;
&lt;h4 id=&quot;3.2-run-the-docker-with-node.js-using-docker-compose-up&quot;&gt;3.2 Run the Docker with Node.js using docker compose up &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#3.2-run-the-docker-with-node.js-using-docker-compose-up&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After the containers are built it can be easily run with &lt;code&gt;docker-compose up&lt;/code&gt;.&lt;br /&gt;
After the Node.js docker containers are built, it can be run with &lt;code&gt;docker-compose up&lt;/code&gt; like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/11nodejs-docker-compose-up.jpg&quot; title=&quot;Node.js Docker compose up&quot; alt=&quot;Ouptut of Node.js docker compoase up and logs&quot; /&gt;
&lt;p&gt;The changes for docker-compose addition is in this &lt;a href=&quot;https://github.com/geshan/express-app/pull/5/files&quot;&gt;pull request&lt;/a&gt;. This is how you can run Node.js on Docker which works very well for Developing as well as putting the containers in production environment.&lt;/p&gt;
&lt;h2 id=&quot;tldr%3B-give-me-a-quick-run-down&quot;&gt;TLDR; Give me a quick run down &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#tldr%3B-give-me-a-quick-run-down&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the code is in a public &lt;a href=&quot;https://github.com/geshan/express-app&quot;&gt;github repository&lt;/a&gt;. You can run the following commands to get started quickly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Given you have git setup correctly, clone the repo with: &lt;code&gt;git clone git@github.com:geshan/express-app.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then execute &lt;code&gt;cd express-app&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that run &lt;code&gt;COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker-compose build&lt;/code&gt;, wait for build to finish.&lt;/li&gt;
&lt;li&gt;Consequently execute: &lt;code&gt;docker-compose up&lt;/code&gt;, wait for some time to see &lt;code&gt;nodemon starting...&lt;/code&gt; on your console.&lt;/li&gt;
&lt;li&gt;Following that, hit &lt;code&gt;http://localhost:3000&lt;/code&gt; on a browser&lt;/li&gt;
&lt;li&gt;You should see the following output on your browser:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-docker-docker-compose/05express-output-changes.jpg&quot; title=&quot;Node.js Express code on the browser with docker and docker compose&quot; alt=&quot;Node.js Express code on the browser with docker and docker compose&quot; /&gt;
&lt;p&gt;Enjoy! Now you can reverse engineer the &lt;code&gt;Dockerfile&lt;/code&gt; and &lt;code&gt;docker-compose.yml&lt;/code&gt; file. If you have any questions, search for specific thing like say &lt;code&gt;target&lt;/code&gt; in this post.&lt;/p&gt;
&lt;h2 id=&quot;considerations&quot;&gt;Considerations &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are some considerations you should be aware of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In my expreience, containers on production is run with an orcherstrator like Kubernetes. I believe Docker Swarm (and docker compose) in produciton have lost the race by now.&lt;/li&gt;
&lt;li&gt;It is best to use Docker build caching and BUILDKIT for faster builds.&lt;/li&gt;
&lt;li&gt;Docker compose makes it easier to use multiple dependency on development environment. For exmaple if you application depends on MySQL and Redis it can be easily put together in the &lt;code&gt;docker-compose,yml&lt;/code&gt; file.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Using Node.js on Docker is a rewarding experience. If you want to upgrade Node.js, it is as simple as changing the version on the Docker file, rebuilding it and using it. Node.js is also great for &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/&quot;&gt;microservices&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want better developer experience and amazing scalability on production with ease, start using Node.js on docker today.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>Node.js for PHP developers: 5 must-know pragmatic aspects with code examples</title>
		<link href="https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/"/>
		<updated>2020-11-14T12:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/</id>
		<content type="html">&lt;p&gt;While the popularity of Node.js is &lt;a href=&quot;https://trends.google.com/trends/explore?date=2019-11-12%202020-11-12&amp;amp;q=%2Fm%2F060kv,%2Fm%2F0bbxf89&quot;&gt;increasing&lt;/a&gt;, PHP’s traction is going &lt;a href=&quot;https://i.ibb.co/0XjJCRC/W3Tech.png&quot;&gt;down&lt;/a&gt;. With that context, this post is going to elaborate on 5 must-know practical aspects of using Node.js for PHP developers. These will be things no-one talks or writes about, time to get going.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-for-php-developers/01nodejs-for-php-developers.jpg&quot; title=&quot;Node.js for PHP developers practical aspects&quot; alt=&quot;Node.js for PHP developers practical aspects with code examples&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-for-php-developers-(not-node.js-vs-php)&quot;&gt;Node.js for PHP developers (not Node.js vs PHP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-for-php-developers-the-practical-side&quot;&gt;Node.js for PHP developers the practical side&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-code-execution-is-async-and-non-sequential&quot;&gt;Node.js code execution is async and non-sequential&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-promises-possibilities&quot;&gt;Node.js promises possibilities&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-process-is-long-running%2C-unlike-php&quot;&gt;Node.js process is long-running, unlike PHP&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#memoization-example&quot;&gt;Memoization example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#connection-pool-example-with-mysql&quot;&gt;Connection Pool example with MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#debugging-is-easier-in-node.js-than-in-php&quot;&gt;Debugging is easier in Node.js than in PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#major-version-upgrades-in-node.js-is-seamless-over-php&quot;&gt;Major version upgrades in Node.js is seamless over PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#dockerizing-a-node.js-application-is-a-breeze-compared-to-php&quot;&gt;Dockerizing a Node.js application is a breeze compared to PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;node.js-for-php-developers-(not-node.js-vs-php)&quot;&gt;Node.js for PHP developers (not Node.js vs PHP) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-for-php-developers-(not-node.js-vs-php)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This piece is a list of things you as a PHP developer must know and learn to use Node.js effectively. On the contrary, this post is not a Node.js vs PHP write up where PHP is bashed. I have used both languages. I started to write more Node.js in 2016. When I started I faced some difficulties as I was used to PHP at work for more than 7 years prior to that. There was a book released towards 2012 end covering &lt;a href=&quot;https://www.oreilly.com/library/view/nodejs-for-php/9781449333775/&quot;&gt;Node.js for PHP developers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog post is not going to talk about what PHP or Node.js is, you can read about it in other &lt;a href=&quot;https://www.freecodecamp.org/news/what-exactly-is-node-js-ae36e97449f5/&quot;&gt;posts&lt;/a&gt;. I will also not talk much about the &lt;a href=&quot;https://blog.cloudboost.io/why-is-node-called-a-non-blocking-i-o-model-eb639063bc14&quot;&gt;Non-Blocking I/O&lt;/a&gt; or the &lt;a href=&quot;https://blog.logrocket.com/a-complete-guide-to-the-node-js-event-loop/&quot;&gt;event loop&lt;/a&gt;. Still, some of it will be brushed through when discussing the practical aspects of writing good Node.js code.&lt;/p&gt;
&lt;h2 id=&quot;node.js-for-php-developers-the-practical-side&quot;&gt;Node.js for PHP developers the practical side &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-for-php-developers-the-practical-side&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PHP has been alive since 1995 and reportedly is still used by &lt;a href=&quot;https://w3techs.com/technologies/history_overview/programming_language/ms/q&quot;&gt;79.%&lt;/a&gt; of the websites monitored by W3tech (I can’t really say if it the whole internet). So chances are very high that you have used PHP or deployed something written in PHP. For instance with a growing &lt;a href=&quot;https://w3techs.com/technologies/details/cm-wordpress&quot;&gt;trend&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WordPress is used by 63.7% of all the websites whose content management system we know. This is 39.0% of all websites monitored by W3Tech.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the other hand, Node.js was released in 2009. Major tech companies like Linked In and Paypal started adopting it by &lt;a href=&quot;https://engineering.linkedin.com/42/and-running-nodejs-tech-talk-tom-hughes-croucher&quot;&gt;2011&lt;/a&gt; to &lt;a href=&quot;https://medium.com/paypal-engineering/node-js-at-paypal-4e2d1d08ce4f&quot;&gt;2013&lt;/a&gt; for various reasons like &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/&quot;&gt;microservices&lt;/a&gt;. As per Stack Overflow developer survey of &lt;a href=&quot;https://insights.stackoverflow.com/survey/2020#technology-other-frameworks-libraries-and-tools&quot;&gt;2020&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the second year in a row, Node.js takes the top spot, as it is used by half of the respondents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is not a secret that Node.js is getting very popular in the past &lt;a href=&quot;https://trends.google.com/trends/explore?date=2015-11-12%202020-11-13&amp;amp;q=%2Fm%2F0bbxf89&quot;&gt;5 years&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So as a PHP developer, these are 5 must-know practical things to be a great Node.js software engineer. Node.js for PHP developers is similar in some sense but also different in some other aspects some are described below:&lt;/p&gt;
&lt;h3 id=&quot;node.js-code-execution-is-async-and-non-sequential&quot;&gt;Node.js code execution is async and non-sequential &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-code-execution-is-async-and-non-sequential&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is a behavior that tricks lots of PHP developers. In PHP the code runs in sequence, at first line 1 then 2, and so forth. In Javascript and particularly in Node.js that may not be the case. You can potentially put things in the background with good use of promises and callbacks.&lt;/p&gt;
&lt;p&gt;Below is a modified code example with an explanation taken from my open source &lt;a href=&quot;https://github.com/geshan/currency-api/blob/master/src/exchangeRates.js#L7-L43&quot;&gt;currency-api&lt;/a&gt; repo:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getExternal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fromCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onDate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getRate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fromCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;INSERT INTO exchange_rates (from_currency, to_currency, rate, on_date) VALUES (?,?,?,?) ON DUPLICATE KEY UPDATE rate = ?&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;fromCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onDate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rate&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;affectedRows &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Exchange rate of &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;rate&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; for &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;fromCurrency&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;toCurrency&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; on &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;onDate&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; could not be saved&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while writing to db: &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//this is done async for the API to respond faster&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Fetched exchange rate of &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;rate&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; for &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;fromCurrency&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; to &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;toCurrency&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; of &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;onDate&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; from the API&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; fromCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; toCurrency&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; onDate&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rate &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look closer, that innocent looking &lt;code&gt;db.query&lt;/code&gt; at line 3, has been pushed in the background. So it will execute like below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get rate&lt;/li&gt;
&lt;li&gt;Run insert query in the background&lt;/li&gt;
&lt;li&gt;While the insert is running the function are already returned the rate&lt;/li&gt;
&lt;li&gt;If there is an issue in the insert query it is logged in the catch&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is no out of the box way to do something like this in PHP. This is the first thing that stumps PHP developers. It makes it harder to understand Node.js for PHP developers. This asynchronous code execution behavior also makes finding the right stack trace harder in case of errors in Node.js.&lt;/p&gt;
&lt;p&gt;To be honest, in 2020 you can easily use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&quot;&gt;async await&lt;/a&gt;.  Even though it is syntactic sugar on Promises, it does make asynchronous programming a hell lot easier. When I started in the Node 4/6 era around 2016 with callbacks and &lt;a href=&quot;https://nodejs.dev/learn/understanding-javascript-promises/&quot;&gt;Promises&lt;/a&gt; it was a different ball game altogether. Still, beware when to not use async-await (like above) and just go with promises, then and catch. Don’t get tangled in &lt;a href=&quot;https://medium.com/@pyrolistical/how-to-get-out-of-promise-hell-8c20e0ab0513&quot;&gt;promise hell&lt;/a&gt; in the process though. Promise hell is like the next iteration of the &lt;a href=&quot;http://callbackhell.com/&quot;&gt;callback hell&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pro tip: To know which ES6 features you can use with what version of Node.js, check it out at &lt;a href=&quot;https://node.green/&quot;&gt;node.green&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another Pro Tip:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even Node.js versions are &lt;a href=&quot;https://nodejs.org/en/about/releases/&quot;&gt;LTS&lt;/a&gt;, odd ones are not. So use Node 14 or 16 not 13 or 15 in production.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Going a bit deeper into non-sequential execution, promises and the power it has plays an important role here. The ability to do concurrent things is great in Node.js and javascript in general.&lt;/p&gt;
&lt;h4 id=&quot;node.js-promises-possibilities&quot;&gt;Node.js promises possibilities &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-promises-possibilities&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Promises being &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises&quot;&gt;asynchronous&lt;/a&gt;, you can run them concurrently. There are ways to do it. You could race 3 promises and get the results from the fastest one. You can even do &lt;code&gt;promise.all&lt;/code&gt; where if one promise is rejected, it stops the whole operation. Please read more about &lt;code&gt;Promise.race&lt;/code&gt;, &lt;code&gt;promise.all&lt;/code&gt; and &lt;code&gt;promise.any&lt;/code&gt; in this &lt;a href=&quot;https://sung.codes/blog/2019/05/18/promise-race-vs-promise-any-and-promise-all-vs-promise-allsettled/&quot;&gt;great comparison&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With that in mind, you can try other NPM libraries to &lt;a href=&quot;https://github.com/sindresorhus/p-limit&quot;&gt;limit&lt;/a&gt; promise concurrency or even &lt;a href=&quot;https://github.com/sindresorhus/p-filter&quot;&gt;filter&lt;/a&gt; through promises concurrently. You can do some of it with &lt;a href=&quot;https://reactphp.org/&quot;&gt;ReactPHP&lt;/a&gt;. But it is not included in the native PHP, not even in &lt;a href=&quot;https://stitcher.io/blog/new-in-php-8&quot;&gt;PHP 8&lt;/a&gt;. This is something new to wrap your head around in Node.js for PHP developers.&lt;/p&gt;
&lt;p&gt;Let’s proceed to the next point, the process does not need to die in Node.js like in PHP.&lt;/p&gt;
&lt;h3 id=&quot;node.js-process-is-long-running%2C-unlike-php&quot;&gt;Node.js process is long-running, unlike PHP &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-process-is-long-running%2C-unlike-php&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://software-gunslinger.tumblr.com/post/47131406821/php-is-meant-to-die&quot;&gt;PHP is meant to die&lt;/a&gt; not in the sense that it will not be used. In the sense that all PHP processes must die. PHP is not really designed for long-running tasks/processes. In PHP when a new HTTP request comes in the processing start, after sending the response back the process is killed. That’s how PHP works. That creates the need for &lt;a href=&quot;https://www.php.net/manual/en/install.fpm.php&quot;&gt;FPM&lt;/a&gt; and other servers. You can argue PHP was &lt;a href=&quot;https://medium.com/@keithwhor/rise-of-functions-as-a-service-how-php-set-the-serverless-stage-20-years-ago-ccb560c5f422&quot;&gt;serverless&lt;/a&gt; by design 20+ years ago. I leave that up to you.&lt;/p&gt;
&lt;p&gt;On the other side, Node.js is a long-running process. This enables you to share information between requests as the same server/process is handling multiple requests. With a long-running process, you can easily exploit things like &lt;a href=&quot;https://codeburst.io/understanding-memoization-in-3-minutes-2e58daf33a19&quot;&gt;memoization on memory&lt;/a&gt; and &lt;a href=&quot;https://riptutorial.com/node-js/example/4587/using-a-connection-pool&quot;&gt;connection pooling&lt;/a&gt; for a database. It opens up other possibilities like counting the no. of concurrent requests on that process for instance.&lt;/p&gt;
&lt;h4 id=&quot;memoization-example&quot;&gt;Memoization example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#memoization-example&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;If you don’t know &lt;a href=&quot;https://lispcast.com/what-is-memoization/&quot;&gt;Memoization&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Memoization is a higher-order function that caches another function. It can turn some slow functions into fast ones. It saves the result of a function call after the first time to the cache, so if you call the function again with the same arguments, it will find it in the cache.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It can be used in Node.js but not in PHP natively. Some workaround is possible in PHP like saving the function return value in Redis.&lt;/p&gt;
&lt;p&gt;Below is a code sample of memoization on a express route with &lt;a href=&quot;https://github.com/sindresorhus/p-memoize&quot;&gt;p-memoize&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ONE_MINUTE_IN_MS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; options &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  maxAge&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ONE_MINUTE_IN_MS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;cacheKey&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;arguments_&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; arguments_&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/products&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; memGetProducts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pMemoize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;products&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getMultiple&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; options&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;memGetProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;search&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The clear advantage of this is less load on the datastore. For 1 minute, it will respond back with the same response for the same parameters. The output of the function &lt;code&gt;products.getMultiple&lt;/code&gt; is cached in memory for a minute. This makes the responses very fast. It is advisable to read more on &lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/&quot;&gt;javascript memoization&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;connection-pool-example-with-mysql&quot;&gt;Connection Pool example with MySQL &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#connection-pool-example-with-mysql&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Another thing that is not possible because of a dying process in PHP is connection pooling. As per &lt;a href=&quot;https://en.wikipedia.org/wiki/Connection_pool&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In software engineering, a connection pool is a cache of database connections maintained so that the connections can be reused when future requests to the database are required. Connection pools are used to enhance the performance of executing commands on a database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, you will have 5 connections in a pool and if you want to run 5 queries to the database it can be done concurrently. This saves time for both connecting to the database as well as running the query. This is easy to do in Node.js but not easily possible in PHP.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Be mindful of the number of available connections and to keep your connection pool size optimal.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For instance, if you are using Kubernetes and your application has 5 pods with a connection pool size of 2. That means your database will always have 10 open connections even though there are no queries being executed.&lt;/p&gt;
&lt;p&gt;Time for a connection pool example with MySQL database with &lt;a href=&quot;https://github.com/mysqljs/mysql#pooling-connections&quot;&gt;MySQL&lt;/a&gt; npm module:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; pool  &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; mysql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createPool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  connectionLimit &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  host            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;example.org&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  user            &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  password        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;pass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  database        &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;schema&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  pool&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SELECT 1 + 1 AS solution&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rows&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; fields&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;solution&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Shows 2&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code will run the same query 5 times in parallel with 5 MySQL connections taken from the connection pool. I wished I could do this in PHP out of the box.&lt;/p&gt;
&lt;p&gt;In my experience, Node.js works very well with Mysql. If you want to try connection pooling with Mongo DB, here is a &lt;a href=&quot;https://www.compose.com/articles/connection-pooling-with-mongodb/&quot;&gt;Mongo&lt;/a&gt; example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With a long-running process as a developer you need to be more careful about memory leaks and doing the housekeeping stuff well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where Node.js for PHP developers need a fair bit of shift in thinking about how the code is executed. On the other hand, this is a great advantage in Node.js for PHP developers.&lt;/p&gt;
&lt;h3 id=&quot;debugging-is-easier-in-node.js-than-in-php&quot;&gt;Debugging is easier in Node.js than in PHP &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#debugging-is-easier-in-node.js-than-in-php&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Line by line code debugging is an important part of developer experience for any programming language. To debug PHP code, you can use add ons like &lt;a href=&quot;https://xdebug.org/&quot;&gt;X-Debug&lt;/a&gt; with some IDE settings. X-Debug is challenging to set up, to say the least. You have to &lt;a href=&quot;https://xdebug.org/docs/install&quot;&gt;install&lt;/a&gt; it, enable the extension. After that configure it properly with an IDE like &lt;a href=&quot;https://www.jetbrains.com/help/phpstorm/configuring-xdebug.html&quot;&gt;PHPStorm&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Basically, easy is the last thing you will say about making X-debug run. Unless it is all configured well with a docker container and IDE settings are also easy to load.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On the other hand, running node &lt;a href=&quot;https://nodejs.org/api/debugger.html&quot;&gt;native debugger&lt;/a&gt; or even &lt;a href=&quot;https://geshan.com.np/blog/2019/01/getting-started-with-debugging-nodejs-applications-with-ndb/&quot;&gt;ndb&lt;/a&gt; is a lot easier compared to PHP and X-debug. With the use of  VS Code, &lt;a href=&quot;https://itnext.io/the-absolute-easiest-way-to-debug-node-js-with-vscode-2e02ef5b1bad&quot;&gt;debugging Node.js application&lt;/a&gt; is so easy that even a caveman can do it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open up Preferences &amp;gt; Settings and in the search box type in “node debug”. Under the Extensions tab, there should be one extension titled “Node debug”. From here, click the first box: Debug &amp;gt; Node: Auto Attach and set the drop-down to “on”. You’re almost ready to go now. Yes, it really is that easy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then set some breakpoints on VS code with say &lt;code&gt;index.js&lt;/code&gt; and in the terminal type &lt;code&gt;node --inspect index.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;BOOM! Your step by step Node.js debugger is running well on the VS Code editor without much effort. A good difference from PHP, there is no need to install a different extension, enable it, and configure it to be able to debug a program. No need to install an extra extension is a benefit found in Node.js for PHP developers.&lt;/p&gt;
&lt;p&gt;The next point is also about better developer experience while upgrading even multiple major versions of the language.&lt;/p&gt;
&lt;h3 id=&quot;major-version-upgrades-in-node.js-is-seamless-over-php&quot;&gt;Major version upgrades in Node.js is seamless over PHP &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#major-version-upgrades-in-node.js-is-seamless-over-php&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Jumping even multiple major versions in Node.js is a seamless experience. Upgrading from PHP 5.x to PHP 7.x is a week to month-long process depending on the size and complexity of the project.&lt;/p&gt;
&lt;p&gt;In my personal experience, I have upgraded Node.js microservices from versions 0.12 to 4 in the past. Recently I upgraded an application from Node.js 10 to 14. All of my Node.js major version upgrades have been easy.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-for-php-developers/02node-10-to-14.jpg&quot; title=&quot;Upgrading node 10 to 14 is easy&quot; alt=&quot;Node.js for PHP developers, upgrading Node.js from version 10 to 14 is seamless&quot; style=&quot;min-height: 100px;&quot; /&gt;
&lt;p&gt;Some minor package.json changes were the only small issues I encountered. After deployment, there were rarely any issues related to code compatibility. As an added bonus, the performance was usually better upgrading the major versions.&lt;/p&gt;
&lt;p&gt;On the other hand, upgrading PHP has not been easy. Minor version upgrade for an application from PHP 5.4 to 5.6 was not much cumbersome. But, going from PHP 5.6 to 7.2 for a relatively big application was a pain. It took a long time, and needed multiple composer.json changes. It was also a difficult task to test it. The good side of a major version upgrade in PHP was surely the performance boost.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Just a note here, the PHP applications I worked with were older than the Node.js applications. Your experience can surely be different than mine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;dockerizing-a-node.js-application-is-a-breeze-compared-to-php&quot;&gt;Dockerizing a Node.js application is a breeze compared to PHP &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#dockerizing-a-node.js-application-is-a-breeze-compared-to-php&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Docker’s popularity has been steadily rising in the past &lt;a href=&quot;https://trends.google.com/trends/explore?date=2015-02-11%202020-11-14&amp;amp;q=%2Fm%2F0wkcjgj&quot;&gt;5 years&lt;/a&gt;. It has changed &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;how we software engineers work&lt;/a&gt; since its release. You should use &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;Docker for local development&lt;/a&gt; too. With that in mind, Dockerizing a PHP application can be a difficult task depending on how components are laid out and the complexity of the application. Conversely, for dockerizing a Node.js application the effort is less and the process is a breeze.&lt;/p&gt;
&lt;p&gt;Below is an example of a &lt;a href=&quot;https://github.com/geshan/laravel6-on-google-cloud-run/blob/master/Dockerfile&quot;&gt;dockerfile&lt;/a&gt; for a PHP Laravel app with Apache.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM composer:1.9.0 as build&lt;br /&gt;WORKDIR /app&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /app&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;composer&lt;/span&gt; global require hirak/prestissimo &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;composer&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM php:7.3-apache-stretch&lt;br /&gt;RUN docker-php-ext-install pdo pdo_mysql&lt;br /&gt;&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;br /&gt;COPY --from&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;build /app /var/www/&lt;br /&gt;COPY docker/000-default.conf /etc/apache2/sites-available/000-default.conf&lt;br /&gt;COPY .env.example /var/www/.env&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;777&lt;/span&gt; -R /var/www/storage/ &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Listen 8080&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; /etc/apache2/ports.conf &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;chown&lt;/span&gt; -R www-data:www-data /var/www/ &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    a2enmod rewrite&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The good thing with this Docker image for Laravel is PHP is bundled with apache in the same image. It can be argued if this is a better way to do it than splitting PHP and Apache into two docker images.&lt;/p&gt;
&lt;p&gt;Also notice the &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multi-stage docker build&lt;/a&gt; in the above docker image. Composer install is done in a different image and output is copied to the main one. If we had used PHP-FPM and Nginx in different docker images, it would have been more complex. There would be a need to manage two distinct docker images.&lt;/p&gt;
&lt;p&gt;Now it&#39;s time to have a look at a Node.js &lt;a href=&quot;https://github.com/geshan/currency-api/blob/master/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:14-alpine as base&lt;br /&gt;&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package.json package-lock.json /src/&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as production&lt;br /&gt;&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as dev&lt;br /&gt;&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;development&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; config &lt;span class=&quot;token builtin class-name&quot;&gt;set&lt;/span&gt; unsafe-perm &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g nodemon&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;npm&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As Node.js has a built-in web server, the Dockerfile is much cleaner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you install node, npm is bundled with it. This eliminates the need to install packages at a different stage in the docker build.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the above Dockerfile multi-stage docker build is used to separate production and development docker images. Having the package manager (npm) bundled and having the web-server as part of the language/runtime is something different in Node.js for PHP developers. If you are interested more in Dockering a Node.js applicaiton step-by-step follow this &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;tutorial&lt;/a&gt;. Also, &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; is only installed in the dev stage as it will be used only for development.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When using Node.js for PHP developers it does need a mild shift in thinking to exploit the powers of Node.js well. Node.js is not a silver bullet. There are drawbacks and it needs adapting to different ways of code execution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Certainly, there are some benefits of using Node.js for PHP developers like async programming and concurrency. Other advantages stem out from the Node.js process being long-running.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope this post helps you get more out of Node.js as an experienced PHP developer.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>5 important reasons to choose Node.js for your microservices</title>
		<link href="https://geshan.com.np/blog/2020/11/nodejs-microservices/"/>
		<updated>2020-11-11T10:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/11/nodejs-microservices/</id>
		<content type="html">&lt;p&gt;There are multiple good reasons to build Node.js microservices, this post discusses 5 of the potent ones. Node.js and microservices are a match made in modern software engineering heaven. Let’s analyze further why Node.js microservices makes more sense.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-microservices/01nodejs-microservices.jpg&quot; title=&quot;Microservices in Node.js&quot; alt=&quot;Create noejs microservices&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#what-is-microservices-architecture&quot;&gt;What is microservices architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#what-is-node.js&quot;&gt;What is Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#node.js-pros-and-cons&quot;&gt;Node.js pros and cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#why-node.js-microservices%3F&quot;&gt;Why Node.js microservices?&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#enables-full-stack-web-development&quot;&gt;Enables full-stack web development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#built-in-web-server-for-node.js-microservices&quot;&gt;Built-in web server for Node.js Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#node.js-microservices-elevate-developer-happiness&quot;&gt;Node.js Microservices elevate developer happiness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#node-js-is-fast-and-scalable&quot;&gt;Node Js is fast and scalable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#battle-tested-and-used-at-the-enterprise-scale&quot;&gt;Battle-tested and used at the enterprise scale&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-is-microservices-architecture&quot;&gt;What is microservices architecture &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#what-is-microservices-architecture&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Martin fowler a visionary in this domain describes &lt;a href=&quot;https://martinfowler.com/articles/microservices.html&quot;&gt;microservices&lt;/a&gt; as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He further adds these services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;From his definition, it is crystal clear that microservices need to be small and cater to only one slice of the business.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Technically, it should be independent to deploy in an automated way. Node.js fits very well with the requirements for the application to be small and performant. Time to examine what node is and what it can do for creating better microservices.&lt;/p&gt;
&lt;h2 id=&quot;what-is-node.js&quot;&gt;What is Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#what-is-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mozilla developer portal describes &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_nodejs/Introduction&quot;&gt;Node.js&lt;/a&gt; as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node (or more formally Node.js) is an open-source, cross-platform runtime environment that allows developers to create all kinds of server-side tools and applications in JavaScript. The runtime is intended for use outside of a browser context (i.e. running directly on a computer or server OS). As such, the environment omits browser-specific JavaScript APIs and adds support for more traditional OS APIs including HTTP and file system libraries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From the above description, it is evident that Node.js is javascript but running in a different runtime than the browser. This runtime is the &lt;a href=&quot;https://v8.dev/&quot;&gt;V8 engine&lt;/a&gt;. It is written in C++ and is used in Chrome too.&lt;br /&gt;
This is a solid sign of &lt;a href=&quot;https://en.wikipedia.org/wiki/Jeff_Atwood&quot;&gt;Atwood’s law&lt;/a&gt; that states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any application that can be written in JavaScript, will eventually be written in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So Node.js enables us to write server-side applications in a &lt;a href=&quot;https://node.js.org/en/docs/guides/blocking-vs-non-blocking/&quot;&gt;non-blocking&lt;/a&gt; way and in a single thread. You can read more about Node.js being single-threaded or not in this &lt;a href=&quot;https://medium.com/better-programming/is-node-js-really-single-threaded-7ea59bcc8d64&quot;&gt;piece&lt;/a&gt;. Next, examine the pros and cons of Node.js and how it helps for Node.js microservices.&lt;/p&gt;
&lt;h2 id=&quot;node.js-pros-and-cons&quot;&gt;Node.js pros and cons &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#node.js-pros-and-cons&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As Bjarne Stroustrup (known for inventing C++) very well &lt;a href=&quot;https://www.goodreads.com/quotes/226225-there-are-only-two-kinds-of-languages-the-ones-people&quot;&gt;said&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Without doubts, Node.js is also a language runtime that a lot of people use and complain about. Funny enough you can use C++ addons in &lt;a href=&quot;https://node.js.org/api/addons.html&quot;&gt;Node.js&lt;/a&gt;. The video below summarizes the history as well as pros and cons of Node.js in an unambiguous way:&lt;/p&gt;
&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&quot;embed-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/2gQG4cFjahw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;It boils down to Node.js is fast, lightweight, performant, and scaleable. It also has lots of packages on npm. On the flip side, it is not great for CPU intensive programs due to blocking the event loop. Well, the video suggests “immature tools” but that can be said for most languages.&lt;/p&gt;
&lt;h2 id=&quot;why-node.js-microservices%3F&quot;&gt;Why Node.js microservices? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#why-node.js-microservices%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Node.js is very well suited for microservices.&lt;/p&gt;
&lt;p&gt;From Node.js about &lt;a href=&quot;https://node.js.org/en/about/&quot;&gt;page&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTTP is a first-class citizen in Node.js, designed with streaming and low latency in mind. This makes Node.js well suited for the foundation of a web library or framework.&lt;br /&gt;
It is great for decoupled applications as you can use lots of npm modules to sew up a great microservice. Node.js is fast and its event-based nature makes it a great choice even for real-time applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;From a practical experience, we once re-wrote a service from PHP to Node.js and it was &lt;a href=&quot;https://tech.namshi.io/blog/2017/05/28/rewriting-the-catalog-api/&quot;&gt;70% faster&lt;/a&gt;. It also used up fewer resources. Another example is &lt;a href=&quot;https://blog.risingstack.com/node-js-examples-how-enterprises-use-node-in-2016/#godaddyditchednettoworkwithNode.js&quot;&gt;GoDaddy&lt;/a&gt; moved from .net to Node.js and they loved it. Netflix improved its application &lt;a href=&quot;https://thinkmobiles.com/blog/node-js-app-examples/&quot;&gt;load time by 70%&lt;/a&gt;. Let’s analyze more reasons to opt for Node.js for your next microservice:&lt;/p&gt;
&lt;h3 id=&quot;enables-full-stack-web-development&quot;&gt;Enables full-stack web development &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#enables-full-stack-web-development&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node.js enables actual full-stack web development. The frontend without doubts needs to be in javascript. Of course, the choice of framework or library for the frontend can be a good discussion. With Node.js, the same javascript runs on the server too. If there are 5 developers in a team and all of them code javascript. It helps a lot for them to be full-stack.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Yes, the developers should learn the &lt;a href=&quot;https://geshan.com.np/blog/2020/02/difference-between-backend-frontend/&quot;&gt;backend vs frontend&lt;/a&gt; concepts but they don’t need to learn a completely new programming language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Node.js has many other features and benefits. Unlike the frontend, the software engineer doesn&#39;t need to worry about cross-browser compatibility and browser versions while writing Node.js code for a &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;REST API&lt;/a&gt;. Node.js also doesn’t need the weight of transpilers like &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As &lt;a href=&quot;http://highscalability.com/blog/2013/12/11/using-nodejs-paypal-doubles-rps-lowers-latency-with-fewer-de.html&quot;&gt;reported&lt;/a&gt; at Paypal - &lt;code&gt;“Using JavaScript on both the front-end and the back-end removed an artificial boundary between the browser and server, allowing engineers to code both.”&lt;/code&gt; So Node.js adoption does open new doors of full-stack web development.&lt;/p&gt;
&lt;h3 id=&quot;built-in-web-server-for-node.js-microservices&quot;&gt;Built-in web server for Node.js Microservices &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#built-in-web-server-for-node.js-microservices&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node.js has a built-in &lt;a href=&quot;https://node.js.org/api/http.html#http_http_createserver_options_requestlistener&quot;&gt;web server&lt;/a&gt;. You don&#39;t have to wrangle with another Nginx or Apache. You can also happily say goodbye to things like &lt;a href=&quot;https://www.php.net/manual/en/install.fpm.php&quot;&gt;FPM&lt;/a&gt; as Node.js is essentially single-threaded. You might want to use &lt;a href=&quot;https://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt; to manage the process.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Most likely you will not even need to deal with the HTTP library of Node.js. As it will be abstracted by the framework you use.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you use &lt;a href=&quot;https://expressjs.com/&quot;&gt;express js&lt;/a&gt;, it is super easy to have the webserver &lt;a href=&quot;https://expressjs.com/en/starter/hello-world.html&quot;&gt;up and running&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Node.js also handles multiple requests and responses very easily. This also makes dockerizing a Node.js application a breeze. You just have one container that has the code and the webserver. You can have a look at this &lt;a href=&quot;https://github.com/geshan/currency-api/blob/master/Dockerfile&quot;&gt;Dockerfile&lt;/a&gt; as an example, it also utilized &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;Docker multi-stage builds&lt;/a&gt;. Still, depending on the case you might want to put Nginx in front of Node.js.&lt;/p&gt;
&lt;h3 id=&quot;node.js-microservices-elevate-developer-happiness&quot;&gt;Node.js Microservices elevate developer happiness &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#node.js-microservices-elevate-developer-happiness&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Developer happiness is a subjective matter affected by &lt;a href=&quot;https://stackoverflow.blog/2020/02/27/the-eight-factors-of-happiness-for-developers/&quot;&gt;multiple factors&lt;/a&gt;. The Node.js &lt;a href=&quot;https://node.js.org/en/user-survey-report/&quot;&gt;user survey report of 2018&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Node.js is continuing to have a positive impact on users particularly around developer productivity and satisfaction; when asked to describe Node.js, respondents use mostly positive terms like – “fast”, “easy”, “awesome”, “powerful”, “flexible” and even “fun”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In addition, a &lt;a href=&quot;https://jaxenter.com/dev-report-javascript-164201.html&quot;&gt;report&lt;/a&gt; from 2019 stated that there are 11.4 million javascript developers globally. It made javascript the language with the most developers in the world.&lt;/p&gt;
&lt;p&gt;The Stackoverflow developer survey &lt;a href=&quot;https://insights.stackoverflow.com/survey/2020#technology-programming-scripting-and-markup-languages&quot;&gt;points out&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unsurprisingly, for the eighth year in a row, JavaScript has maintained it&#39;s stronghold as the most commonly used programming language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the same survey, it puts Typescript (a superset of Javascript) as the second &lt;a href=&quot;https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages&quot;&gt;most loved language&lt;/a&gt;. Javascript is at no. 10 of the most loved language list. Javascript is good to work with. Like any other language, it has its own quirks, and getting used to it. Once you are comfortable with javascript and Node.js it is a pretty good language to work with. Which is a good thing for developer happiness.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With the massive list of libraries at your disposal at &lt;a href=&quot;http://npmjs.com/&quot;&gt;NPM&lt;/a&gt; (the package manager for javascript), you can find many things you need already built and readily available.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;On top of this developer’s happiness aspect, it will not be difficult to find a javascript or Node.js software engineer.&lt;/p&gt;
&lt;p&gt;This speaks volumes about developer happiness in the Node.js ecosystem. It is also a key aspect for you to try Node.js for microservices.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;One personal experience I want to share is, how easy it is to upgrade even major version of Node.js.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recently I upgraded a microservice from Node.js 8 to Node.js version 14. The upgrade was as smooth as butter with a reduction in response time bonus. I wished I could say that for PHP.  Deploying Node.js is also easy, if your application is dockerized it becomes even easier. You can learn about dockerizing your Node.js application in this step-by-step &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;tutorial&lt;/a&gt;. This surely elevates developer happiness while working in Node.js to new levels.&lt;/p&gt;
&lt;h3 id=&quot;node-js-is-fast-and-scalable&quot;&gt;Node Js is fast and scalable &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#node-js-is-fast-and-scalable&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node.js is fast because of the non-blocking IO and &lt;a href=&quot;https://node.js.org/en/docs/guides/event-loop-timers-and-nexttick/&quot;&gt;event loop&lt;/a&gt;. With Node.js you can easily put things in the background which doesn’t come out of the box in languages like PHP. PHP for instance executes code sequentially.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Where as in Noddejs you could get a request, respond that the task is scheduled and put the task in the background to be executed.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Node.js being event-based is a very good fit for microservices. With things like streams and real-time capabilities, choosing Node.js for your next microservice should be a no brainer.&lt;/p&gt;
&lt;p&gt;Fast is another subjective term. Node.js is fast but compared against what. On the other hand, &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt; is a bit more objective. It can be measured in terms of response times and requests per second. Wallmart the world’s &lt;a href=&quot;https://www.alexa.com/siteinfo/walmart.com&quot;&gt;125th website&lt;/a&gt; in terms of traffic surely knows about high volumes and scalability. After a move to Node.js they &lt;a href=&quot;https://blog.risingstack.com/how-enterprises-benefit-from-microservices-architectures/#walmartsuccessfullyrevitalizeditsfailingarchitecturewithmicroservices&quot;&gt;reportedly&lt;/a&gt; survived 6 million page views per minute on a black Friday without downtime. That brings us to the next point, enterprise-ready.&lt;/p&gt;
&lt;h3 id=&quot;battle-tested-and-used-at-the-enterprise-scale&quot;&gt;Battle-tested and used at the enterprise scale &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#battle-tested-and-used-at-the-enterprise-scale&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There are many examples where Node.js has shined. Possibly many of them included Node.js microservices too. Having a quick look at &lt;a href=&quot;https://expressjs.com/en/resources/companies-using-express.html&quot;&gt;companies using Express&lt;/a&gt; you find big names like IBM and Accenture. Myntra is also on that list, which is currently the world’s top 659th website taking the traffic into account.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LinkedIn tried Node.js in 2012, &lt;a href=&quot;http://highscalability.com/blog/2012/10/4/linkedin-moved-from-rails-to-node-27-servers-cut-and-up-to-2.html&quot;&gt;reporting&lt;/a&gt; 27 servers cut and responses 20x faster in some scenarios.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly in &lt;a href=&quot;http://highscalability.com/blog/2013/12/11/using-nodejs-paypal-doubles-rps-lowers-latency-with-fewer-de.html&quot;&gt;Paypal&lt;/a&gt;, there was a 35% decrease in the average response time for the same page with the use of Node.js. Netflix measured a &lt;a href=&quot;https://netflixtechblog.com/making-netflix-com-faster-f95d15f2e972&quot;&gt;70% reduction&lt;/a&gt; in startup time with the use of Node.js. Likewise, &lt;a href=&quot;https://tech.ebayinc.com/engineering/how-we-built-ebays-first-node-js-application/&quot;&gt;Ebay&lt;/a&gt; converted a Node.js Hackathon project into a production application due to scalability and resource usage.&lt;/p&gt;
&lt;p&gt;The list goes on and on, &lt;a href=&quot;https://blog.risingstack.com/how-enterprises-benefit-from-microservices-architectures/#spotifybuildsflawlessuserexperiencewithmicroservices&quot;&gt;Spotify&lt;/a&gt; using Node.js microservices definitely proves the scale with 75 million active users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In addition, it also proves it can work in a large scale organization with 90 teams, 600 developers, and 5 development offices on 2 continents building the same product.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can read more success stories in this &lt;a href=&quot;https://trio.dev/blog/companies-use-node-js&quot;&gt;post&lt;/a&gt;. Node.js microservices are here to stay and they have been proven both battle-tested and working amazingly at enterprise scale.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Javascript might be &lt;a href=&quot;http://www.crockford.com/javascript/javascript.html&quot;&gt;the most misunderstood language in the world&lt;/a&gt; but with &lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices&quot;&gt;best practices&lt;/a&gt; in place Node.js is here for the long-term. It is ruling the enterprises as well as making the &lt;a href=&quot;https://medium.com/@dreamtoipo/why-modern-day-startup-heroes-are-choosing-node-js-to-develop-their-application-34e5fcbefd10&quot;&gt;startup&lt;/a&gt; developers happy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don’t hesitate to pick up Node.js for your next microservice, you might be in for a sweet surprise.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to take a social media break, 4 steps to becoming successful at it</title>
		<link href="https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/"/>
		<updated>2020-11-01T11:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/</id>
		<content type="html">&lt;p&gt;When I first thought about taking a social media break I thought it would be difficult. On the contrary, a 30-day social media break that I took proved to be quite satisfying.&lt;/p&gt;
&lt;p&gt;In this post, we will look at how to take a social media break in 4 steps where you have more chances of becoming successful at it.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/social-media-break/01social-media-break.jpg&quot; title=&quot;Social Media Break&quot; alt=&quot;How to take a social media break and win at it&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#what-is-a-social-media-break%3F&quot;&gt;What is a social media break?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#why-take-a-social-media-break-now%3F&quot;&gt;Why take a social media break now?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#do-you-need-to-take-a-social-media-break%3F&quot;&gt;Do you need to take a social media break?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#assumptions-and-goals&quot;&gt;Assumptions and goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#my-goals-of-a-social-media-break&quot;&gt;My goals of a social media break&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#steps-on-how-to-take-a-social-media-break&quot;&gt;Steps on how to take a social media break&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#1.-turn-off-push-notifications-from-social-apps-on-your-mobile&quot;&gt;Turn off push notifications from social apps on your mobile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#2.-stop-posting-using-social-media-apps&quot;&gt;Stop posting using social media apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#3.-delete-social-media-apps%2C-use-the-browser-(chrome-or-safari)-for-access-instead&quot;&gt;Delete social media apps, use the browser (chrome or safari) for access instead&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#4.-logout-of-all-your-social-accounts-even-on-the-browser&quot;&gt;Logout of all your social accounts even on the browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#bonus%3A-setup-apps-like-buffer-and-rambox-(optional)&quot;&gt;Bonus: Setup apps like Buffer and Rambox (optional)&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#final-consideration&quot;&gt;Final consideration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-is-a-social-media-break%3F&quot;&gt;What is a social media break? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#what-is-a-social-media-break%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A social media break is a time where you don’t use social media at varying degrees.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You could be completely off it, for example not posting as well as not consuming any content from the feeds or engaging in other’s posts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I read/scanned through many &lt;a href=&quot;https://wanderingaimfully.com/social-media-detox-recap/&quot;&gt;posts&lt;/a&gt;, common takeaways from doing the detox were&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.issuu.com/social-media-hiatus-how-to-take-one-and-stay-productive/&quot;&gt;Increased productivity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.self.com/story/does-going-on-a-social-media-cleanse-actually-do-anything-for-your-mental-health&quot;&gt;better sleep&lt;/a&gt;, and&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lifehack.org/318316/8-things-that-will-happen-you-break-with-social-media&quot;&gt;smarter and wiser&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I cannot vouch that I have got smarter, but I can definitely say that I have more control over when I want to use my phone.&lt;/p&gt;
&lt;p&gt;I had done some &lt;a href=&quot;https://geshan.com.np/blog/2010/12/how-to-limit-time-you-spend-on-facebook/&quot;&gt;time limiting on Facebook&lt;/a&gt; back in 2010 too. I did some cheating, I logged into Facebook to share my blog post links to multiple Facebook groups. But I did not go on and play the mindless feed scrolling game.&lt;/p&gt;
&lt;h2 id=&quot;why-take-a-social-media-break-now%3F&quot;&gt;Why take a social media break now? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#why-take-a-social-media-break-now%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It is very important to take a social media break now in midst of a global pandemic. COVID-19 has already done a lot of damage. Don’t be pulled into an endless stream of “not so good news”. This is not the best for your mental health. Social media can also be a hindrance to your &lt;a href=&quot;https://geshan.com.np/blog/2020/04/5-tips-to-work-from-home-productively/&quot;&gt;work from home productivity&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please read this &lt;a href=&quot;https://seths.blog/2018/10/social-media-is-a-symptom-not-a-tactic/&quot;&gt;piece&lt;/a&gt; by Seth Godin, may be he will convince you to take a social media break.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;do-you-need-to-take-a-social-media-break%3F&quot;&gt;Do you need to take a social media break? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#do-you-need-to-take-a-social-media-break%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What did you do the first thing in the morning after waking up? If your answer is I looked at my phone or checked any of my social media apps you &lt;code&gt;NEED&lt;/code&gt; a social media break, period.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can’t manage what you don’t measure - &lt;a href=&quot;https://www.azquotes.com/quote/867361&quot;&gt;Peter Drucker&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The same thing applies to your social media time usage (or if I can call it waste). To track your usage, you can start using &lt;a href=&quot;https://www.rescuetime.com/ref/631000&quot;&gt;Rescue TIme&lt;/a&gt;. You can track your screen time on both mobile and laptop/desktop with their app to the minute. This gives you a very good idea of how much time you are spending on Instagram, Facebook, or even Tik Tok.&lt;/p&gt;
&lt;p&gt;With the desktop app, you can also track how much time you are spending on the web application of these social media platforms. It will help you have an idea of the total time you are spending on social media platforms, then you can decide if you want to take a break or not.&lt;/p&gt;
&lt;p&gt;If you decide to do it, keep in mind that  If a YouTuber can take a social media break and succeed at it, you can surely do it. For inspiration, check it out below:&lt;/p&gt;
&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&quot;embed-container&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/9z8_YhWoq2o&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;h2 id=&quot;assumptions-and-goals&quot;&gt;Assumptions and goals &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#assumptions-and-goals&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;What do you consider social media? What do you want to get out of a social media break? Is LinkedIn social media, I think yes. Ask yourself these questions, after you have some data decide which social media platforms you want to take a break from and which platforms you want to continue using.&lt;/p&gt;
&lt;p&gt;List the social media accounts you want to get off from. In my case, it was Facebook, Twitter, LinkedIn, and Instagram in no particular order. I am still using youtube (considering not using it too). I am basically nonexistent on Pinterest and don’t even have a Tik Tok account. You could have your own list of apps for social media break which may include platforms like Tik Tok, snap chat, and Pinterest.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are doing mindless scrolling anywhere and want a digital detox from that platform include it in your social media breakup list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then it is time to set goals you want to achieve from this social media break. Remember one thing, if you are not paying you are the product. So set the right one to not be a product, the target of social media marketers. My goals were as follows:&lt;/p&gt;
&lt;h2 id=&quot;my-goals-of-a-social-media-break&quot;&gt;My goals of a social media break &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#my-goals-of-a-social-media-break&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It was not an all-out social media break for me. I produce content (mainly blog posts) I didn’t want to miss out on the social media traffic source to this blog. So my social media break was unique I was posting as usual but not consuming my feeds. Below were my goals for this social media break:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Decrease screen time mainly for mobile&lt;/li&gt;
&lt;li&gt;Stop mindless scrolling and not be a target of digital marketers :)&lt;/li&gt;
&lt;li&gt;Not be rude (not replying) to people who message me on social media&lt;/li&gt;
&lt;li&gt;Keep posting on social media with the use of Buffer or another 3rd party without being directly logged into the main platform&lt;/li&gt;
&lt;li&gt;No interactions or engaging with someone else’s post like liking or commenting&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Have clear goals set. If you just don’t want to be posting but still reading the feeds that is fine too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have succeeded in doing so but I had removed all social media apps from my phone months back. Till September this year, I was using social media platforms only on the browser before the social media break. In September I spent 13 hrs and 12 minutes on Linked In, in October it was less than an hour. Ok, I had a couple of interviews so I had to look into candidate profiles. I was not logged into LinkedIn or doing any mindless scrolling. I know this from my data on RescueTime.&lt;/p&gt;
&lt;h2 id=&quot;steps-on-how-to-take-a-social-media-break&quot;&gt;Steps on how to take a social media break &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#steps-on-how-to-take-a-social-media-break&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Each of the steps below can be stacked every x days to be effective. X is up to you depending on how much time you need.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to do it fast add up each step every week. If you want to take it slow go to the next step every 30 days all up to you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below are the steps for taking a successful social media break:&lt;/p&gt;
&lt;h3 id=&quot;1.-turn-off-push-notifications-from-social-apps-on-your-mobile&quot;&gt;1. Turn off push notifications from social apps on your mobile &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#1.-turn-off-push-notifications-from-social-apps-on-your-mobile&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first and the easiest step to start is turning off the push notifications from all of your social media apps on your mobile phone. This will result in you not being pulled into social media apps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Decide for yourself if you want to be dragged into using the addictive social media apps or if you want to go in occasionally at your will.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This initial move will help you get started on the right foot for your social media break.&lt;/p&gt;
&lt;p&gt;Depending on your mobile operating system be it android or iOS, turning off push notifications for certain apps is very easy. Here are guides for both &lt;a href=&quot;https://support.google.com/android/answer/9079661?hl=en&quot;&gt;android&lt;/a&gt; and &lt;a href=&quot;https://support.apple.com/en-au/HT201925&quot;&gt;iOS&lt;/a&gt; on how to turn off push notifications to bolster your social media break.&lt;/p&gt;
&lt;h3 id=&quot;2.-stop-posting-using-social-media-apps&quot;&gt;2. Stop posting using social media apps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#2.-stop-posting-using-social-media-apps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step is a bit challenging but necessary. You have to stop posting on your social media apps be it Facebook or Instagram. This will generate fewer notifications and decrease your urge to check social media apps time and again.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At this point, you are allowed to like, comment, and engage with others&#39; content. You are not allowed to post on any social media platform though.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You have to let your self-control kick in now.&lt;/p&gt;
&lt;p&gt;With the combination of turning off push notifications and not posting anything on your social media accounts, you should be using it less by now. The next step could be tough but it will make a huge difference in making your break a  success.&lt;/p&gt;
&lt;h3 id=&quot;3.-delete-social-media-apps%2C-use-the-browser-(chrome-or-safari)-for-access-instead&quot;&gt;3. Delete social media apps, use the browser (chrome or safari) for access instead &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#3.-delete-social-media-apps%2C-use-the-browser-(chrome-or-safari)-for-access-instead&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The consequent step is to delete all of your social media apps on your phone that are in your &amp;quot;not to use&amp;quot; list. Mobile apps are a big part of this social media addiction issue.&lt;/p&gt;
&lt;p&gt;They want you to use the app as it&#39;s sticky. An app becomes sticky and addictive because it provides a host of features that are not available on the websites. For instance, you cannot post on Instagram from the browser.&lt;/p&gt;
&lt;p&gt;The technical part is easy, you go and follow the instructions for your specific operating system be it &lt;a href=&quot;https://support.google.com/googleplay/answer/2521768?hl=en&quot;&gt;Android&lt;/a&gt; or &lt;a href=&quot;https://support.apple.com/en-us/HT207618&quot;&gt;iOS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The difficult part is you will automatically go to that section of the phone even unconsciously and try to tap on it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you completely delete the social media apps on your blacklist you have a much higher chance of success at this social media break.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Up to this point, your apps have been deleted. You have not been posting on any of your social media platforms in any way or form. In case you still need access to it, you should be using your browser. So you can still go on with the mindless scrolling which is allowed till now in your digital detox journey.&lt;/p&gt;
&lt;h3 id=&quot;4.-logout-of-all-your-social-accounts-even-on-the-browser&quot;&gt;4. Logout of all your social accounts even on the browser &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#4.-logout-of-all-your-social-accounts-even-on-the-browser&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the nail in the coffin step, you will now need to log out of all your social media apps even on the web browser. You must do it on your mobile as well as your laptop/desktop. As you might have already noticed you are no longer pulled into the social media apps.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With the mobile apps out of the equation, it becomes easier to resist the temptation of frequently checking on new updates.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Try this for a month and evaluate the situation. You should be in a much better position than before step 1 in succeeding at your social media break now.&lt;/p&gt;
&lt;h3 id=&quot;bonus%3A-setup-apps-like-buffer-and-rambox-(optional)&quot;&gt;Bonus: Setup apps like Buffer and Rambox (optional) &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#bonus%3A-setup-apps-like-buffer-and-rambox-(optional)&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As an optional step, you can still be available on the messaging side of things like Facebook messenger. This helps you to stay in touch with your friends and family. As I was still posting I used &lt;a href=&quot;https://buffer.com/&quot;&gt;Buffer&lt;/a&gt; to do so. I have been using Buffer for years to schedule my post. Buffer Publish lets you schedule up to 10 posts on 3 social channels for free. This is also great for my personal branding as I can publish the same message/link consistently across my Blog Page on Facebook, Linkedin, and Twitter.&lt;/p&gt;
&lt;p&gt;Another app I discovered a month back in preparation for this social media break is &lt;a href=&quot;https://rambox.pro/&quot;&gt;Rambox&lt;/a&gt;. Its free community edition allows you to aggregate all your messaging apps in one place. I had my LinkedIn with some &lt;a href=&quot;https://gist.github.com/geshan/72ca78cf70d8b147576ca5af523e687d&quot;&gt;custom CSS and JS&lt;/a&gt; to hide the top bar. As Rambox provides this very handy &lt;a href=&quot;https://rambox.pro/#feature-details/js_css&quot;&gt;feature&lt;/a&gt;. I also had Twitter messaging on Rambox with TweetDeck to reply to any direct messages on Twitter.&lt;/p&gt;
&lt;h2 id=&quot;final-consideration&quot;&gt;Final consideration &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#final-consideration&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;They will call you back one way or the other. For instance, Instagram sent me an email after a week of no activity like below asking me to come back:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/social-media-break/02instagram.jpg&quot; title=&quot;Come back to instagram please&quot; alt=&quot;Instagram come back email&quot; /&gt;
&lt;p&gt;But I was not going back :). You will need to be more disciplined and determined to make it a success. Below are a couple of screenshots of my notifications piling up in the last 31 days:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/social-media-break/03linkedin.jpg&quot; title=&quot;My linked in notification over flowing&quot; alt=&quot;Linked In notificaitons&quot; /&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/social-media-break/04facebook.jpg&quot; title=&quot;Facebook notificaiton&quot; alt=&quot;Facebook thinks people will not have 20+ notifications&quot; /&gt;
&lt;p&gt;My messages are clear because of Rambox and Messenger app :).&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a game of self-control and self-discipline. If you falter in one place, they will get the best of you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Take control of where you want to spend your valuable time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Of course, use your common sense. Don’t take a break from LinkedIn if you are looking for a new job. Break the social media addiction and enjoy your liberation.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;PS: Thanks to &lt;a href=&quot;https://www.instagram.com/manandhar.ansubha/&quot;&gt;Ansubha&lt;/a&gt; for helping me edit this blog post.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Docker build example: how to go from slow to fast docker builds</title>
		<link href="https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/"/>
		<updated>2020-10-24T11:15:25Z</updated>
		<id>https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/</id>
		<content type="html">&lt;p&gt;In this post, we will see a docker build example of a node js API application starting from slow and ending up in a ~10x faster build. I have already talked about the &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;reasons to use docker for development environment&lt;/a&gt;. I have also mentioned &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;how docker changed the way we software engineers work&lt;/a&gt; and &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multi-stage docker build&lt;/a&gt; in past posts. For this one let’s focus on the docker build example with faster build in mind.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-build-example/01faster-docker-build.jpg&quot; title=&quot;Go from slow to fast docker build with example&quot; alt=&quot;Whale as docker mascot&quot; /&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;information-before-jumping-in&quot;&gt;Information before jumping in &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#information-before-jumping-in&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Familiarity with Docker and the docker build process is required&lt;/li&gt;
&lt;li&gt;All examples are based on &lt;code&gt;Docker version 19.03.13, build 4484c46d9d&lt;/code&gt; on a Mac&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://github.com/geshan/currency-api&quot;&gt;Currency API&lt;/a&gt; app is used for this docker build example&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;why-faster-docker-build&quot;&gt;Why faster docker build &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#why-faster-docker-build&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many reasons you would want your Docker containers to build faster, here are some pressing ones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It will save the software engineer’s time while waiting for container images to build in the CI/CD pipeline. Imagine this if all your docker build took half the time it would result in a lot less waiting.&lt;/li&gt;
&lt;li&gt;It will also save engineers time to build and run the software locally. In this era of &lt;a href=&quot;https://geshan.com.np/blog/2018/10/moving-from-a-and-b-to-~150-microservices/&quot;&gt;microservices&lt;/a&gt; if those images would build faster it would help a lot.&lt;/li&gt;
&lt;li&gt;The faster build also enables faster deployment and releases. If you wanted to rollback a buggy deployment if the build took 10 minutes that buggy code stays in prod for at least those 10 minutes while the reverted change is building.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;docker-build-example%3A-slow-build&quot;&gt;Docker Build example: slow build &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#docker-build-example%3A-slow-build&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let’s look at the docker below, this innocent-looking docker file is taken from a &lt;a href=&quot;https://github.com/geshan/currency-api/commit/1bfa57939bb7647d9350a7445d223e4c0789f112&quot;&gt;Node Js API&lt;/a&gt;. It has one major issue we will uncover as we proceed:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:14-alpine&lt;br /&gt;&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --production&lt;br /&gt;&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;RUN npm ci&lt;/code&gt; is another better &lt;a href=&quot;https://blog.npmjs.org/post/171556855892/introducing-npm-ci-for-faster-more-reliable&quot; title=&quot;NPM ci a better option&quot;&gt;option&lt;/a&gt; in place of &lt;code&gt;RUN npm install --production&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;let&#39;s-use-the-regular-docker-build&quot;&gt;Let&#39;s use the regular docker build &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#let&#39;s-use-the-regular-docker-build&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;When we try to build the above docker file with docker build using the following command&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; docker build -t node-14-first-bad-cache-no-buildkit &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;time&lt;/code&gt; &lt;a href=&quot;https://www.computerhope.com/unix/utime.htm&quot;&gt;command&lt;/a&gt; is prefixed to the &lt;code&gt;docker build&lt;/code&gt; command so that we know the time it takes for the docker build command to finish. Below is how long it took:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-build-example/02docker-build-bad-cache-no-buildkit.jpg&quot; title=&quot;First docker build without buildkit and no thoughts on caching&quot; alt=&quot;Docker build example output without buildkit and has bad caching&quot; /&gt;
&lt;blockquote&gt;
&lt;p&gt;As seen above it took 57.17 seconds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;easy-speed-up%2C-use-buildkit&quot;&gt;Easy speed up, use BUILDKIT &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#easy-speed-up%2C-use-buildkit&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Docker build has recently added &lt;a href=&quot;https://docs.docker.com/develop/develop-images/build_enhancements/&quot;&gt;BUILDKIT&lt;/a&gt; from version 18.09. Docker basically says it is an overhaul of the build process. As mentioned in this &lt;a href=&quot;https://brianchristner.io/what-is-docker-buildkit/&quot;&gt;post&lt;/a&gt; it is faster, efficient, and concurrent. You can read more about its goodness in this &lt;a href=&quot;https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/&quot;&gt;article&lt;/a&gt; on &lt;a href=&quot;http://docker.com/&quot;&gt;docker.com&lt;/a&gt;. For now, let’s see it in action:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; docker build -t node-14-second-bad-cache-with-buildkit &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-build-example/03docker-build-bad-cache-with-buildkit.jpg&quot; title=&quot;Second docker build with buildkit but no thoughts on caching&quot; alt=&quot;Docker build example output with buildkit but has bad caching&quot; /&gt;
&lt;p&gt;As you can see the build time is less than half of the previous build without buildkit.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This build only took 27.32 seconds compared to the above build which took 57.14 seconds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;docker-build-example%3A-fast-build&quot;&gt;Docker Build example: fast build &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#docker-build-example%3A-fast-build&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, there is a major issue in our previous docker file. The docker cache is busted on each change be it our custom code or any other npm modules being added. Read more about docker build cache in this &lt;a href=&quot;https://pythonspeed.com/articles/docker-caching-model/&quot; title=&quot;Docker build cache&quot;&gt;post&lt;/a&gt; too.&lt;/p&gt;
&lt;h3 id=&quot;faster-docker-build-with-proper-caching&quot;&gt;Faster docker build with proper caching &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#faster-docker-build-with-proper-caching&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Our code changes almost every time but the npm modules we pull in change infrequently. So we can safely cache the npm modules as below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:14-alpine&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package.json package-lock.json /src/&lt;br /&gt;&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --production&lt;br /&gt;&lt;br /&gt;COPY &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; /src&lt;br /&gt;EXPOSE &lt;span class=&quot;token number&quot;&gt;8080&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can have a look at the diff between these two docker files &lt;a href=&quot;https://github.com/geshan/currency-api/compare/docker-build...docker-build-better-cache?expand=1#diff-dd2c0eb6ea5cfc6c4bd4eac30934e2d5746747af48fef6da689e85b752f39557R1&quot;&gt;here&lt;/a&gt;. The main change is that we copy the package.json and package-lock.json file first then run npm install. Only after that, the custom code is copied to &lt;code&gt;/src&lt;/code&gt;. So if you don&#39;t add a new npm library the cache will hold up.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It took 34 seconds to build for the first time as below with the following command:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; docker build -t node-14-third-good-cache-with-buildkit &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-build-example/04docker-build-good-cache-with-buildkit.jpg&quot; title=&quot;Third docker build with buildkit and good caching&quot; alt=&quot;Docker build example output with buildkit and has good caching&quot; /&gt;
&lt;h3 id=&quot;is-docker-build-fast-after-code-change%3F&quot;&gt;Is docker build fast after code change? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#is-docker-build-fast-after-code-change%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For this docker build example, I added a line of &lt;a href=&quot;https://github.com/geshan/currency-api/compare/docker-build...docker-build-better-cache?expand=1#diff-e727e4bdf3657fd1d798edcd6b099d6e092f8573cba266154583a746bba0f346R30&quot;&gt;comment&lt;/a&gt; in the index.js file of the Node JS API application. Now let’s see how long it takes and if it caches the node_modules used in the &lt;code&gt;npm install&lt;/code&gt; command.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;DOCKER_BUILDKIT&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; docker build -t node-14-fourth-good-cache-file-change-with-buildkit &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The build took only 6.01 seconds, thanks to great cache usage by docker and use of buildkit.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-build-example/05docker-build-good-cache-with-bk-code-change.jpg&quot; title=&quot;Fourth docker build with buildkit and good caching after code change&quot; alt=&quot;Docker build example output with buildkit and has good caching after code change&quot; /&gt;
&lt;p&gt;Even though the code changed but the NPM modules were cached making the build complete in mere 6 seconds. The same principles apply for exploiting docker build cache. It can be applied to PHP with composer.json and composer.lock file or any other language. Always think of the previous command run and how can it be cached better.&lt;/p&gt;
&lt;p&gt;All four images were around 233 MB, one took ~60 seconds and the last one took 6 seconds. That is like 10x faster.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are building docker images don’t forget to use BUILDKIT, it is super efficient. On top of BUILDKIT always analyze how to exploit &lt;a href=&quot;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache&quot;&gt;docker build cache&lt;/a&gt; to your advantage of faster docker builds.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope this small docker build example has helped you. Things like having smaller docker images like using alpine base Image can also help a bit in speeding up your docker build.&lt;/p&gt;
</content>
	</entry>
</feed>
